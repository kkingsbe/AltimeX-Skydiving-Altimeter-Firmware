
USB Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080089b4  080089b4  000189b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a44  08008a44  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08008a44  08008a44  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a44  08008a44  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a44  08008a44  00018a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a48  08008a48  00018a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08008a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001320  2000017c  08008bc8  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000149c  08008bc8  0002149c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015040  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000339d  00000000  00000000  000351e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00038588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  000398a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab3c  00000000  00000000  0003aa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a33  00000000  00000000  00055594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f86d  00000000  00000000  0006cfc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc834  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc0  00000000  00000000  000fc884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800899c 	.word	0x0800899c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800899c 	.word	0x0800899c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint8_t *data = "Hello World from USB CDC\n";
 8000162:	4b0f      	ldr	r3, [pc, #60]	; (80001a0 <main+0x44>)
 8000164:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 fb41 	bl	80007ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f81b 	bl	80001a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 f991 	bl	8000494 <MX_GPIO_Init>
  MX_DMA_Init();
 8000172:	f000 f971 	bl	8000458 <MX_DMA_Init>
  MX_I2C1_Init();
 8000176:	f000 f871 	bl	800025c <MX_I2C1_Init>
  MX_TIM2_Init();
 800017a:	f000 f8ed 	bl	8000358 <MX_TIM2_Init>
  MX_TIM1_Init();
 800017e:	f000 f89b 	bl	80002b8 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000182:	f007 ff43 	bl	800800c <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	CDC_Transmit_FS(data, strlen(data));
 8000186:	6878      	ldr	r0, [r7, #4]
 8000188:	f7ff ffe0 	bl	800014c <strlen>
 800018c:	4603      	mov	r3, r0
 800018e:	4619      	mov	r1, r3
 8000190:	6878      	ldr	r0, [r7, #4]
 8000192:	f007 fff9 	bl	8008188 <CDC_Transmit_FS>
	HAL_Delay (1000);
 8000196:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800019a:	f000 fb89 	bl	80008b0 <HAL_Delay>
  {
 800019e:	e7f2      	b.n	8000186 <main+0x2a>
 80001a0:	080089b4 	.word	0x080089b4

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b094      	sub	sp, #80	; 0x50
 80001a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ae:	2228      	movs	r2, #40	; 0x28
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f008 fbea 	bl	800898c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b8:	f107 0314 	add.w	r3, r7, #20
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
 80001c0:	605a      	str	r2, [r3, #4]
 80001c2:	609a      	str	r2, [r3, #8]
 80001c4:	60da      	str	r2, [r3, #12]
 80001c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d4:	2301      	movs	r3, #1
 80001d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e2:	2301      	movs	r3, #1
 80001e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e6:	2302      	movs	r3, #2
 80001e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001fa:	4618      	mov	r0, r3
 80001fc:	f002 fe38 	bl	8002e70 <HAL_RCC_OscConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000206:	f000 f991 	bl	800052c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020a:	230f      	movs	r3, #15
 800020c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800020e:	2302      	movs	r3, #2
 8000210:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800021a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000220:	f107 0314 	add.w	r3, r7, #20
 8000224:	2101      	movs	r1, #1
 8000226:	4618      	mov	r0, r3
 8000228:	f003 f8a4 	bl	8003374 <HAL_RCC_ClockConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000232:	f000 f97b 	bl	800052c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000236:	2310      	movs	r3, #16
 8000238:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800023a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800023e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	4618      	mov	r0, r3
 8000244:	f003 fa10 	bl	8003668 <HAL_RCCEx_PeriphCLKConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800024e:	f000 f96d 	bl	800052c <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3750      	adds	r7, #80	; 0x50
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <MX_I2C1_Init+0x50>)
 8000262:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <MX_I2C1_Init+0x54>)
 8000264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000266:	4b11      	ldr	r3, [pc, #68]	; (80002ac <MX_I2C1_Init+0x50>)
 8000268:	4a12      	ldr	r2, [pc, #72]	; (80002b4 <MX_I2C1_Init+0x58>)
 800026a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <MX_I2C1_Init+0x50>)
 800026e:	2200      	movs	r2, #0
 8000270:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <MX_I2C1_Init+0x50>)
 8000274:	2200      	movs	r2, #0
 8000276:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <MX_I2C1_Init+0x50>)
 800027a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800027e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <MX_I2C1_Init+0x50>)
 8000282:	2200      	movs	r2, #0
 8000284:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <MX_I2C1_Init+0x50>)
 8000288:	2200      	movs	r2, #0
 800028a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <MX_I2C1_Init+0x50>)
 800028e:	2200      	movs	r2, #0
 8000290:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000292:	4b06      	ldr	r3, [pc, #24]	; (80002ac <MX_I2C1_Init+0x50>)
 8000294:	2200      	movs	r2, #0
 8000296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000298:	4804      	ldr	r0, [pc, #16]	; (80002ac <MX_I2C1_Init+0x50>)
 800029a:	f000 ff37 	bl	800110c <HAL_I2C_Init>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002a4:	f000 f942 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000198 	.word	0x20000198
 80002b0:	40005400 	.word	0x40005400
 80002b4:	000186a0 	.word	0x000186a0

080002b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002be:	f107 0308 	add.w	r3, r7, #8
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002cc:	463b      	mov	r3, r7
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002d4:	4b1e      	ldr	r3, [pc, #120]	; (8000350 <MX_TIM1_Init+0x98>)
 80002d6:	4a1f      	ldr	r2, [pc, #124]	; (8000354 <MX_TIM1_Init+0x9c>)
 80002d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 80002da:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <MX_TIM1_Init+0x98>)
 80002dc:	2203      	movs	r2, #3
 80002de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <MX_TIM1_Init+0x98>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	; (8000350 <MX_TIM1_Init+0x98>)
 80002e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ee:	4b18      	ldr	r3, [pc, #96]	; (8000350 <MX_TIM1_Init+0x98>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002f4:	4b16      	ldr	r3, [pc, #88]	; (8000350 <MX_TIM1_Init+0x98>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002fa:	4b15      	ldr	r3, [pc, #84]	; (8000350 <MX_TIM1_Init+0x98>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000300:	4813      	ldr	r0, [pc, #76]	; (8000350 <MX_TIM1_Init+0x98>)
 8000302:	f003 fa67 	bl	80037d4 <HAL_TIM_Base_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800030c:	f000 f90e 	bl	800052c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000314:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000316:	f107 0308 	add.w	r3, r7, #8
 800031a:	4619      	mov	r1, r3
 800031c:	480c      	ldr	r0, [pc, #48]	; (8000350 <MX_TIM1_Init+0x98>)
 800031e:	f003 fbc3 	bl	8003aa8 <HAL_TIM_ConfigClockSource>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000328:	f000 f900 	bl	800052c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800032c:	2300      	movs	r3, #0
 800032e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000330:	2300      	movs	r3, #0
 8000332:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000334:	463b      	mov	r3, r7
 8000336:	4619      	mov	r1, r3
 8000338:	4805      	ldr	r0, [pc, #20]	; (8000350 <MX_TIM1_Init+0x98>)
 800033a:	f003 fefd 	bl	8004138 <HAL_TIMEx_MasterConfigSynchronization>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000344:	f000 f8f2 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	3718      	adds	r7, #24
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	200001ec 	.word	0x200001ec
 8000354:	40012c00 	.word	0x40012c00

08000358 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b08e      	sub	sp, #56	; 0x38
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800035e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800036c:	f107 0320 	add.w	r3, r7, #32
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	60da      	str	r2, [r3, #12]
 8000382:	611a      	str	r2, [r3, #16]
 8000384:	615a      	str	r2, [r3, #20]
 8000386:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000388:	4b32      	ldr	r3, [pc, #200]	; (8000454 <MX_TIM2_Init+0xfc>)
 800038a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800038e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000390:	4b30      	ldr	r3, [pc, #192]	; (8000454 <MX_TIM2_Init+0xfc>)
 8000392:	2200      	movs	r2, #0
 8000394:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000396:	4b2f      	ldr	r3, [pc, #188]	; (8000454 <MX_TIM2_Init+0xfc>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64-1;
 800039c:	4b2d      	ldr	r3, [pc, #180]	; (8000454 <MX_TIM2_Init+0xfc>)
 800039e:	223f      	movs	r2, #63	; 0x3f
 80003a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a2:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <MX_TIM2_Init+0xfc>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003a8:	4b2a      	ldr	r3, [pc, #168]	; (8000454 <MX_TIM2_Init+0xfc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003ae:	4829      	ldr	r0, [pc, #164]	; (8000454 <MX_TIM2_Init+0xfc>)
 80003b0:	f003 fa10 	bl	80037d4 <HAL_TIM_Base_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80003ba:	f000 f8b7 	bl	800052c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003c8:	4619      	mov	r1, r3
 80003ca:	4822      	ldr	r0, [pc, #136]	; (8000454 <MX_TIM2_Init+0xfc>)
 80003cc:	f003 fb6c 	bl	8003aa8 <HAL_TIM_ConfigClockSource>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80003d6:	f000 f8a9 	bl	800052c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003da:	481e      	ldr	r0, [pc, #120]	; (8000454 <MX_TIM2_Init+0xfc>)
 80003dc:	f003 fa49 	bl	8003872 <HAL_TIM_PWM_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80003e6:	f000 f8a1 	bl	800052c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ea:	2300      	movs	r3, #0
 80003ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ee:	2300      	movs	r3, #0
 80003f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003f2:	f107 0320 	add.w	r3, r7, #32
 80003f6:	4619      	mov	r1, r3
 80003f8:	4816      	ldr	r0, [pc, #88]	; (8000454 <MX_TIM2_Init+0xfc>)
 80003fa:	f003 fe9d 	bl	8004138 <HAL_TIMEx_MasterConfigSynchronization>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000404:	f000 f892 	bl	800052c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000408:	2360      	movs	r3, #96	; 0x60
 800040a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2200      	movs	r2, #0
 800041c:	4619      	mov	r1, r3
 800041e:	480d      	ldr	r0, [pc, #52]	; (8000454 <MX_TIM2_Init+0xfc>)
 8000420:	f003 fa80 	bl	8003924 <HAL_TIM_PWM_ConfigChannel>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800042a:	f000 f87f 	bl	800052c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2204      	movs	r2, #4
 8000432:	4619      	mov	r1, r3
 8000434:	4807      	ldr	r0, [pc, #28]	; (8000454 <MX_TIM2_Init+0xfc>)
 8000436:	f003 fa75 	bl	8003924 <HAL_TIM_PWM_ConfigChannel>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000440:	f000 f874 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000444:	4803      	ldr	r0, [pc, #12]	; (8000454 <MX_TIM2_Init+0xfc>)
 8000446:	f000 f939 	bl	80006bc <HAL_TIM_MspPostInit>

}
 800044a:	bf00      	nop
 800044c:	3738      	adds	r7, #56	; 0x38
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000234 	.word	0x20000234

08000458 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <MX_DMA_Init+0x38>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a0b      	ldr	r2, [pc, #44]	; (8000490 <MX_DMA_Init+0x38>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <MX_DMA_Init+0x38>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000476:	2200      	movs	r2, #0
 8000478:	2100      	movs	r1, #0
 800047a:	2011      	movs	r0, #17
 800047c:	f000 fb13 	bl	8000aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000480:	2011      	movs	r0, #17
 8000482:	f000 fb2c 	bl	8000ade <HAL_NVIC_EnableIRQ>

}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40021000 	.word	0x40021000

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a8:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <MX_GPIO_Init+0x90>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <MX_GPIO_Init+0x90>)
 80004ae:	f043 0320 	orr.w	r3, r3, #32
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <MX_GPIO_Init+0x90>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0320 	and.w	r3, r3, #32
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	4b18      	ldr	r3, [pc, #96]	; (8000524 <MX_GPIO_Init+0x90>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a17      	ldr	r2, [pc, #92]	; (8000524 <MX_GPIO_Init+0x90>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <MX_GPIO_Init+0x90>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0304 	and.w	r3, r3, #4
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d8:	4b12      	ldr	r3, [pc, #72]	; (8000524 <MX_GPIO_Init+0x90>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a11      	ldr	r2, [pc, #68]	; (8000524 <MX_GPIO_Init+0x90>)
 80004de:	f043 0308 	orr.w	r3, r3, #8
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_GPIO_Init+0x90>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0308 	and.w	r3, r3, #8
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 80004f6:	480c      	ldr	r0, [pc, #48]	; (8000528 <MX_GPIO_Init+0x94>)
 80004f8:	f000 fdf0 	bl	80010dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80004fc:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 8000500:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2302      	movs	r3, #2
 800050c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4619      	mov	r1, r3
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <MX_GPIO_Init+0x94>)
 8000516:	f000 fc5d 	bl	8000dd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800051a:	bf00      	nop
 800051c:	3720      	adds	r7, #32
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000
 8000528:	40010c00 	.word	0x40010c00

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	e7fe      	b.n	8000534 <Error_Handler+0x8>
	...

08000538 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <HAL_MspInit+0x40>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <HAL_MspInit+0x40>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6193      	str	r3, [r2, #24]
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <HAL_MspInit+0x40>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <HAL_MspInit+0x40>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4a07      	ldr	r2, [pc, #28]	; (8000578 <HAL_MspInit+0x40>)
 800055c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000560:	61d3      	str	r3, [r2, #28]
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <HAL_MspInit+0x40>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a15      	ldr	r2, [pc, #84]	; (80005ec <HAL_I2C_MspInit+0x70>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d123      	bne.n	80005e4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <HAL_I2C_MspInit+0x74>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <HAL_I2C_MspInit+0x74>)
 80005a2:	f043 0308 	orr.w	r3, r3, #8
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <HAL_I2C_MspInit+0x74>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0308 	and.w	r3, r3, #8
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005b4:	23c0      	movs	r3, #192	; 0xc0
 80005b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005b8:	2312      	movs	r3, #18
 80005ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005bc:	2303      	movs	r3, #3
 80005be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4619      	mov	r1, r3
 80005c6:	480b      	ldr	r0, [pc, #44]	; (80005f4 <HAL_I2C_MspInit+0x78>)
 80005c8:	f000 fc04 	bl	8000dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_I2C_MspInit+0x74>)
 80005ce:	69db      	ldr	r3, [r3, #28]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <HAL_I2C_MspInit+0x74>)
 80005d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005d6:	61d3      	str	r3, [r2, #28]
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <HAL_I2C_MspInit+0x74>)
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005e4:	bf00      	nop
 80005e6:	3720      	adds	r7, #32
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40005400 	.word	0x40005400
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010c00 	.word	0x40010c00

080005f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a29      	ldr	r2, [pc, #164]	; (80006ac <HAL_TIM_Base_MspInit+0xb4>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d10c      	bne.n	8000624 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800060a:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <HAL_TIM_Base_MspInit+0xb8>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4a28      	ldr	r2, [pc, #160]	; (80006b0 <HAL_TIM_Base_MspInit+0xb8>)
 8000610:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000614:	6193      	str	r3, [r2, #24]
 8000616:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <HAL_TIM_Base_MspInit+0xb8>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000622:	e03e      	b.n	80006a2 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800062c:	d139      	bne.n	80006a2 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <HAL_TIM_Base_MspInit+0xb8>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a1f      	ldr	r2, [pc, #124]	; (80006b0 <HAL_TIM_Base_MspInit+0xb8>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <HAL_TIM_Base_MspInit+0xb8>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <HAL_TIM_Base_MspInit+0xbc>)
 8000648:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <HAL_TIM_Base_MspInit+0xc0>)
 800064a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <HAL_TIM_Base_MspInit+0xbc>)
 800064e:	2210      	movs	r2, #16
 8000650:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <HAL_TIM_Base_MspInit+0xbc>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <HAL_TIM_Base_MspInit+0xbc>)
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <HAL_TIM_Base_MspInit+0xbc>)
 8000660:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000664:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <HAL_TIM_Base_MspInit+0xbc>)
 8000668:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800066c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <HAL_TIM_Base_MspInit+0xbc>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <HAL_TIM_Base_MspInit+0xbc>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <HAL_TIM_Base_MspInit+0xbc>)
 800067c:	f000 fa4a 	bl	8000b14 <HAL_DMA_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 8000686:	f7ff ff51 	bl	800052c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <HAL_TIM_Base_MspInit+0xbc>)
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
 8000690:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <HAL_TIM_Base_MspInit+0xbc>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <HAL_TIM_Base_MspInit+0xbc>)
 800069a:	631a      	str	r2, [r3, #48]	; 0x30
 800069c:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <HAL_TIM_Base_MspInit+0xbc>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40012c00 	.word	0x40012c00
 80006b0:	40021000 	.word	0x40021000
 80006b4:	2000027c 	.word	0x2000027c
 80006b8:	40020080 	.word	0x40020080

080006bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006da:	d117      	bne.n	800070c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_TIM_MspPostInit+0x58>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <HAL_TIM_MspPostInit+0x58>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <HAL_TIM_MspPostInit+0x58>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006f4:	2303      	movs	r3, #3
 80006f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2302      	movs	r3, #2
 80006fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	4619      	mov	r1, r3
 8000706:	4804      	ldr	r0, [pc, #16]	; (8000718 <HAL_TIM_MspPostInit+0x5c>)
 8000708:	f000 fb64 	bl	8000dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	40010800 	.word	0x40010800

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <NMI_Handler+0x4>

08000722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <HardFault_Handler+0x4>

08000728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <MemManage_Handler+0x4>

0800072e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <BusFault_Handler+0x4>

08000734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <UsageFault_Handler+0x4>

0800073a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000762:	f000 f889 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <DMA1_Channel7_IRQHandler+0x10>)
 8000772:	f000 fa29 	bl	8000bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000027c 	.word	0x2000027c

08000780 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000786:	f000 ff2a 	bl	80015de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000f8c 	.word	0x20000f8c

08000794 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a0:	f7ff fff8 	bl	8000794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a4:	480b      	ldr	r0, [pc, #44]	; (80007d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007a6:	490c      	ldr	r1, [pc, #48]	; (80007d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007a8:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007bc:	4c09      	ldr	r4, [pc, #36]	; (80007e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ca:	f008 f8bb 	bl	8008944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ce:	f7ff fcc5 	bl	800015c <main>
  bx lr
 80007d2:	4770      	bx	lr
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80007dc:	08008a4c 	.word	0x08008a4c
  ldr r2, =_sbss
 80007e0:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80007e4:	2000149c 	.word	0x2000149c

080007e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_2_IRQHandler>
	...

080007ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_Init+0x28>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <HAL_Init+0x28>)
 80007f6:	f043 0310 	orr.w	r3, r3, #16
 80007fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 f947 	bl	8000a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000802:	200f      	movs	r0, #15
 8000804:	f000 f808 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000808:	f7ff fe96 	bl	8000538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40022000 	.word	0x40022000

08000818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_InitTick+0x54>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_InitTick+0x58>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f95f 	bl	8000afa <HAL_SYSTICK_Config>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e00e      	b.n	8000864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d80a      	bhi.n	8000862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f000 f927 	bl	8000aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000858:	4a06      	ldr	r2, [pc, #24]	; (8000874 <HAL_InitTick+0x5c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000000 	.word	0x20000000
 8000870:	20000008 	.word	0x20000008
 8000874:	20000004 	.word	0x20000004

08000878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_IncTick+0x1c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_IncTick+0x20>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a03      	ldr	r2, [pc, #12]	; (8000898 <HAL_IncTick+0x20>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	20000008 	.word	0x20000008
 8000898:	200002c0 	.word	0x200002c0

0800089c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return uwTick;
 80008a0:	4b02      	ldr	r3, [pc, #8]	; (80008ac <HAL_GetTick+0x10>)
 80008a2:	681b      	ldr	r3, [r3, #0]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	200002c0 	.word	0x200002c0

080008b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b8:	f7ff fff0 	bl	800089c <HAL_GetTick>
 80008bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c8:	d005      	beq.n	80008d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_Delay+0x44>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4413      	add	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008d6:	bf00      	nop
 80008d8:	f7ff ffe0 	bl	800089c <HAL_GetTick>
 80008dc:	4602      	mov	r2, r0
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8f7      	bhi.n	80008d8 <HAL_Delay+0x28>
  {
  }
}
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000008 	.word	0x20000008

080008f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000914:	4013      	ands	r3, r2
 8000916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092a:	4a04      	ldr	r2, [pc, #16]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	60d3      	str	r3, [r2, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <__NVIC_GetPriorityGrouping+0x18>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	f003 0307 	and.w	r3, r3, #7
}
 800094e:	4618      	mov	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	2b00      	cmp	r3, #0
 800096c:	db0b      	blt.n	8000986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	f003 021f 	and.w	r2, r3, #31
 8000974:	4906      	ldr	r1, [pc, #24]	; (8000990 <__NVIC_EnableIRQ+0x34>)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	095b      	lsrs	r3, r3, #5
 800097c:	2001      	movs	r0, #1
 800097e:	fa00 f202 	lsl.w	r2, r0, r2
 8000982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	e000e100 	.word	0xe000e100

08000994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	db0a      	blt.n	80009be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	490c      	ldr	r1, [pc, #48]	; (80009e0 <__NVIC_SetPriority+0x4c>)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	440b      	add	r3, r1
 80009b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009bc:	e00a      	b.n	80009d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4908      	ldr	r1, [pc, #32]	; (80009e4 <__NVIC_SetPriority+0x50>)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	3b04      	subs	r3, #4
 80009cc:	0112      	lsls	r2, r2, #4
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	440b      	add	r3, r1
 80009d2:	761a      	strb	r2, [r3, #24]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000e100 	.word	0xe000e100
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	f1c3 0307 	rsb	r3, r3, #7
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	bf28      	it	cs
 8000a06:	2304      	movcs	r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	2b06      	cmp	r3, #6
 8000a10:	d902      	bls.n	8000a18 <NVIC_EncodePriority+0x30>
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3b03      	subs	r3, #3
 8000a16:	e000      	b.n	8000a1a <NVIC_EncodePriority+0x32>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43da      	mvns	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a30:	f04f 31ff 	mov.w	r1, #4294967295
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43d9      	mvns	r1, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	4313      	orrs	r3, r2
         );
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3724      	adds	r7, #36	; 0x24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a5c:	d301      	bcc.n	8000a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00f      	b.n	8000a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <SysTick_Config+0x40>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f7ff ff90 	bl	8000994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <SysTick_Config+0x40>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SysTick_Config+0x40>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff2d 	bl	80008f8 <__NVIC_SetPriorityGrouping>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab8:	f7ff ff42 	bl	8000940 <__NVIC_GetPriorityGrouping>
 8000abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	6978      	ldr	r0, [r7, #20]
 8000ac4:	f7ff ff90 	bl	80009e8 <NVIC_EncodePriority>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff5f 	bl	8000994 <__NVIC_SetPriority>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff35 	bl	800095c <__NVIC_EnableIRQ>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ffa2 	bl	8000a4c <SysTick_Config>
 8000b08:	4603      	mov	r3, r0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d101      	bne.n	8000b2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e043      	b.n	8000bb2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <HAL_DMA_Init+0xa8>)
 8000b32:	4413      	add	r3, r2
 8000b34:	4a22      	ldr	r2, [pc, #136]	; (8000bc0 <HAL_DMA_Init+0xac>)
 8000b36:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3a:	091b      	lsrs	r3, r3, #4
 8000b3c:	009a      	lsls	r2, r3, #2
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a1f      	ldr	r2, [pc, #124]	; (8000bc4 <HAL_DMA_Init+0xb0>)
 8000b46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	bffdfff8 	.word	0xbffdfff8
 8000bc0:	cccccccd 	.word	0xcccccccd
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	2204      	movs	r2, #4
 8000be6:	409a      	lsls	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4013      	ands	r3, r2
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d04f      	beq.n	8000c90 <HAL_DMA_IRQHandler+0xc8>
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d04a      	beq.n	8000c90 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f003 0320 	and.w	r3, r3, #32
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d107      	bne.n	8000c18 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f022 0204 	bic.w	r2, r2, #4
 8000c16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a66      	ldr	r2, [pc, #408]	; (8000db8 <HAL_DMA_IRQHandler+0x1f0>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d029      	beq.n	8000c76 <HAL_DMA_IRQHandler+0xae>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a65      	ldr	r2, [pc, #404]	; (8000dbc <HAL_DMA_IRQHandler+0x1f4>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d022      	beq.n	8000c72 <HAL_DMA_IRQHandler+0xaa>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a63      	ldr	r2, [pc, #396]	; (8000dc0 <HAL_DMA_IRQHandler+0x1f8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d01a      	beq.n	8000c6c <HAL_DMA_IRQHandler+0xa4>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a62      	ldr	r2, [pc, #392]	; (8000dc4 <HAL_DMA_IRQHandler+0x1fc>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d012      	beq.n	8000c66 <HAL_DMA_IRQHandler+0x9e>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a60      	ldr	r2, [pc, #384]	; (8000dc8 <HAL_DMA_IRQHandler+0x200>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d00a      	beq.n	8000c60 <HAL_DMA_IRQHandler+0x98>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a5f      	ldr	r2, [pc, #380]	; (8000dcc <HAL_DMA_IRQHandler+0x204>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d102      	bne.n	8000c5a <HAL_DMA_IRQHandler+0x92>
 8000c54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c58:	e00e      	b.n	8000c78 <HAL_DMA_IRQHandler+0xb0>
 8000c5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c5e:	e00b      	b.n	8000c78 <HAL_DMA_IRQHandler+0xb0>
 8000c60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c64:	e008      	b.n	8000c78 <HAL_DMA_IRQHandler+0xb0>
 8000c66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c6a:	e005      	b.n	8000c78 <HAL_DMA_IRQHandler+0xb0>
 8000c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c70:	e002      	b.n	8000c78 <HAL_DMA_IRQHandler+0xb0>
 8000c72:	2340      	movs	r3, #64	; 0x40
 8000c74:	e000      	b.n	8000c78 <HAL_DMA_IRQHandler+0xb0>
 8000c76:	2304      	movs	r3, #4
 8000c78:	4a55      	ldr	r2, [pc, #340]	; (8000dd0 <HAL_DMA_IRQHandler+0x208>)
 8000c7a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f000 8094 	beq.w	8000dae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000c8e:	e08e      	b.n	8000dae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	2202      	movs	r2, #2
 8000c96:	409a      	lsls	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d056      	beq.n	8000d4e <HAL_DMA_IRQHandler+0x186>
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d051      	beq.n	8000d4e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0320 	and.w	r3, r3, #32
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10b      	bne.n	8000cd0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 020a 	bic.w	r2, r2, #10
 8000cc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a38      	ldr	r2, [pc, #224]	; (8000db8 <HAL_DMA_IRQHandler+0x1f0>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d029      	beq.n	8000d2e <HAL_DMA_IRQHandler+0x166>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a37      	ldr	r2, [pc, #220]	; (8000dbc <HAL_DMA_IRQHandler+0x1f4>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d022      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x162>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a35      	ldr	r2, [pc, #212]	; (8000dc0 <HAL_DMA_IRQHandler+0x1f8>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d01a      	beq.n	8000d24 <HAL_DMA_IRQHandler+0x15c>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a34      	ldr	r2, [pc, #208]	; (8000dc4 <HAL_DMA_IRQHandler+0x1fc>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d012      	beq.n	8000d1e <HAL_DMA_IRQHandler+0x156>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a32      	ldr	r2, [pc, #200]	; (8000dc8 <HAL_DMA_IRQHandler+0x200>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d00a      	beq.n	8000d18 <HAL_DMA_IRQHandler+0x150>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a31      	ldr	r2, [pc, #196]	; (8000dcc <HAL_DMA_IRQHandler+0x204>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d102      	bne.n	8000d12 <HAL_DMA_IRQHandler+0x14a>
 8000d0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d10:	e00e      	b.n	8000d30 <HAL_DMA_IRQHandler+0x168>
 8000d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d16:	e00b      	b.n	8000d30 <HAL_DMA_IRQHandler+0x168>
 8000d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d1c:	e008      	b.n	8000d30 <HAL_DMA_IRQHandler+0x168>
 8000d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d22:	e005      	b.n	8000d30 <HAL_DMA_IRQHandler+0x168>
 8000d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d28:	e002      	b.n	8000d30 <HAL_DMA_IRQHandler+0x168>
 8000d2a:	2320      	movs	r3, #32
 8000d2c:	e000      	b.n	8000d30 <HAL_DMA_IRQHandler+0x168>
 8000d2e:	2302      	movs	r3, #2
 8000d30:	4a27      	ldr	r2, [pc, #156]	; (8000dd0 <HAL_DMA_IRQHandler+0x208>)
 8000d32:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d034      	beq.n	8000dae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d4c:	e02f      	b.n	8000dae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	2208      	movs	r2, #8
 8000d54:	409a      	lsls	r2, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d028      	beq.n	8000db0 <HAL_DMA_IRQHandler+0x1e8>
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d023      	beq.n	8000db0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 020e 	bic.w	r2, r2, #14
 8000d76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d80:	2101      	movs	r1, #1
 8000d82:	fa01 f202 	lsl.w	r2, r1, r2
 8000d86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d004      	beq.n	8000db0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	4798      	blx	r3
    }
  }
  return;
 8000dae:	bf00      	nop
 8000db0:	bf00      	nop
}
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40020008 	.word	0x40020008
 8000dbc:	4002001c 	.word	0x4002001c
 8000dc0:	40020030 	.word	0x40020030
 8000dc4:	40020044 	.word	0x40020044
 8000dc8:	40020058 	.word	0x40020058
 8000dcc:	4002006c 	.word	0x4002006c
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b08b      	sub	sp, #44	; 0x2c
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de6:	e169      	b.n	80010bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000de8:	2201      	movs	r2, #1
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	69fa      	ldr	r2, [r7, #28]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f040 8158 	bne.w	80010b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	4a9a      	ldr	r2, [pc, #616]	; (8001074 <HAL_GPIO_Init+0x2a0>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d05e      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e10:	4a98      	ldr	r2, [pc, #608]	; (8001074 <HAL_GPIO_Init+0x2a0>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d875      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e16:	4a98      	ldr	r2, [pc, #608]	; (8001078 <HAL_GPIO_Init+0x2a4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d058      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e1c:	4a96      	ldr	r2, [pc, #600]	; (8001078 <HAL_GPIO_Init+0x2a4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d86f      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e22:	4a96      	ldr	r2, [pc, #600]	; (800107c <HAL_GPIO_Init+0x2a8>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d052      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e28:	4a94      	ldr	r2, [pc, #592]	; (800107c <HAL_GPIO_Init+0x2a8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d869      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e2e:	4a94      	ldr	r2, [pc, #592]	; (8001080 <HAL_GPIO_Init+0x2ac>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d04c      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e34:	4a92      	ldr	r2, [pc, #584]	; (8001080 <HAL_GPIO_Init+0x2ac>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d863      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e3a:	4a92      	ldr	r2, [pc, #584]	; (8001084 <HAL_GPIO_Init+0x2b0>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d046      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e40:	4a90      	ldr	r2, [pc, #576]	; (8001084 <HAL_GPIO_Init+0x2b0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d85d      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e46:	2b12      	cmp	r3, #18
 8000e48:	d82a      	bhi.n	8000ea0 <HAL_GPIO_Init+0xcc>
 8000e4a:	2b12      	cmp	r3, #18
 8000e4c:	d859      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e4e:	a201      	add	r2, pc, #4	; (adr r2, 8000e54 <HAL_GPIO_Init+0x80>)
 8000e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e54:	08000ecf 	.word	0x08000ecf
 8000e58:	08000ea9 	.word	0x08000ea9
 8000e5c:	08000ebb 	.word	0x08000ebb
 8000e60:	08000efd 	.word	0x08000efd
 8000e64:	08000f03 	.word	0x08000f03
 8000e68:	08000f03 	.word	0x08000f03
 8000e6c:	08000f03 	.word	0x08000f03
 8000e70:	08000f03 	.word	0x08000f03
 8000e74:	08000f03 	.word	0x08000f03
 8000e78:	08000f03 	.word	0x08000f03
 8000e7c:	08000f03 	.word	0x08000f03
 8000e80:	08000f03 	.word	0x08000f03
 8000e84:	08000f03 	.word	0x08000f03
 8000e88:	08000f03 	.word	0x08000f03
 8000e8c:	08000f03 	.word	0x08000f03
 8000e90:	08000f03 	.word	0x08000f03
 8000e94:	08000f03 	.word	0x08000f03
 8000e98:	08000eb1 	.word	0x08000eb1
 8000e9c:	08000ec5 	.word	0x08000ec5
 8000ea0:	4a79      	ldr	r2, [pc, #484]	; (8001088 <HAL_GPIO_Init+0x2b4>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ea6:	e02c      	b.n	8000f02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	623b      	str	r3, [r7, #32]
          break;
 8000eae:	e029      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	623b      	str	r3, [r7, #32]
          break;
 8000eb8:	e024      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	623b      	str	r3, [r7, #32]
          break;
 8000ec2:	e01f      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	330c      	adds	r3, #12
 8000eca:	623b      	str	r3, [r7, #32]
          break;
 8000ecc:	e01a      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	623b      	str	r3, [r7, #32]
          break;
 8000eda:	e013      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d105      	bne.n	8000ef0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69fa      	ldr	r2, [r7, #28]
 8000eec:	611a      	str	r2, [r3, #16]
          break;
 8000eee:	e009      	b.n	8000f04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69fa      	ldr	r2, [r7, #28]
 8000ef8:	615a      	str	r2, [r3, #20]
          break;
 8000efa:	e003      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
          break;
 8000f00:	e000      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          break;
 8000f02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	2bff      	cmp	r3, #255	; 0xff
 8000f08:	d801      	bhi.n	8000f0e <HAL_GPIO_Init+0x13a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	e001      	b.n	8000f12 <HAL_GPIO_Init+0x13e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3304      	adds	r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	2bff      	cmp	r3, #255	; 0xff
 8000f18:	d802      	bhi.n	8000f20 <HAL_GPIO_Init+0x14c>
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	e002      	b.n	8000f26 <HAL_GPIO_Init+0x152>
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	3b08      	subs	r3, #8
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	401a      	ands	r2, r3
 8000f38:	6a39      	ldr	r1, [r7, #32]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	431a      	orrs	r2, r3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 80b1 	beq.w	80010b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f54:	4b4d      	ldr	r3, [pc, #308]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a4c      	ldr	r2, [pc, #304]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b4a      	ldr	r3, [pc, #296]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f6c:	4a48      	ldr	r2, [pc, #288]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a40      	ldr	r2, [pc, #256]	; (8001094 <HAL_GPIO_Init+0x2c0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d013      	beq.n	8000fc0 <HAL_GPIO_Init+0x1ec>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a3f      	ldr	r2, [pc, #252]	; (8001098 <HAL_GPIO_Init+0x2c4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d00d      	beq.n	8000fbc <HAL_GPIO_Init+0x1e8>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a3e      	ldr	r2, [pc, #248]	; (800109c <HAL_GPIO_Init+0x2c8>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d007      	beq.n	8000fb8 <HAL_GPIO_Init+0x1e4>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a3d      	ldr	r2, [pc, #244]	; (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d101      	bne.n	8000fb4 <HAL_GPIO_Init+0x1e0>
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e006      	b.n	8000fc2 <HAL_GPIO_Init+0x1ee>
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	e004      	b.n	8000fc2 <HAL_GPIO_Init+0x1ee>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e002      	b.n	8000fc2 <HAL_GPIO_Init+0x1ee>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e000      	b.n	8000fc2 <HAL_GPIO_Init+0x1ee>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc4:	f002 0203 	and.w	r2, r2, #3
 8000fc8:	0092      	lsls	r2, r2, #2
 8000fca:	4093      	lsls	r3, r2
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fd2:	492f      	ldr	r1, [pc, #188]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d006      	beq.n	8000ffa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fec:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	492c      	ldr	r1, [pc, #176]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	608b      	str	r3, [r1, #8]
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	43db      	mvns	r3, r3
 8001002:	4928      	ldr	r1, [pc, #160]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8001004:	4013      	ands	r3, r2
 8001006:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001014:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	4922      	ldr	r1, [pc, #136]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	60cb      	str	r3, [r1, #12]
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	43db      	mvns	r3, r3
 800102a:	491e      	ldr	r1, [pc, #120]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 800102c:	4013      	ands	r3, r2
 800102e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d006      	beq.n	800104a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	4918      	ldr	r1, [pc, #96]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	604b      	str	r3, [r1, #4]
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	43db      	mvns	r3, r3
 8001052:	4914      	ldr	r1, [pc, #80]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8001054:	4013      	ands	r3, r2
 8001056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d021      	beq.n	80010a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	490e      	ldr	r1, [pc, #56]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	600b      	str	r3, [r1, #0]
 8001070:	e021      	b.n	80010b6 <HAL_GPIO_Init+0x2e2>
 8001072:	bf00      	nop
 8001074:	10320000 	.word	0x10320000
 8001078:	10310000 	.word	0x10310000
 800107c:	10220000 	.word	0x10220000
 8001080:	10210000 	.word	0x10210000
 8001084:	10120000 	.word	0x10120000
 8001088:	10110000 	.word	0x10110000
 800108c:	40021000 	.word	0x40021000
 8001090:	40010000 	.word	0x40010000
 8001094:	40010800 	.word	0x40010800
 8001098:	40010c00 	.word	0x40010c00
 800109c:	40011000 	.word	0x40011000
 80010a0:	40011400 	.word	0x40011400
 80010a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_GPIO_Init+0x304>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	4909      	ldr	r1, [pc, #36]	; (80010d8 <HAL_GPIO_Init+0x304>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	3301      	adds	r3, #1
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	fa22 f303 	lsr.w	r3, r2, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f47f ae8e 	bne.w	8000de8 <HAL_GPIO_Init+0x14>
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	372c      	adds	r7, #44	; 0x2c
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	40010400 	.word	0x40010400

080010dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ec:	787b      	ldrb	r3, [r7, #1]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010f8:	e003      	b.n	8001102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	041a      	lsls	r2, r3, #16
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	611a      	str	r2, [r3, #16]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e12b      	b.n	8001376 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d106      	bne.n	8001138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fa22 	bl	800057c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2224      	movs	r2, #36	; 0x24
 800113c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0201 	bic.w	r2, r2, #1
 800114e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800115e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800116e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001170:	f002 fa48 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8001174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4a81      	ldr	r2, [pc, #516]	; (8001380 <HAL_I2C_Init+0x274>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d807      	bhi.n	8001190 <HAL_I2C_Init+0x84>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4a80      	ldr	r2, [pc, #512]	; (8001384 <HAL_I2C_Init+0x278>)
 8001184:	4293      	cmp	r3, r2
 8001186:	bf94      	ite	ls
 8001188:	2301      	movls	r3, #1
 800118a:	2300      	movhi	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	e006      	b.n	800119e <HAL_I2C_Init+0x92>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4a7d      	ldr	r2, [pc, #500]	; (8001388 <HAL_I2C_Init+0x27c>)
 8001194:	4293      	cmp	r3, r2
 8001196:	bf94      	ite	ls
 8001198:	2301      	movls	r3, #1
 800119a:	2300      	movhi	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e0e7      	b.n	8001376 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4a78      	ldr	r2, [pc, #480]	; (800138c <HAL_I2C_Init+0x280>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	0c9b      	lsrs	r3, r3, #18
 80011b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a6a      	ldr	r2, [pc, #424]	; (8001380 <HAL_I2C_Init+0x274>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d802      	bhi.n	80011e0 <HAL_I2C_Init+0xd4>
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3301      	adds	r3, #1
 80011de:	e009      	b.n	80011f4 <HAL_I2C_Init+0xe8>
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011e6:	fb02 f303 	mul.w	r3, r2, r3
 80011ea:	4a69      	ldr	r2, [pc, #420]	; (8001390 <HAL_I2C_Init+0x284>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	099b      	lsrs	r3, r3, #6
 80011f2:	3301      	adds	r3, #1
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	430b      	orrs	r3, r1
 80011fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001206:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	495c      	ldr	r1, [pc, #368]	; (8001380 <HAL_I2C_Init+0x274>)
 8001210:	428b      	cmp	r3, r1
 8001212:	d819      	bhi.n	8001248 <HAL_I2C_Init+0x13c>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	1e59      	subs	r1, r3, #1
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001222:	1c59      	adds	r1, r3, #1
 8001224:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001228:	400b      	ands	r3, r1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00a      	beq.n	8001244 <HAL_I2C_Init+0x138>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1e59      	subs	r1, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fbb1 f3f3 	udiv	r3, r1, r3
 800123c:	3301      	adds	r3, #1
 800123e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001242:	e051      	b.n	80012e8 <HAL_I2C_Init+0x1dc>
 8001244:	2304      	movs	r3, #4
 8001246:	e04f      	b.n	80012e8 <HAL_I2C_Init+0x1dc>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d111      	bne.n	8001274 <HAL_I2C_Init+0x168>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1e58      	subs	r0, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6859      	ldr	r1, [r3, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	440b      	add	r3, r1
 800125e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001262:	3301      	adds	r3, #1
 8001264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001268:	2b00      	cmp	r3, #0
 800126a:	bf0c      	ite	eq
 800126c:	2301      	moveq	r3, #1
 800126e:	2300      	movne	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	e012      	b.n	800129a <HAL_I2C_Init+0x18e>
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	1e58      	subs	r0, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	0099      	lsls	r1, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	fbb0 f3f3 	udiv	r3, r0, r3
 800128a:	3301      	adds	r3, #1
 800128c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_I2C_Init+0x196>
 800129e:	2301      	movs	r3, #1
 80012a0:	e022      	b.n	80012e8 <HAL_I2C_Init+0x1dc>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10e      	bne.n	80012c8 <HAL_I2C_Init+0x1bc>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1e58      	subs	r0, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6859      	ldr	r1, [r3, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	440b      	add	r3, r1
 80012b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80012bc:	3301      	adds	r3, #1
 80012be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012c6:	e00f      	b.n	80012e8 <HAL_I2C_Init+0x1dc>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1e58      	subs	r0, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6859      	ldr	r1, [r3, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	0099      	lsls	r1, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	fbb0 f3f3 	udiv	r3, r0, r3
 80012de:	3301      	adds	r3, #1
 80012e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	6809      	ldr	r1, [r1, #0]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69da      	ldr	r2, [r3, #28]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001316:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6911      	ldr	r1, [r2, #16]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68d2      	ldr	r2, [r2, #12]
 8001322:	4311      	orrs	r1, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	430b      	orrs	r3, r1
 800132a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0201 	orr.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2220      	movs	r2, #32
 8001362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	000186a0 	.word	0x000186a0
 8001384:	001e847f 	.word	0x001e847f
 8001388:	003d08ff 	.word	0x003d08ff
 800138c:	431bde83 	.word	0x431bde83
 8001390:	10624dd3 	.word	0x10624dd3

08001394 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001396:	b08b      	sub	sp, #44	; 0x2c
 8001398:	af06      	add	r7, sp, #24
 800139a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e0f1      	b.n	800158a <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f007 f818 	bl	80083f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2203      	movs	r2, #3
 80013c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 ff37 	bl	8004240 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	687e      	ldr	r6, [r7, #4]
 80013da:	466d      	mov	r5, sp
 80013dc:	f106 0410 	add.w	r4, r6, #16
 80013e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e4:	6823      	ldr	r3, [r4, #0]
 80013e6:	602b      	str	r3, [r5, #0]
 80013e8:	1d33      	adds	r3, r6, #4
 80013ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ec:	6838      	ldr	r0, [r7, #0]
 80013ee:	f002 ff01 	bl	80041f4 <USB_CoreInit>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2202      	movs	r2, #2
 80013fc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0c2      	b.n	800158a <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f002 ff32 	bl	8004274 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	e040      	b.n	8001498 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	440b      	add	r3, r1
 8001426:	3301      	adds	r3, #1
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	440b      	add	r3, r1
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	3303      	adds	r3, #3
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	3338      	adds	r3, #56	; 0x38
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	333c      	adds	r3, #60	; 0x3c
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	3340      	adds	r3, #64	; 0x40
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	3301      	adds	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d3b9      	bcc.n	8001416 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e044      	b.n	8001532 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	440b      	add	r3, r1
 80014b6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014be:	7bfa      	ldrb	r2, [r7, #15]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	440b      	add	r3, r1
 80014cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	440b      	add	r3, r1
 80014e2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	440b      	add	r3, r1
 800150e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001516:	7bfa      	ldrb	r2, [r7, #15]
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	440b      	add	r3, r1
 8001524:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	3301      	adds	r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	429a      	cmp	r2, r3
 800153a:	d3b5      	bcc.n	80014a8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	687e      	ldr	r6, [r7, #4]
 8001544:	466d      	mov	r5, sp
 8001546:	f106 0410 	add.w	r4, r6, #16
 800154a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	602b      	str	r3, [r5, #0]
 8001552:	1d33      	adds	r3, r6, #4
 8001554:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001556:	6838      	ldr	r0, [r7, #0]
 8001558:	f002 fe98 	bl	800428c <USB_DevInit>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2202      	movs	r2, #2
 8001566:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e00d      	b.n	800158a <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f005 f919 	bl	80067ba <USB_DevDisconnect>

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001592 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <HAL_PCD_Start+0x16>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e016      	b.n	80015d6 <HAL_PCD_Start+0x44>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f002 fe2d 	bl	8004214 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80015ba:	2101      	movs	r1, #1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f007 f98a 	bl	80088d6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f005 f8ed 	bl	80067a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b088      	sub	sp, #32
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f005 f8ef 	bl	80067ce <USB_ReadInterrupts>
 80015f0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fb1b 	bl	8001c38 <PCD_EP_ISR_Handler>

    return;
 8001602:	e119      	b.n	8001838 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160a:	2b00      	cmp	r3, #0
 800160c:	d013      	beq.n	8001636 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001616:	b29a      	uxth	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001620:	b292      	uxth	r2, r2
 8001622:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f006 ff5d 	bl	80084e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800162c:	2100      	movs	r1, #0
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f905 	bl	800183e <HAL_PCD_SetAddress>

    return;
 8001634:	e100      	b.n	8001838 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00c      	beq.n	800165a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001648:	b29a      	uxth	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001652:	b292      	uxth	r2, r2
 8001654:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001658:	e0ee      	b.n	8001838 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00c      	beq.n	800167e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800166c:	b29a      	uxth	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001676:	b292      	uxth	r2, r2
 8001678:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800167c:	e0dc      	b.n	8001838 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d027      	beq.n	80016d8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001690:	b29a      	uxth	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0204 	bic.w	r2, r2, #4
 800169a:	b292      	uxth	r2, r2
 800169c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0208 	bic.w	r2, r2, #8
 80016b2:	b292      	uxth	r2, r2
 80016b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f006 ff4d 	bl	8008558 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016d0:	b292      	uxth	r2, r2
 80016d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80016d6:	e0af      	b.n	8001838 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8083 	beq.w	80017ea <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	77fb      	strb	r3, [r7, #31]
 80016e8:	e010      	b.n	800170c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	7ffb      	ldrb	r3, [r7, #31]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	441a      	add	r2, r3
 80016f6:	7ffb      	ldrb	r3, [r7, #31]
 80016f8:	8812      	ldrh	r2, [r2, #0]
 80016fa:	b292      	uxth	r2, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	3320      	adds	r3, #32
 8001700:	443b      	add	r3, r7
 8001702:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001706:	7ffb      	ldrb	r3, [r7, #31]
 8001708:	3301      	adds	r3, #1
 800170a:	77fb      	strb	r3, [r7, #31]
 800170c:	7ffb      	ldrb	r3, [r7, #31]
 800170e:	2b07      	cmp	r3, #7
 8001710:	d9eb      	bls.n	80016ea <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800171a:	b29a      	uxth	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0201 	orr.w	r2, r2, #1
 8001724:	b292      	uxth	r2, r2
 8001726:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001732:	b29a      	uxth	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0201 	bic.w	r2, r2, #1
 800173c:	b292      	uxth	r2, r2
 800173e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001742:	bf00      	nop
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800174c:	b29b      	uxth	r3, r3
 800174e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f6      	beq.n	8001744 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800175e:	b29a      	uxth	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001768:	b292      	uxth	r2, r2
 800176a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800176e:	2300      	movs	r3, #0
 8001770:	77fb      	strb	r3, [r7, #31]
 8001772:	e00f      	b.n	8001794 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001774:	7ffb      	ldrb	r3, [r7, #31]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	4611      	mov	r1, r2
 800177c:	7ffa      	ldrb	r2, [r7, #31]
 800177e:	0092      	lsls	r2, r2, #2
 8001780:	440a      	add	r2, r1
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	3320      	adds	r3, #32
 8001786:	443b      	add	r3, r7
 8001788:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800178c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800178e:	7ffb      	ldrb	r3, [r7, #31]
 8001790:	3301      	adds	r3, #1
 8001792:	77fb      	strb	r3, [r7, #31]
 8001794:	7ffb      	ldrb	r3, [r7, #31]
 8001796:	2b07      	cmp	r3, #7
 8001798:	d9ec      	bls.n	8001774 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0208 	orr.w	r2, r2, #8
 80017ac:	b292      	uxth	r2, r2
 80017ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c4:	b292      	uxth	r2, r2
 80017c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f042 0204 	orr.w	r2, r2, #4
 80017dc:	b292      	uxth	r2, r2
 80017de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f006 fe9e 	bl	8008524 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80017e8:	e026      	b.n	8001838 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00f      	beq.n	8001814 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001806:	b292      	uxth	r2, r2
 8001808:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f006 fe5c 	bl	80084ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001812:	e011      	b.n	8001838 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00c      	beq.n	8001838 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001826:	b29a      	uxth	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001830:	b292      	uxth	r2, r2
 8001832:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001836:	bf00      	nop
  }
}
 8001838:	3720      	adds	r7, #32
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_PCD_SetAddress+0x1a>
 8001854:	2302      	movs	r3, #2
 8001856:	e013      	b.n	8001880 <HAL_PCD_SetAddress+0x42>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f004 ff85 	bl	8006780 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	4608      	mov	r0, r1
 8001892:	4611      	mov	r1, r2
 8001894:	461a      	mov	r2, r3
 8001896:	4603      	mov	r3, r0
 8001898:	70fb      	strb	r3, [r7, #3]
 800189a:	460b      	mov	r3, r1
 800189c:	803b      	strh	r3, [r7, #0]
 800189e:	4613      	mov	r3, r2
 80018a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	da0e      	bge.n	80018cc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	705a      	strb	r2, [r3, #1]
 80018ca:	e00e      	b.n	80018ea <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	f003 0207 	and.w	r2, r3, #7
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018f6:	883a      	ldrh	r2, [r7, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	78ba      	ldrb	r2, [r7, #2]
 8001900:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001902:	78bb      	ldrb	r3, [r7, #2]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d102      	bne.n	800190e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_PCD_EP_Open+0x94>
 8001918:	2302      	movs	r3, #2
 800191a:	e00e      	b.n	800193a <HAL_PCD_EP_Open+0xb2>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68f9      	ldr	r1, [r7, #12]
 800192a:	4618      	mov	r0, r3
 800192c:	f002 fcce 	bl	80042cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001938:	7afb      	ldrb	r3, [r7, #11]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	460b      	mov	r3, r1
 800194c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800194e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001952:	2b00      	cmp	r3, #0
 8001954:	da0e      	bge.n	8001974 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2201      	movs	r2, #1
 8001970:	705a      	strb	r2, [r3, #1]
 8001972:	e00e      	b.n	8001992 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	f003 0207 	and.w	r2, r3, #7
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	b2da      	uxtb	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_PCD_EP_Close+0x6a>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e00e      	b.n	80019ca <HAL_PCD_EP_Close+0x88>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68f9      	ldr	r1, [r7, #12]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 f846 	bl	8004a4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	460b      	mov	r3, r1
 80019e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019e2:	7afb      	ldrb	r3, [r7, #11]
 80019e4:	f003 0207 	and.w	r2, r3, #7
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a12:	7afb      	ldrb	r3, [r7, #11]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6979      	ldr	r1, [r7, #20]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 f9fd 	bl	8004e24 <USB_EPStartXfer>

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	f003 0207 	and.w	r2, r3, #7
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a72:	7afb      	ldrb	r3, [r7, #11]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4413      	add	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aae:	7afb      	ldrb	r3, [r7, #11]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6979      	ldr	r1, [r7, #20]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f003 f9af 	bl	8004e24 <USB_EPStartXfer>

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	f003 0207 	and.w	r2, r3, #7
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d901      	bls.n	8001aee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e04c      	b.n	8001b88 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	da0e      	bge.n	8001b14 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	705a      	strb	r2, [r3, #1]
 8001b12:	e00c      	b.n	8001b2e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b14:	78fa      	ldrb	r2, [r7, #3]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2201      	movs	r2, #1
 8001b32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_PCD_EP_SetStall+0x7e>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e01c      	b.n	8001b88 <HAL_PCD_EP_SetStall+0xb8>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68f9      	ldr	r1, [r7, #12]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f004 fd12 	bl	8006586 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d108      	bne.n	8001b7e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001b76:	4619      	mov	r1, r3
 8001b78:	4610      	mov	r0, r2
 8001b7a:	f004 fe37 	bl	80067ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	f003 020f 	and.w	r2, r3, #15
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d901      	bls.n	8001bae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e040      	b.n	8001c30 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	da0e      	bge.n	8001bd4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	705a      	strb	r2, [r3, #1]
 8001bd2:	e00e      	b.n	8001bf2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	f003 0207 	and.w	r2, r3, #7
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_PCD_EP_ClrStall+0x82>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e00e      	b.n	8001c30 <HAL_PCD_EP_ClrStall+0xa0>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68f9      	ldr	r1, [r7, #12]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f004 fd00 	bl	8006626 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b096      	sub	sp, #88	; 0x58
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c40:	e3bf      	b.n	80023c2 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c4a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001c5c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f040 8179 	bne.w	8001f58 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d152      	bne.n	8001d18 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c82:	81fb      	strh	r3, [r7, #14]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	89fb      	ldrh	r3, [r7, #14]
 8001c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3328      	adds	r3, #40	; 0x28
 8001c9a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	441a      	add	r2, r3
 8001cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f006 fbdc 	bl	8008496 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 836b 	beq.w	80023c2 <PCD_EP_ISR_Handler+0x78a>
 8001cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f040 8366 	bne.w	80023c2 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	b292      	uxth	r2, r2
 8001d0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d16:	e354      	b.n	80023c2 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d1e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d034      	beq.n	8001da0 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	3306      	adds	r3, #6
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d60:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d72:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	f004 fd89 	bl	800688c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d86:	4013      	ands	r3, r2
 8001d88:	823b      	strh	r3, [r7, #16]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	8a3a      	ldrh	r2, [r7, #16]
 8001d90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d94:	b292      	uxth	r2, r2
 8001d96:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f006 fb4f 	bl	800843c <HAL_PCD_SetupStageCallback>
 8001d9e:	e310      	b.n	80023c2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001da0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f280 830c 	bge.w	80023c2 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001db6:	4013      	ands	r3, r2
 8001db8:	83fb      	strh	r3, [r7, #30]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	8bfa      	ldrh	r2, [r7, #30]
 8001dc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dc4:	b292      	uxth	r2, r2
 8001dc6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	3306      	adds	r3, #6
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d019      	beq.n	8001e30 <PCD_EP_ISR_Handler+0x1f8>
 8001dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d015      	beq.n	8001e30 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0a:	6959      	ldr	r1, [r3, #20]
 8001e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e12:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	f004 fd39 	bl	800688c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	441a      	add	r2, r3
 8001e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e26:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e28:	2100      	movs	r1, #0
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f006 fb18 	bl	8008460 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001e3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 82bd 	bne.w	80023c2 <PCD_EP_ISR_Handler+0x78a>
 8001e48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e4c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001e50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001e54:	f000 82b5 	beq.w	80023c2 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	801a      	strh	r2, [r3, #0]
 8001e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	2b3e      	cmp	r3, #62	; 0x3e
 8001e8e:	d91d      	bls.n	8001ecc <PCD_EP_ISR_Handler+0x294>
 8001e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	095b      	lsrs	r3, r3, #5
 8001e96:	647b      	str	r3, [r7, #68]	; 0x44
 8001e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <PCD_EP_ISR_Handler+0x272>
 8001ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	647b      	str	r3, [r7, #68]	; 0x44
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	029b      	lsls	r3, r3, #10
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	801a      	strh	r2, [r3, #0]
 8001eca:	e026      	b.n	8001f1a <PCD_EP_ISR_Handler+0x2e2>
 8001ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10a      	bne.n	8001eea <PCD_EP_ISR_Handler+0x2b2>
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	801a      	strh	r2, [r3, #0]
 8001ee8:	e017      	b.n	8001f1a <PCD_EP_ISR_Handler+0x2e2>
 8001eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	085b      	lsrs	r3, r3, #1
 8001ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <PCD_EP_ISR_Handler+0x2cc>
 8001efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f00:	3301      	adds	r3, #1
 8001f02:	647b      	str	r3, [r7, #68]	; 0x44
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	029b      	lsls	r3, r3, #10
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	4313      	orrs	r3, r2
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2a:	827b      	strh	r3, [r7, #18]
 8001f2c:	8a7b      	ldrh	r3, [r7, #18]
 8001f2e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f32:	827b      	strh	r3, [r7, #18]
 8001f34:	8a7b      	ldrh	r3, [r7, #18]
 8001f36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f3a:	827b      	strh	r3, [r7, #18]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	8a7b      	ldrh	r3, [r7, #18]
 8001f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	8013      	strh	r3, [r2, #0]
 8001f56:	e234      	b.n	80023c2 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f6c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f280 80fc 	bge.w	800216e <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001fa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fa8:	b292      	uxth	r2, r2
 8001faa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001fac:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc4:	7b1b      	ldrb	r3, [r3, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d125      	bne.n	8002016 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	3306      	adds	r3, #6
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001ff6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8092 	beq.w	8002124 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002006:	6959      	ldr	r1, [r3, #20]
 8002008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200a:	88da      	ldrh	r2, [r3, #6]
 800200c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002010:	f004 fc3c 	bl	800688c <USB_ReadPMA>
 8002014:	e086      	b.n	8002124 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002018:	78db      	ldrb	r3, [r3, #3]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d10a      	bne.n	8002034 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800201e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002022:	461a      	mov	r2, r3
 8002024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f9d9 	bl	80023de <HAL_PCD_EP_DB_Receive>
 800202c:	4603      	mov	r3, r0
 800202e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002032:	e077      	b.n	8002124 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	b29b      	uxth	r3, r3
 8002046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800204a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	441a      	add	r2, r3
 8002060:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800206c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002070:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002074:	b29b      	uxth	r3, r3
 8002076:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d024      	beq.n	80020dc <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800209a:	b29b      	uxth	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	3302      	adds	r3, #2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80020be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d02e      	beq.n	8002124 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020cc:	6959      	ldr	r1, [r3, #20]
 80020ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d0:	891a      	ldrh	r2, [r3, #8]
 80020d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80020d6:	f004 fbd9 	bl	800688c <USB_ReadPMA>
 80020da:	e023      	b.n	8002124 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	3306      	adds	r3, #6
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002104:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002108:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800210c:	2b00      	cmp	r3, #0
 800210e:	d009      	beq.n	8002124 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002116:	6959      	ldr	r1, [r3, #20]
 8002118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800211a:	895a      	ldrh	r2, [r3, #10]
 800211c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002120:	f004 fbb4 	bl	800688c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002126:	69da      	ldr	r2, [r3, #28]
 8002128:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800212c:	441a      	add	r2, r3
 800212e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002130:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800213a:	441a      	add	r2, r3
 800213c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800213e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <PCD_EP_ISR_Handler+0x51c>
 8002148:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800214c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	429a      	cmp	r2, r3
 8002152:	d206      	bcs.n	8002162 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f006 f980 	bl	8008460 <HAL_PCD_DataOutStageCallback>
 8002160:	e005      	b.n	800216e <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002168:	4618      	mov	r0, r3
 800216a:	f002 fe5b 	bl	8004e24 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800216e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8123 	beq.w	80023c2 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800217c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	441a      	add	r2, r3
 80021bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80021c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80021cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ce:	78db      	ldrb	r3, [r3, #3]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	f040 80a2 	bne.w	800231a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80021d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80021dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021de:	7b1b      	ldrb	r3, [r3, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 8093 	beq.w	800230c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d046      	beq.n	8002280 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f4:	785b      	ldrb	r3, [r3, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d126      	bne.n	8002248 <PCD_EP_ISR_Handler+0x610>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002208:	b29b      	uxth	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	4413      	add	r3, r2
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	011a      	lsls	r2, r3, #4
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	4413      	add	r3, r2
 800221c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002220:	623b      	str	r3, [r7, #32]
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800222c:	b29a      	uxth	r2, r3
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	801a      	strh	r2, [r3, #0]
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	b29b      	uxth	r3, r3
 8002238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800223c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002240:	b29a      	uxth	r2, r3
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	801a      	strh	r2, [r3, #0]
 8002246:	e061      	b.n	800230c <PCD_EP_ISR_Handler+0x6d4>
 8002248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800224a:	785b      	ldrb	r3, [r3, #1]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d15d      	bne.n	800230c <PCD_EP_ISR_Handler+0x6d4>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	4413      	add	r3, r2
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	011a      	lsls	r2, r3, #4
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	4413      	add	r3, r2
 8002272:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
 8002278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227a:	2200      	movs	r2, #0
 800227c:	801a      	strh	r2, [r3, #0]
 800227e:	e045      	b.n	800230c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002288:	785b      	ldrb	r3, [r3, #1]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d126      	bne.n	80022dc <PCD_EP_ISR_Handler+0x6a4>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800229c:	b29b      	uxth	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a2:	4413      	add	r3, r2
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
 80022a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	011a      	lsls	r2, r3, #4
 80022ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ae:	4413      	add	r3, r2
 80022b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022b4:	633b      	str	r3, [r7, #48]	; 0x30
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c4:	801a      	strh	r2, [r3, #0]
 80022c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	801a      	strh	r2, [r3, #0]
 80022da:	e017      	b.n	800230c <PCD_EP_ISR_Handler+0x6d4>
 80022dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022de:	785b      	ldrb	r3, [r3, #1]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d113      	bne.n	800230c <PCD_EP_ISR_Handler+0x6d4>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f2:	4413      	add	r3, r2
 80022f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	011a      	lsls	r2, r3, #4
 80022fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fe:	4413      	add	r3, r2
 8002300:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002304:	63bb      	str	r3, [r7, #56]	; 0x38
 8002306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002308:	2200      	movs	r2, #0
 800230a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800230c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f006 f8bf 	bl	8008496 <HAL_PCD_DataInStageCallback>
 8002318:	e053      	b.n	80023c2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800231a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d146      	bne.n	80023b4 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	3302      	adds	r3, #2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	4413      	add	r3, r2
 8002344:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800234e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800235a:	429a      	cmp	r2, r3
 800235c:	d907      	bls.n	800236e <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800235e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002366:	1ad2      	subs	r2, r2, r3
 8002368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800236a:	619a      	str	r2, [r3, #24]
 800236c:	e002      	b.n	8002374 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800236e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d106      	bne.n	800238a <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800237c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4619      	mov	r1, r3
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f006 f887 	bl	8008496 <HAL_PCD_DataInStageCallback>
 8002388:	e01b      	b.n	80023c2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800238a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002392:	441a      	add	r2, r3
 8002394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002396:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800239a:	69da      	ldr	r2, [r3, #28]
 800239c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023a0:	441a      	add	r2, r3
 80023a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023ac:	4618      	mov	r0, r3
 80023ae:	f002 fd39 	bl	8004e24 <USB_EPStartXfer>
 80023b2:	e006      	b.n	80023c2 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80023b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023b8:	461a      	mov	r2, r3
 80023ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f91b 	bl	80025f8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f6ff ac37 	blt.w	8001c42 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3758      	adds	r7, #88	; 0x58
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b088      	sub	sp, #32
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	4613      	mov	r3, r2
 80023ea:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d07e      	beq.n	80024f4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023fe:	b29b      	uxth	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	3302      	adds	r3, #2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	4413      	add	r3, r2
 8002414:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800241e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	8b7b      	ldrh	r3, [r7, #26]
 8002426:	429a      	cmp	r2, r3
 8002428:	d306      	bcc.n	8002438 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	8b7b      	ldrh	r3, [r7, #26]
 8002430:	1ad2      	subs	r2, r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	619a      	str	r2, [r3, #24]
 8002436:	e002      	b.n	800243e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2200      	movs	r2, #0
 800243c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d123      	bne.n	800248e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800245c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002460:	833b      	strh	r3, [r7, #24]
 8002462:	8b3b      	ldrh	r3, [r7, #24]
 8002464:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002468:	833b      	strh	r3, [r7, #24]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	441a      	add	r2, r3
 8002478:	8b3b      	ldrh	r3, [r7, #24]
 800247a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800247e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248a:	b29b      	uxth	r3, r3
 800248c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01f      	beq.n	80024d8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b2:	82fb      	strh	r3, [r7, #22]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	441a      	add	r2, r3
 80024c2:	8afb      	ldrh	r3, [r7, #22]
 80024c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024d8:	8b7b      	ldrh	r3, [r7, #26]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8087 	beq.w	80025ee <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6959      	ldr	r1, [r3, #20]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	891a      	ldrh	r2, [r3, #8]
 80024ec:	8b7b      	ldrh	r3, [r7, #26]
 80024ee:	f004 f9cd 	bl	800688c <USB_ReadPMA>
 80024f2:	e07c      	b.n	80025ee <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	3306      	adds	r3, #6
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	4413      	add	r3, r2
 8002512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800251c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	8b7b      	ldrh	r3, [r7, #26]
 8002524:	429a      	cmp	r2, r3
 8002526:	d306      	bcc.n	8002536 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	699a      	ldr	r2, [r3, #24]
 800252c:	8b7b      	ldrh	r3, [r7, #26]
 800252e:	1ad2      	subs	r2, r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	619a      	str	r2, [r3, #24]
 8002534:	e002      	b.n	800253c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2200      	movs	r2, #0
 800253a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d123      	bne.n	800258c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800255a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255e:	83fb      	strh	r3, [r7, #30]
 8002560:	8bfb      	ldrh	r3, [r7, #30]
 8002562:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002566:	83fb      	strh	r3, [r7, #30]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	441a      	add	r2, r3
 8002576:	8bfb      	ldrh	r3, [r7, #30]
 8002578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800257c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002588:	b29b      	uxth	r3, r3
 800258a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d11f      	bne.n	80025d6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b0:	83bb      	strh	r3, [r7, #28]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	441a      	add	r2, r3
 80025c0:	8bbb      	ldrh	r3, [r7, #28]
 80025c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025d6:	8b7b      	ldrh	r3, [r7, #26]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	6959      	ldr	r1, [r3, #20]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	895a      	ldrh	r2, [r3, #10]
 80025e8:	8b7b      	ldrh	r3, [r7, #26]
 80025ea:	f004 f94f 	bl	800688c <USB_ReadPMA>
    }
  }

  return count;
 80025ee:	8b7b      	ldrh	r3, [r7, #26]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3720      	adds	r7, #32
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b0a4      	sub	sp, #144	; 0x90
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	4613      	mov	r3, r2
 8002604:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 81dd 	beq.w	80029cc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261a:	b29b      	uxth	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	3302      	adds	r3, #2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	4413      	add	r3, r2
 8002630:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800263a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002646:	429a      	cmp	r2, r3
 8002648:	d907      	bls.n	800265a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002652:	1ad2      	subs	r2, r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	619a      	str	r2, [r3, #24]
 8002658:	e002      	b.n	8002660 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	f040 80b9 	bne.w	80027dc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	785b      	ldrb	r3, [r3, #1]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d126      	bne.n	80026c0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002680:	b29b      	uxth	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002686:	4413      	add	r3, r2
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	011a      	lsls	r2, r3, #4
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	4413      	add	r3, r2
 8002694:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a8:	801a      	strh	r2, [r3, #0]
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	801a      	strh	r2, [r3, #0]
 80026be:	e01a      	b.n	80026f6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	785b      	ldrb	r3, [r3, #1]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d116      	bne.n	80026f6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026dc:	4413      	add	r3, r2
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	011a      	lsls	r2, r3, #4
 80026e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e8:	4413      	add	r3, r2
 80026ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
 80026f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f2:	2200      	movs	r2, #0
 80026f4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	785b      	ldrb	r3, [r3, #1]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d126      	bne.n	8002752 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002712:	b29b      	uxth	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	4413      	add	r3, r2
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	011a      	lsls	r2, r3, #4
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	4413      	add	r3, r2
 8002726:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	b29b      	uxth	r3, r3
 8002732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002736:	b29a      	uxth	r2, r3
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	801a      	strh	r2, [r3, #0]
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800274a:	b29a      	uxth	r2, r3
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	801a      	strh	r2, [r3, #0]
 8002750:	e017      	b.n	8002782 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	785b      	ldrb	r3, [r3, #1]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d113      	bne.n	8002782 <HAL_PCD_EP_DB_Transmit+0x18a>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002762:	b29b      	uxth	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	4413      	add	r3, r2
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	011a      	lsls	r2, r3, #4
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	4413      	add	r3, r2
 8002776:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800277a:	623b      	str	r3, [r7, #32]
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	2200      	movs	r2, #0
 8002780:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	4619      	mov	r1, r3
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f005 fe84 	bl	8008496 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 82fc 	beq.w	8002d92 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b4:	82fb      	strh	r3, [r7, #22]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	441a      	add	r2, r3
 80027c4:	8afb      	ldrh	r3, [r7, #22]
 80027c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	8013      	strh	r3, [r2, #0]
 80027da:	e2da      	b.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d021      	beq.n	800282a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002800:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	441a      	add	r2, r3
 8002812:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800281a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800281e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002826:	b29b      	uxth	r3, r3
 8002828:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002830:	2b01      	cmp	r3, #1
 8002832:	f040 82ae 	bne.w	8002d92 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800283e:	441a      	add	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800284c:	441a      	add	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	6a1a      	ldr	r2, [r3, #32]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	429a      	cmp	r2, r3
 800285c:	d30b      	bcc.n	8002876 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	6a1a      	ldr	r2, [r3, #32]
 800286a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800286e:	1ad2      	subs	r2, r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	621a      	str	r2, [r3, #32]
 8002874:	e017      	b.n	80028a6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d108      	bne.n	8002890 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800287e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800288e:	e00a      	b.n	80028a6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2200      	movs	r2, #0
 80028a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	785b      	ldrb	r3, [r3, #1]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d165      	bne.n	800297a <HAL_PCD_EP_DB_Transmit+0x382>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028bc:	b29b      	uxth	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c2:	4413      	add	r3, r2
 80028c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	011a      	lsls	r2, r3, #4
 80028cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ce:	4413      	add	r3, r2
 80028d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e4:	801a      	strh	r2, [r3, #0]
 80028e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ea:	2b3e      	cmp	r3, #62	; 0x3e
 80028ec:	d91d      	bls.n	800292a <HAL_PCD_EP_DB_Transmit+0x332>
 80028ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80028f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d102      	bne.n	8002908 <HAL_PCD_EP_DB_Transmit+0x310>
 8002902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002904:	3b01      	subs	r3, #1
 8002906:	64bb      	str	r3, [r7, #72]	; 0x48
 8002908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b29a      	uxth	r2, r3
 800290e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002910:	b29b      	uxth	r3, r3
 8002912:	029b      	lsls	r3, r3, #10
 8002914:	b29b      	uxth	r3, r3
 8002916:	4313      	orrs	r3, r2
 8002918:	b29b      	uxth	r3, r3
 800291a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800291e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002922:	b29a      	uxth	r2, r3
 8002924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002926:	801a      	strh	r2, [r3, #0]
 8002928:	e044      	b.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800292a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10a      	bne.n	8002948 <HAL_PCD_EP_DB_Transmit+0x350>
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800293c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002940:	b29a      	uxth	r2, r3
 8002942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002944:	801a      	strh	r2, [r3, #0]
 8002946:	e035      	b.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002950:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_PCD_EP_DB_Transmit+0x36a>
 800295c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800295e:	3301      	adds	r3, #1
 8002960:	64bb      	str	r3, [r7, #72]	; 0x48
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29a      	uxth	r2, r3
 8002968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800296a:	b29b      	uxth	r3, r3
 800296c:	029b      	lsls	r3, r3, #10
 800296e:	b29b      	uxth	r3, r3
 8002970:	4313      	orrs	r3, r2
 8002972:	b29a      	uxth	r2, r3
 8002974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002976:	801a      	strh	r2, [r3, #0]
 8002978:	e01c      	b.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	785b      	ldrb	r3, [r3, #1]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d118      	bne.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	647b      	str	r3, [r7, #68]	; 0x44
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002990:	b29b      	uxth	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002996:	4413      	add	r3, r2
 8002998:	647b      	str	r3, [r7, #68]	; 0x44
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	011a      	lsls	r2, r3, #4
 80029a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029a2:	4413      	add	r3, r2
 80029a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029a8:	643b      	str	r3, [r7, #64]	; 0x40
 80029aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	6959      	ldr	r1, [r3, #20]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	891a      	ldrh	r2, [r3, #8]
 80029c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f003 ff1c 	bl	8006802 <USB_WritePMA>
 80029ca:	e1e2      	b.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	3306      	adds	r3, #6
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	699a      	ldr	r2, [r3, #24]
 80029fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d307      	bcc.n	8002a14 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	699a      	ldr	r2, [r3, #24]
 8002a08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a0c:	1ad2      	subs	r2, r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	619a      	str	r2, [r3, #24]
 8002a12:	e002      	b.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2200      	movs	r2, #0
 8002a18:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f040 80c0 	bne.w	8002ba4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	785b      	ldrb	r3, [r3, #1]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d126      	bne.n	8002a7a <HAL_PCD_EP_DB_Transmit+0x482>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a40:	4413      	add	r3, r2
 8002a42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	011a      	lsls	r2, r3, #4
 8002a4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a52:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a62:	801a      	strh	r2, [r3, #0]
 8002a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	e01a      	b.n	8002ab0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	785b      	ldrb	r3, [r3, #1]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d116      	bne.n	8002ab0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	667b      	str	r3, [r7, #100]	; 0x64
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a96:	4413      	add	r3, r2
 8002a98:	667b      	str	r3, [r7, #100]	; 0x64
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	011a      	lsls	r2, r3, #4
 8002aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002aa8:	663b      	str	r3, [r7, #96]	; 0x60
 8002aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aac:	2200      	movs	r2, #0
 8002aae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	677b      	str	r3, [r7, #116]	; 0x74
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	785b      	ldrb	r3, [r3, #1]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d12b      	bne.n	8002b16 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad2:	4413      	add	r3, r2
 8002ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	011a      	lsls	r2, r3, #4
 8002adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ade:	4413      	add	r3, r2
 8002ae0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002afa:	801a      	strh	r2, [r3, #0]
 8002afc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b12:	801a      	strh	r2, [r3, #0]
 8002b14:	e017      	b.n	8002b46 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	785b      	ldrb	r3, [r3, #1]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d113      	bne.n	8002b46 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2c:	4413      	add	r3, r2
 8002b2e:	677b      	str	r3, [r7, #116]	; 0x74
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	011a      	lsls	r2, r3, #4
 8002b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b38:	4413      	add	r3, r2
 8002b3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b3e:	673b      	str	r3, [r7, #112]	; 0x70
 8002b40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b42:	2200      	movs	r2, #0
 8002b44:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f005 fca2 	bl	8008496 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f040 811a 	bne.w	8002d92 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b78:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	441a      	add	r2, r3
 8002b8a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	8013      	strh	r3, [r2, #0]
 8002ba2:	e0f6      	b.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d121      	bne.n	8002bf2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	441a      	add	r2, r3
 8002bda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002be6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	f040 80ca 	bne.w	8002d92 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c06:	441a      	add	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	69da      	ldr	r2, [r3, #28]
 8002c10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c14:	441a      	add	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	6a1a      	ldr	r2, [r3, #32]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d30b      	bcc.n	8002c3e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	6a1a      	ldr	r2, [r3, #32]
 8002c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c36:	1ad2      	subs	r2, r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	621a      	str	r2, [r3, #32]
 8002c3c:	e017      	b.n	8002c6e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d108      	bne.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002c46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c56:	e00a      	b.n	8002c6e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2200      	movs	r2, #0
 8002c64:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	657b      	str	r3, [r7, #84]	; 0x54
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	785b      	ldrb	r3, [r3, #1]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d165      	bne.n	8002d48 <HAL_PCD_EP_DB_Transmit+0x750>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c90:	4413      	add	r3, r2
 8002c92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	011a      	lsls	r2, r3, #4
 8002c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ca2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb2:	801a      	strh	r2, [r3, #0]
 8002cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cb8:	2b3e      	cmp	r3, #62	; 0x3e
 8002cba:	d91d      	bls.n	8002cf8 <HAL_PCD_EP_DB_Transmit+0x700>
 8002cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002cd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	029b      	lsls	r3, r3, #10
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf4:	801a      	strh	r2, [r3, #0]
 8002cf6:	e041      	b.n	8002d7c <HAL_PCD_EP_DB_Transmit+0x784>
 8002cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10a      	bne.n	8002d16 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002d00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d12:	801a      	strh	r2, [r3, #0]
 8002d14:	e032      	b.n	8002d7c <HAL_PCD_EP_DB_Transmit+0x784>
 8002d16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d1a:	085b      	lsrs	r3, r3, #1
 8002d1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_PCD_EP_DB_Transmit+0x738>
 8002d2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	029b      	lsls	r3, r3, #10
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	e019      	b.n	8002d7c <HAL_PCD_EP_DB_Transmit+0x784>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d115      	bne.n	8002d7c <HAL_PCD_EP_DB_Transmit+0x784>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5e:	4413      	add	r3, r2
 8002d60:	657b      	str	r3, [r7, #84]	; 0x54
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	011a      	lsls	r2, r3, #4
 8002d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d70:	653b      	str	r3, [r7, #80]	; 0x50
 8002d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d7a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	6959      	ldr	r1, [r3, #20]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	895a      	ldrh	r2, [r3, #10]
 8002d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	f003 fd38 	bl	8006802 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dac:	82bb      	strh	r3, [r7, #20]
 8002dae:	8abb      	ldrh	r3, [r7, #20]
 8002db0:	f083 0310 	eor.w	r3, r3, #16
 8002db4:	82bb      	strh	r3, [r7, #20]
 8002db6:	8abb      	ldrh	r3, [r7, #20]
 8002db8:	f083 0320 	eor.w	r3, r3, #32
 8002dbc:	82bb      	strh	r3, [r7, #20]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	441a      	add	r2, r3
 8002dcc:	8abb      	ldrh	r3, [r7, #20]
 8002dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3790      	adds	r7, #144	; 0x90
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	817b      	strh	r3, [r7, #10]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002dfe:	897b      	ldrh	r3, [r7, #10]
 8002e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e0a:	897b      	ldrh	r3, [r7, #10]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	e009      	b.n	8002e36 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e22:	897a      	ldrh	r2, [r7, #10]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e36:	893b      	ldrh	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	80da      	strh	r2, [r3, #6]
 8002e4a:	e00b      	b.n	8002e64 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	0c1b      	lsrs	r3, r3, #16
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e272      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 8087 	beq.w	8002f9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e90:	4b92      	ldr	r3, [pc, #584]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d00c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e9c:	4b8f      	ldr	r3, [pc, #572]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d112      	bne.n	8002ece <HAL_RCC_OscConfig+0x5e>
 8002ea8:	4b8c      	ldr	r3, [pc, #560]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d10b      	bne.n	8002ece <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb6:	4b89      	ldr	r3, [pc, #548]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d06c      	beq.n	8002f9c <HAL_RCC_OscConfig+0x12c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d168      	bne.n	8002f9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e24c      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x76>
 8002ed8:	4b80      	ldr	r3, [pc, #512]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a7f      	ldr	r2, [pc, #508]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	e02e      	b.n	8002f44 <HAL_RCC_OscConfig+0xd4>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x98>
 8002eee:	4b7b      	ldr	r3, [pc, #492]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a7a      	ldr	r2, [pc, #488]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b78      	ldr	r3, [pc, #480]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a77      	ldr	r2, [pc, #476]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e01d      	b.n	8002f44 <HAL_RCC_OscConfig+0xd4>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0xbc>
 8002f12:	4b72      	ldr	r3, [pc, #456]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a71      	ldr	r2, [pc, #452]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b6f      	ldr	r3, [pc, #444]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a6e      	ldr	r2, [pc, #440]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCC_OscConfig+0xd4>
 8002f2c:	4b6b      	ldr	r3, [pc, #428]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a6a      	ldr	r2, [pc, #424]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b68      	ldr	r3, [pc, #416]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a67      	ldr	r2, [pc, #412]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fd fca6 	bl	800089c <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fd fca2 	bl	800089c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e200      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	4b5d      	ldr	r3, [pc, #372]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0xe4>
 8002f72:	e014      	b.n	8002f9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fd fc92 	bl	800089c <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7fd fc8e 	bl	800089c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e1ec      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	4b53      	ldr	r3, [pc, #332]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x10c>
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d063      	beq.n	8003072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002faa:	4b4c      	ldr	r3, [pc, #304]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00b      	beq.n	8002fce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fb6:	4b49      	ldr	r3, [pc, #292]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d11c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x18c>
 8002fc2:	4b46      	ldr	r3, [pc, #280]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d116      	bne.n	8002ffc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fce:	4b43      	ldr	r3, [pc, #268]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x176>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e1c0      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4939      	ldr	r1, [pc, #228]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffa:	e03a      	b.n	8003072 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d020      	beq.n	8003046 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003004:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <HAL_RCC_OscConfig+0x270>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7fd fc47 	bl	800089c <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003012:	f7fd fc43 	bl	800089c <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e1a1      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003030:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4927      	ldr	r1, [pc, #156]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003040:	4313      	orrs	r3, r2
 8003042:	600b      	str	r3, [r1, #0]
 8003044:	e015      	b.n	8003072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_RCC_OscConfig+0x270>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7fd fc26 	bl	800089c <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003054:	f7fd fc22 	bl	800089c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e180      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d03a      	beq.n	80030f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d019      	beq.n	80030ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_RCC_OscConfig+0x274>)
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308c:	f7fd fc06 	bl	800089c <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003094:	f7fd fc02 	bl	800089c <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e160      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030b2:	2001      	movs	r0, #1
 80030b4:	f000 faba 	bl	800362c <RCC_Delay>
 80030b8:	e01c      	b.n	80030f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_RCC_OscConfig+0x274>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7fd fbec 	bl	800089c <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c6:	e00f      	b.n	80030e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c8:	f7fd fbe8 	bl	800089c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d908      	bls.n	80030e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e146      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	42420000 	.word	0x42420000
 80030e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	4b92      	ldr	r3, [pc, #584]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1e9      	bne.n	80030c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a6 	beq.w	800324e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003106:	4b8b      	ldr	r3, [pc, #556]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10d      	bne.n	800312e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	4b88      	ldr	r3, [pc, #544]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	4a87      	ldr	r2, [pc, #540]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311c:	61d3      	str	r3, [r2, #28]
 800311e:	4b85      	ldr	r3, [pc, #532]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312a:	2301      	movs	r3, #1
 800312c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312e:	4b82      	ldr	r3, [pc, #520]	; (8003338 <HAL_RCC_OscConfig+0x4c8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d118      	bne.n	800316c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800313a:	4b7f      	ldr	r3, [pc, #508]	; (8003338 <HAL_RCC_OscConfig+0x4c8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a7e      	ldr	r2, [pc, #504]	; (8003338 <HAL_RCC_OscConfig+0x4c8>)
 8003140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003146:	f7fd fba9 	bl	800089c <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314e:	f7fd fba5 	bl	800089c <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b64      	cmp	r3, #100	; 0x64
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e103      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	4b75      	ldr	r3, [pc, #468]	; (8003338 <HAL_RCC_OscConfig+0x4c8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x312>
 8003174:	4b6f      	ldr	r3, [pc, #444]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	4a6e      	ldr	r2, [pc, #440]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6213      	str	r3, [r2, #32]
 8003180:	e02d      	b.n	80031de <HAL_RCC_OscConfig+0x36e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x334>
 800318a:	4b6a      	ldr	r3, [pc, #424]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4a69      	ldr	r2, [pc, #420]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	6213      	str	r3, [r2, #32]
 8003196:	4b67      	ldr	r3, [pc, #412]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	4a66      	ldr	r2, [pc, #408]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	f023 0304 	bic.w	r3, r3, #4
 80031a0:	6213      	str	r3, [r2, #32]
 80031a2:	e01c      	b.n	80031de <HAL_RCC_OscConfig+0x36e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	d10c      	bne.n	80031c6 <HAL_RCC_OscConfig+0x356>
 80031ac:	4b61      	ldr	r3, [pc, #388]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a60      	ldr	r2, [pc, #384]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	f043 0304 	orr.w	r3, r3, #4
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	4b5e      	ldr	r3, [pc, #376]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4a5d      	ldr	r2, [pc, #372]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6213      	str	r3, [r2, #32]
 80031c4:	e00b      	b.n	80031de <HAL_RCC_OscConfig+0x36e>
 80031c6:	4b5b      	ldr	r3, [pc, #364]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4a5a      	ldr	r2, [pc, #360]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	6213      	str	r3, [r2, #32]
 80031d2:	4b58      	ldr	r3, [pc, #352]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4a57      	ldr	r2, [pc, #348]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	f023 0304 	bic.w	r3, r3, #4
 80031dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d015      	beq.n	8003212 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e6:	f7fd fb59 	bl	800089c <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fd fb55 	bl	800089c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0b1      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	4b4b      	ldr	r3, [pc, #300]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ee      	beq.n	80031ee <HAL_RCC_OscConfig+0x37e>
 8003210:	e014      	b.n	800323c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003212:	f7fd fb43 	bl	800089c <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fd fb3f 	bl	800089c <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e09b      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	4b40      	ldr	r3, [pc, #256]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1ee      	bne.n	800321a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d105      	bne.n	800324e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003242:	4b3c      	ldr	r3, [pc, #240]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4a3b      	ldr	r2, [pc, #236]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8087 	beq.w	8003366 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003258:	4b36      	ldr	r3, [pc, #216]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b08      	cmp	r3, #8
 8003262:	d061      	beq.n	8003328 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d146      	bne.n	80032fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326c:	4b33      	ldr	r3, [pc, #204]	; (800333c <HAL_RCC_OscConfig+0x4cc>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7fd fb13 	bl	800089c <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327a:	f7fd fb0f 	bl	800089c <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e06d      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328c:	4b29      	ldr	r3, [pc, #164]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	d108      	bne.n	80032b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	4921      	ldr	r1, [pc, #132]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032b4:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a19      	ldr	r1, [r3, #32]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	430b      	orrs	r3, r1
 80032c6:	491b      	ldr	r1, [pc, #108]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032cc:	4b1b      	ldr	r3, [pc, #108]	; (800333c <HAL_RCC_OscConfig+0x4cc>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7fd fae3 	bl	800089c <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032da:	f7fd fadf 	bl	800089c <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e03d      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032ec:	4b11      	ldr	r3, [pc, #68]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x46a>
 80032f8:	e035      	b.n	8003366 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_RCC_OscConfig+0x4cc>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fd facc 	bl	800089c <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003308:	f7fd fac8 	bl	800089c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e026      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x498>
 8003326:	e01e      	b.n	8003366 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d107      	bne.n	8003340 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e019      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
 8003334:	40021000 	.word	0x40021000
 8003338:	40007000 	.word	0x40007000
 800333c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_OscConfig+0x500>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	429a      	cmp	r2, r3
 8003352:	d106      	bne.n	8003362 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d001      	beq.n	8003366 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000

08003374 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0d0      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003388:	4b6a      	ldr	r3, [pc, #424]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d910      	bls.n	80033b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b67      	ldr	r3, [pc, #412]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 0207 	bic.w	r2, r3, #7
 800339e:	4965      	ldr	r1, [pc, #404]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b63      	ldr	r3, [pc, #396]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0b8      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d020      	beq.n	8003406 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d0:	4b59      	ldr	r3, [pc, #356]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4a58      	ldr	r2, [pc, #352]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e8:	4b53      	ldr	r3, [pc, #332]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4a52      	ldr	r2, [pc, #328]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f4:	4b50      	ldr	r3, [pc, #320]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	494d      	ldr	r1, [pc, #308]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	4313      	orrs	r3, r2
 8003404:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d040      	beq.n	8003494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d107      	bne.n	800342a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	4b47      	ldr	r3, [pc, #284]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d115      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e07f      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003432:	4b41      	ldr	r3, [pc, #260]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e073      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003442:	4b3d      	ldr	r3, [pc, #244]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e06b      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003452:	4b39      	ldr	r3, [pc, #228]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f023 0203 	bic.w	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4936      	ldr	r1, [pc, #216]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	4313      	orrs	r3, r2
 8003462:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003464:	f7fd fa1a 	bl	800089c <HAL_GetTick>
 8003468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346a:	e00a      	b.n	8003482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346c:	f7fd fa16 	bl	800089c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e053      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	4b2d      	ldr	r3, [pc, #180]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 020c 	and.w	r2, r3, #12
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	429a      	cmp	r2, r3
 8003492:	d1eb      	bne.n	800346c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003494:	4b27      	ldr	r3, [pc, #156]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d210      	bcs.n	80034c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a2:	4b24      	ldr	r3, [pc, #144]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 0207 	bic.w	r2, r3, #7
 80034aa:	4922      	ldr	r1, [pc, #136]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b2:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e032      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d0:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4916      	ldr	r1, [pc, #88]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034ee:	4b12      	ldr	r3, [pc, #72]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	490e      	ldr	r1, [pc, #56]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003502:	f000 f821 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8003506:	4602      	mov	r2, r0
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	490a      	ldr	r1, [pc, #40]	; (800353c <HAL_RCC_ClockConfig+0x1c8>)
 8003514:	5ccb      	ldrb	r3, [r1, r3]
 8003516:	fa22 f303 	lsr.w	r3, r2, r3
 800351a:	4a09      	ldr	r2, [pc, #36]	; (8003540 <HAL_RCC_ClockConfig+0x1cc>)
 800351c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_ClockConfig+0x1d0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd f978 	bl	8000818 <HAL_InitTick>

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40022000 	.word	0x40022000
 8003538:	40021000 	.word	0x40021000
 800353c:	08008a18 	.word	0x08008a18
 8003540:	20000000 	.word	0x20000000
 8003544:	20000004 	.word	0x20000004

08003548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	2300      	movs	r3, #0
 800355c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003562:	4b1e      	ldr	r3, [pc, #120]	; (80035dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b04      	cmp	r3, #4
 8003570:	d002      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x30>
 8003572:	2b08      	cmp	r3, #8
 8003574:	d003      	beq.n	800357e <HAL_RCC_GetSysClockFreq+0x36>
 8003576:	e027      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003578:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800357a:	613b      	str	r3, [r7, #16]
      break;
 800357c:	e027      	b.n	80035ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	0c9b      	lsrs	r3, r3, #18
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	4a17      	ldr	r2, [pc, #92]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003588:	5cd3      	ldrb	r3, [r2, r3]
 800358a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d010      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003596:	4b11      	ldr	r3, [pc, #68]	; (80035dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	0c5b      	lsrs	r3, r3, #17
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	4a11      	ldr	r2, [pc, #68]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035a2:	5cd3      	ldrb	r3, [r2, r3]
 80035a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a0d      	ldr	r2, [pc, #52]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80035aa:	fb03 f202 	mul.w	r2, r3, r2
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	e004      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a0c      	ldr	r2, [pc, #48]	; (80035ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80035bc:	fb02 f303 	mul.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	613b      	str	r3, [r7, #16]
      break;
 80035c6:	e002      	b.n	80035ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ca:	613b      	str	r3, [r7, #16]
      break;
 80035cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ce:	693b      	ldr	r3, [r7, #16]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000
 80035e0:	007a1200 	.word	0x007a1200
 80035e4:	08008a30 	.word	0x08008a30
 80035e8:	08008a40 	.word	0x08008a40
 80035ec:	003d0900 	.word	0x003d0900

080035f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f4:	4b02      	ldr	r3, [pc, #8]	; (8003600 <HAL_RCC_GetHCLKFreq+0x10>)
 80035f6:	681b      	ldr	r3, [r3, #0]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	20000000 	.word	0x20000000

08003604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003608:	f7ff fff2 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	08008a28 	.word	0x08008a28

0800362c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003634:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <RCC_Delay+0x34>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <RCC_Delay+0x38>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0a5b      	lsrs	r3, r3, #9
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003648:	bf00      	nop
  }
  while (Delay --);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1e5a      	subs	r2, r3, #1
 800364e:	60fa      	str	r2, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f9      	bne.n	8003648 <RCC_Delay+0x1c>
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	20000000 	.word	0x20000000
 8003664:	10624dd3 	.word	0x10624dd3

08003668 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d07d      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003684:	2300      	movs	r3, #0
 8003686:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003688:	4b4f      	ldr	r3, [pc, #316]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10d      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003694:	4b4c      	ldr	r3, [pc, #304]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	4a4b      	ldr	r2, [pc, #300]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369e:	61d3      	str	r3, [r2, #28]
 80036a0:	4b49      	ldr	r3, [pc, #292]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ac:	2301      	movs	r3, #1
 80036ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	4b46      	ldr	r3, [pc, #280]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d118      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036bc:	4b43      	ldr	r3, [pc, #268]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a42      	ldr	r2, [pc, #264]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c8:	f7fd f8e8 	bl	800089c <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ce:	e008      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d0:	f7fd f8e4 	bl	800089c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e06d      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e2:	4b3a      	ldr	r3, [pc, #232]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036ee:	4b36      	ldr	r3, [pc, #216]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d02e      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	429a      	cmp	r2, r3
 800370a:	d027      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800370c:	4b2e      	ldr	r3, [pc, #184]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003714:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003716:	4b2e      	ldr	r3, [pc, #184]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003718:	2201      	movs	r2, #1
 800371a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800371c:	4b2c      	ldr	r3, [pc, #176]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003722:	4a29      	ldr	r2, [pc, #164]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d014      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fd f8b3 	bl	800089c <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003738:	e00a      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373a:	f7fd f8af 	bl	800089c <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f241 3288 	movw	r2, #5000	; 0x1388
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e036      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ee      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800375c:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4917      	ldr	r1, [pc, #92]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376a:	4313      	orrs	r3, r2
 800376c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800376e:	7dfb      	ldrb	r3, [r7, #23]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d105      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003774:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	4a13      	ldr	r2, [pc, #76]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800378c:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	490b      	ldr	r1, [pc, #44]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037aa:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	4904      	ldr	r1, [pc, #16]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40007000 	.word	0x40007000
 80037d0:	42420440 	.word	0x42420440

080037d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e041      	b.n	800386a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fc fefc 	bl	80005f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3304      	adds	r3, #4
 8003810:	4619      	mov	r1, r3
 8003812:	4610      	mov	r0, r2
 8003814:	f000 fa10 	bl	8003c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e041      	b.n	8003908 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f839 	bl	8003910 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3304      	adds	r3, #4
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f000 f9c1 	bl	8003c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr
	...

08003924 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800393e:	2302      	movs	r3, #2
 8003940:	e0ae      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b0c      	cmp	r3, #12
 800394e:	f200 809f 	bhi.w	8003a90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003952:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003958:	0800398d 	.word	0x0800398d
 800395c:	08003a91 	.word	0x08003a91
 8003960:	08003a91 	.word	0x08003a91
 8003964:	08003a91 	.word	0x08003a91
 8003968:	080039cd 	.word	0x080039cd
 800396c:	08003a91 	.word	0x08003a91
 8003970:	08003a91 	.word	0x08003a91
 8003974:	08003a91 	.word	0x08003a91
 8003978:	08003a0f 	.word	0x08003a0f
 800397c:	08003a91 	.word	0x08003a91
 8003980:	08003a91 	.word	0x08003a91
 8003984:	08003a91 	.word	0x08003a91
 8003988:	08003a4f 	.word	0x08003a4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f9b2 	bl	8003cfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0208 	orr.w	r2, r2, #8
 80039a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0204 	bic.w	r2, r2, #4
 80039b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6999      	ldr	r1, [r3, #24]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	619a      	str	r2, [r3, #24]
      break;
 80039ca:	e064      	b.n	8003a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 f9f8 	bl	8003dc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699a      	ldr	r2, [r3, #24]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6999      	ldr	r1, [r3, #24]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	021a      	lsls	r2, r3, #8
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	619a      	str	r2, [r3, #24]
      break;
 8003a0c:	e043      	b.n	8003a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fa41 	bl	8003e9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0208 	orr.w	r2, r2, #8
 8003a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69da      	ldr	r2, [r3, #28]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0204 	bic.w	r2, r2, #4
 8003a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69d9      	ldr	r1, [r3, #28]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	61da      	str	r2, [r3, #28]
      break;
 8003a4c:	e023      	b.n	8003a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fa8b 	bl	8003f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69d9      	ldr	r1, [r3, #28]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	021a      	lsls	r2, r3, #8
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	61da      	str	r2, [r3, #28]
      break;
 8003a8e:	e002      	b.n	8003a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	75fb      	strb	r3, [r7, #23]
      break;
 8003a94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e0b4      	b.n	8003c2e <HAL_TIM_ConfigClockSource+0x186>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afc:	d03e      	beq.n	8003b7c <HAL_TIM_ConfigClockSource+0xd4>
 8003afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b02:	f200 8087 	bhi.w	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0a:	f000 8086 	beq.w	8003c1a <HAL_TIM_ConfigClockSource+0x172>
 8003b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b12:	d87f      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b70      	cmp	r3, #112	; 0x70
 8003b16:	d01a      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0xa6>
 8003b18:	2b70      	cmp	r3, #112	; 0x70
 8003b1a:	d87b      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b60      	cmp	r3, #96	; 0x60
 8003b1e:	d050      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x11a>
 8003b20:	2b60      	cmp	r3, #96	; 0x60
 8003b22:	d877      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b50      	cmp	r3, #80	; 0x50
 8003b26:	d03c      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0xfa>
 8003b28:	2b50      	cmp	r3, #80	; 0x50
 8003b2a:	d873      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	2b40      	cmp	r3, #64	; 0x40
 8003b2e:	d058      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x13a>
 8003b30:	2b40      	cmp	r3, #64	; 0x40
 8003b32:	d86f      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b34:	2b30      	cmp	r3, #48	; 0x30
 8003b36:	d064      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x15a>
 8003b38:	2b30      	cmp	r3, #48	; 0x30
 8003b3a:	d86b      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d060      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x15a>
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d867      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d05c      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x15a>
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d05a      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x15a>
 8003b4c:	e062      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6899      	ldr	r1, [r3, #8]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f000 facc 	bl	80040fa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	609a      	str	r2, [r3, #8]
      break;
 8003b7a:	e04f      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	6899      	ldr	r1, [r3, #8]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f000 fab5 	bl	80040fa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b9e:	609a      	str	r2, [r3, #8]
      break;
 8003ba0:	e03c      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f000 fa2c 	bl	800400c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2150      	movs	r1, #80	; 0x50
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fa83 	bl	80040c6 <TIM_ITRx_SetConfig>
      break;
 8003bc0:	e02c      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6859      	ldr	r1, [r3, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f000 fa4a 	bl	8004068 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2160      	movs	r1, #96	; 0x60
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fa73 	bl	80040c6 <TIM_ITRx_SetConfig>
      break;
 8003be0:	e01c      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6859      	ldr	r1, [r3, #4]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f000 fa0c 	bl	800400c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2140      	movs	r1, #64	; 0x40
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fa63 	bl	80040c6 <TIM_ITRx_SetConfig>
      break;
 8003c00:	e00c      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	f000 fa5a 	bl	80040c6 <TIM_ITRx_SetConfig>
      break;
 8003c12:	e003      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
      break;
 8003c18:	e000      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a29      	ldr	r2, [pc, #164]	; (8003cf0 <TIM_Base_SetConfig+0xb8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00b      	beq.n	8003c68 <TIM_Base_SetConfig+0x30>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c56:	d007      	beq.n	8003c68 <TIM_Base_SetConfig+0x30>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a26      	ldr	r2, [pc, #152]	; (8003cf4 <TIM_Base_SetConfig+0xbc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d003      	beq.n	8003c68 <TIM_Base_SetConfig+0x30>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a25      	ldr	r2, [pc, #148]	; (8003cf8 <TIM_Base_SetConfig+0xc0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d108      	bne.n	8003c7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a1c      	ldr	r2, [pc, #112]	; (8003cf0 <TIM_Base_SetConfig+0xb8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d00b      	beq.n	8003c9a <TIM_Base_SetConfig+0x62>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c88:	d007      	beq.n	8003c9a <TIM_Base_SetConfig+0x62>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a19      	ldr	r2, [pc, #100]	; (8003cf4 <TIM_Base_SetConfig+0xbc>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d003      	beq.n	8003c9a <TIM_Base_SetConfig+0x62>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a18      	ldr	r2, [pc, #96]	; (8003cf8 <TIM_Base_SetConfig+0xc0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d108      	bne.n	8003cac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a07      	ldr	r2, [pc, #28]	; (8003cf0 <TIM_Base_SetConfig+0xb8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d103      	bne.n	8003ce0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	615a      	str	r2, [r3, #20]
}
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800

08003cfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f023 0201 	bic.w	r2, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0303 	bic.w	r3, r3, #3
 8003d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f023 0302 	bic.w	r3, r3, #2
 8003d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <TIM_OC1_SetConfig+0xc8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d10c      	bne.n	8003d72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f023 0308 	bic.w	r3, r3, #8
 8003d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f023 0304 	bic.w	r3, r3, #4
 8003d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a13      	ldr	r2, [pc, #76]	; (8003dc4 <TIM_OC1_SetConfig+0xc8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d111      	bne.n	8003d9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	621a      	str	r2, [r3, #32]
}
 8003db8:	bf00      	nop
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40012c00 	.word	0x40012c00

08003dc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f023 0210 	bic.w	r2, r3, #16
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f023 0320 	bic.w	r3, r3, #32
 8003e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <TIM_OC2_SetConfig+0xd0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d10d      	bne.n	8003e44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <TIM_OC2_SetConfig+0xd0>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d113      	bne.n	8003e74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr
 8003e98:	40012c00 	.word	0x40012c00

08003e9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0303 	bic.w	r3, r3, #3
 8003ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	021b      	lsls	r3, r3, #8
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <TIM_OC3_SetConfig+0xd0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d10d      	bne.n	8003f16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a14      	ldr	r2, [pc, #80]	; (8003f6c <TIM_OC3_SetConfig+0xd0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d113      	bne.n	8003f46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	621a      	str	r2, [r3, #32]
}
 8003f60:	bf00      	nop
 8003f62:	371c      	adds	r7, #28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40012c00 	.word	0x40012c00

08003f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	031b      	lsls	r3, r3, #12
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a0f      	ldr	r2, [pc, #60]	; (8004008 <TIM_OC4_SetConfig+0x98>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d109      	bne.n	8003fe4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	019b      	lsls	r3, r3, #6
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr
 8004008:	40012c00 	.word	0x40012c00

0800400c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f023 0201 	bic.w	r2, r3, #1
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f023 030a 	bic.w	r3, r3, #10
 8004048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f023 0210 	bic.w	r2, r3, #16
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	031b      	lsls	r3, r3, #12
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	621a      	str	r2, [r3, #32]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b085      	sub	sp, #20
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f043 0307 	orr.w	r3, r3, #7
 80040e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	609a      	str	r2, [r3, #8]
}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr

080040fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b087      	sub	sp, #28
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004114:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	021a      	lsls	r2, r3, #8
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	431a      	orrs	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	4313      	orrs	r3, r2
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	609a      	str	r2, [r3, #8]
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr

08004138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800414c:	2302      	movs	r3, #2
 800414e:	e046      	b.n	80041de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a16      	ldr	r2, [pc, #88]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d00e      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419c:	d009      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a12      	ldr	r2, [pc, #72]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d004      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a10      	ldr	r2, [pc, #64]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d10c      	bne.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr
 80041e8:	40012c00 	.word	0x40012c00
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800

080041f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041f4:	b084      	sub	sp, #16
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	f107 0014 	add.w	r0, r7, #20
 8004202:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	b004      	add	sp, #16
 8004212:	4770      	bx	lr

08004214 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004224:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004228:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	b29a      	uxth	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr

08004240 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004248:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800424c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	b29b      	uxth	r3, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	b29b      	uxth	r3, r3
 800425e:	4013      	ands	r3, r2
 8004260:	b29a      	uxth	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800428c:	b084      	sub	sp, #16
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	f107 0014 	add.w	r0, r7, #20
 800429a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	b004      	add	sp, #16
 80042ca:	4770      	bx	lr

080042cc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b09d      	sub	sp, #116	; 0x74
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80042ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	78db      	ldrb	r3, [r3, #3]
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d81f      	bhi.n	800433e <USB_ActivateEndpoint+0x72>
 80042fe:	a201      	add	r2, pc, #4	; (adr r2, 8004304 <USB_ActivateEndpoint+0x38>)
 8004300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004304:	08004315 	.word	0x08004315
 8004308:	08004331 	.word	0x08004331
 800430c:	08004347 	.word	0x08004347
 8004310:	08004323 	.word	0x08004323
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004314:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004318:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800431c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004320:	e012      	b.n	8004348 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004322:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004326:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800432a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800432e:	e00b      	b.n	8004348 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004330:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004334:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004338:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800433c:	e004      	b.n	8004348 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004344:	e000      	b.n	8004348 <USB_ActivateEndpoint+0x7c>
      break;
 8004346:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	441a      	add	r2, r3
 8004352:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800435a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800435e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004366:	b29b      	uxth	r3, r3
 8004368:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	b29b      	uxth	r3, r3
 8004378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800437c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004380:	b29a      	uxth	r2, r3
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	4313      	orrs	r3, r2
 800438a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	441a      	add	r2, r3
 8004398:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800439c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	7b1b      	ldrb	r3, [r3, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f040 8178 	bne.w	80046aa <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	785b      	ldrb	r3, [r3, #1]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 8084 	beq.w	80044cc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	461a      	mov	r2, r3
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	4413      	add	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	011a      	lsls	r2, r3, #4
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	88db      	ldrh	r3, [r3, #6]
 80043ec:	085b      	lsrs	r3, r3, #1
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	827b      	strh	r3, [r7, #18]
 8004406:	8a7b      	ldrh	r3, [r7, #18]
 8004408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01b      	beq.n	8004448 <USB_ActivateEndpoint+0x17c>
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	b29b      	uxth	r3, r3
 800441e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	823b      	strh	r3, [r7, #16]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	441a      	add	r2, r3
 8004432:	8a3b      	ldrh	r3, [r7, #16]
 8004434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800443c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004440:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004444:	b29b      	uxth	r3, r3
 8004446:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	78db      	ldrb	r3, [r3, #3]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d020      	beq.n	8004492 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	b29b      	uxth	r3, r3
 800445e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004466:	81bb      	strh	r3, [r7, #12]
 8004468:	89bb      	ldrh	r3, [r7, #12]
 800446a:	f083 0320 	eor.w	r3, r3, #32
 800446e:	81bb      	strh	r3, [r7, #12]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	441a      	add	r2, r3
 800447a:	89bb      	ldrh	r3, [r7, #12]
 800447c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800448c:	b29b      	uxth	r3, r3
 800448e:	8013      	strh	r3, [r2, #0]
 8004490:	e2d5      	b.n	8004a3e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a8:	81fb      	strh	r3, [r7, #14]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	441a      	add	r2, r3
 80044b4:	89fb      	ldrh	r3, [r7, #14]
 80044b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	8013      	strh	r3, [r2, #0]
 80044ca:	e2b8      	b.n	8004a3e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	633b      	str	r3, [r7, #48]	; 0x30
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	461a      	mov	r2, r3
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	4413      	add	r3, r2
 80044de:	633b      	str	r3, [r7, #48]	; 0x30
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	011a      	lsls	r2, r3, #4
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	88db      	ldrh	r3, [r3, #6]
 80044f4:	085b      	lsrs	r3, r3, #1
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800450a:	b29b      	uxth	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004510:	4413      	add	r3, r2
 8004512:	62bb      	str	r3, [r7, #40]	; 0x28
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	011a      	lsls	r2, r3, #4
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	4413      	add	r3, r2
 800451e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	b29b      	uxth	r3, r3
 800452a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800452e:	b29a      	uxth	r2, r3
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	801a      	strh	r2, [r3, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b3e      	cmp	r3, #62	; 0x3e
 800453a:	d91d      	bls.n	8004578 <USB_ActivateEndpoint+0x2ac>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	66bb      	str	r3, [r7, #104]	; 0x68
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f003 031f 	and.w	r3, r3, #31
 800454c:	2b00      	cmp	r3, #0
 800454e:	d102      	bne.n	8004556 <USB_ActivateEndpoint+0x28a>
 8004550:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004552:	3b01      	subs	r3, #1
 8004554:	66bb      	str	r3, [r7, #104]	; 0x68
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	b29a      	uxth	r2, r3
 800455c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800455e:	b29b      	uxth	r3, r3
 8004560:	029b      	lsls	r3, r3, #10
 8004562:	b29b      	uxth	r3, r3
 8004564:	4313      	orrs	r3, r2
 8004566:	b29b      	uxth	r3, r3
 8004568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800456c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004570:	b29a      	uxth	r2, r3
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	801a      	strh	r2, [r3, #0]
 8004576:	e026      	b.n	80045c6 <USB_ActivateEndpoint+0x2fa>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10a      	bne.n	8004596 <USB_ActivateEndpoint+0x2ca>
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	b29b      	uxth	r3, r3
 8004586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800458a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800458e:	b29a      	uxth	r2, r3
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	801a      	strh	r2, [r3, #0]
 8004594:	e017      	b.n	80045c6 <USB_ActivateEndpoint+0x2fa>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	66bb      	str	r3, [r7, #104]	; 0x68
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <USB_ActivateEndpoint+0x2e4>
 80045aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045ac:	3301      	adds	r3, #1
 80045ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	029b      	lsls	r3, r3, #10
 80045bc:	b29b      	uxth	r3, r3
 80045be:	4313      	orrs	r3, r2
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80045d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d01b      	beq.n	8004616 <USB_ActivateEndpoint+0x34a>
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f4:	843b      	strh	r3, [r7, #32]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	441a      	add	r2, r3
 8004600:	8c3b      	ldrh	r3, [r7, #32]
 8004602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800460a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800460e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004612:	b29b      	uxth	r3, r3
 8004614:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d124      	bne.n	8004668 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004634:	83bb      	strh	r3, [r7, #28]
 8004636:	8bbb      	ldrh	r3, [r7, #28]
 8004638:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800463c:	83bb      	strh	r3, [r7, #28]
 800463e:	8bbb      	ldrh	r3, [r7, #28]
 8004640:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004644:	83bb      	strh	r3, [r7, #28]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	441a      	add	r2, r3
 8004650:	8bbb      	ldrh	r3, [r7, #28]
 8004652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800465a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004662:	b29b      	uxth	r3, r3
 8004664:	8013      	strh	r3, [r2, #0]
 8004666:	e1ea      	b.n	8004a3e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	b29b      	uxth	r3, r3
 8004676:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800467a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467e:	83fb      	strh	r3, [r7, #30]
 8004680:	8bfb      	ldrh	r3, [r7, #30]
 8004682:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004686:	83fb      	strh	r3, [r7, #30]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	441a      	add	r2, r3
 8004692:	8bfb      	ldrh	r3, [r7, #30]
 8004694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	8013      	strh	r3, [r2, #0]
 80046a8:	e1c9      	b.n	8004a3e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	78db      	ldrb	r3, [r3, #3]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d11e      	bne.n	80046f0 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	441a      	add	r2, r3
 80046d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80046da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80046e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	8013      	strh	r3, [r2, #0]
 80046ee:	e01d      	b.n	800472c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004706:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	441a      	add	r2, r3
 8004714:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004728:	b29b      	uxth	r3, r3
 800472a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004736:	b29b      	uxth	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800473c:	4413      	add	r3, r2
 800473e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	011a      	lsls	r2, r3, #4
 8004746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004748:	4413      	add	r3, r2
 800474a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800474e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	891b      	ldrh	r3, [r3, #8]
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	b29b      	uxth	r3, r3
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800475e:	801a      	strh	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	657b      	str	r3, [r7, #84]	; 0x54
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800476a:	b29b      	uxth	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004770:	4413      	add	r3, r2
 8004772:	657b      	str	r3, [r7, #84]	; 0x54
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	011a      	lsls	r2, r3, #4
 800477a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800477c:	4413      	add	r3, r2
 800477e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004782:	653b      	str	r3, [r7, #80]	; 0x50
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	895b      	ldrh	r3, [r3, #10]
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	b29b      	uxth	r3, r3
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004792:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	785b      	ldrb	r3, [r3, #1]
 8004798:	2b00      	cmp	r3, #0
 800479a:	f040 8093 	bne.w	80048c4 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80047ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d01b      	beq.n	80047f2 <USB_ActivateEndpoint+0x526>
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	441a      	add	r2, r3
 80047dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80047de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004800:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004806:	2b00      	cmp	r3, #0
 8004808:	d01b      	beq.n	8004842 <USB_ActivateEndpoint+0x576>
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29b      	uxth	r3, r3
 8004818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004820:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	441a      	add	r2, r3
 800482c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800482e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800483a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800483e:	b29b      	uxth	r3, r3
 8004840:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004858:	873b      	strh	r3, [r7, #56]	; 0x38
 800485a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800485c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004860:	873b      	strh	r3, [r7, #56]	; 0x38
 8004862:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004864:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004868:	873b      	strh	r3, [r7, #56]	; 0x38
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	441a      	add	r2, r3
 8004874:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800487a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800487e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004886:	b29b      	uxth	r3, r3
 8004888:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800489c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	441a      	add	r2, r3
 80048ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80048ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048be:	b29b      	uxth	r3, r3
 80048c0:	8013      	strh	r3, [r2, #0]
 80048c2:	e0bc      	b.n	8004a3e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80048d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01d      	beq.n	800491c <USB_ActivateEndpoint+0x650>
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	441a      	add	r2, r3
 8004904:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800490c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004918:	b29b      	uxth	r3, r3
 800491a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800492c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01d      	beq.n	8004974 <USB_ActivateEndpoint+0x6a8>
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	441a      	add	r2, r3
 800495c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800496c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004970:	b29b      	uxth	r3, r3
 8004972:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	78db      	ldrb	r3, [r3, #3]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d024      	beq.n	80049c6 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004992:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004996:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800499a:	f083 0320 	eor.w	r3, r3, #32
 800499e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	441a      	add	r2, r3
 80049ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80049b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	8013      	strh	r3, [r2, #0]
 80049c4:	e01d      	b.n	8004a02 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	441a      	add	r2, r3
 80049ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80049ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	441a      	add	r2, r3
 8004a26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004a3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3774      	adds	r7, #116	; 0x74
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b08d      	sub	sp, #52	; 0x34
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	7b1b      	ldrb	r3, [r3, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f040 808e 	bne.w	8004b7c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	785b      	ldrb	r3, [r3, #1]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d044      	beq.n	8004af2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	81bb      	strh	r3, [r7, #12]
 8004a76:	89bb      	ldrh	r3, [r7, #12]
 8004a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <USB_DeactivateEndpoint+0x6c>
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a96:	817b      	strh	r3, [r7, #10]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	441a      	add	r2, r3
 8004aa2:	897b      	ldrh	r3, [r7, #10]
 8004aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ace:	813b      	strh	r3, [r7, #8]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	893b      	ldrh	r3, [r7, #8]
 8004adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	8013      	strh	r3, [r2, #0]
 8004af0:	e192      	b.n	8004e18 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	827b      	strh	r3, [r7, #18]
 8004b00:	8a7b      	ldrh	r3, [r7, #18]
 8004b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d01b      	beq.n	8004b42 <USB_DeactivateEndpoint+0xf6>
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b20:	823b      	strh	r3, [r7, #16]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	441a      	add	r2, r3
 8004b2c:	8a3b      	ldrh	r3, [r7, #16]
 8004b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b58:	81fb      	strh	r3, [r7, #14]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	441a      	add	r2, r3
 8004b64:	89fb      	ldrh	r3, [r7, #14]
 8004b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	8013      	strh	r3, [r2, #0]
 8004b7a:	e14d      	b.n	8004e18 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	785b      	ldrb	r3, [r3, #1]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f040 80a5 	bne.w	8004cd0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	843b      	strh	r3, [r7, #32]
 8004b94:	8c3b      	ldrh	r3, [r7, #32]
 8004b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d01b      	beq.n	8004bd6 <USB_DeactivateEndpoint+0x18a>
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb4:	83fb      	strh	r3, [r7, #30]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	441a      	add	r2, r3
 8004bc0:	8bfb      	ldrh	r3, [r7, #30]
 8004bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	83bb      	strh	r3, [r7, #28]
 8004be4:	8bbb      	ldrh	r3, [r7, #28]
 8004be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d01b      	beq.n	8004c26 <USB_DeactivateEndpoint+0x1da>
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c04:	837b      	strh	r3, [r7, #26]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	441a      	add	r2, r3
 8004c10:	8b7b      	ldrh	r3, [r7, #26]
 8004c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3c:	833b      	strh	r3, [r7, #24]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	441a      	add	r2, r3
 8004c48:	8b3b      	ldrh	r3, [r7, #24]
 8004c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c74:	82fb      	strh	r3, [r7, #22]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	441a      	add	r2, r3
 8004c80:	8afb      	ldrh	r3, [r7, #22]
 8004c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cac:	82bb      	strh	r3, [r7, #20]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	441a      	add	r2, r3
 8004cb8:	8abb      	ldrh	r3, [r7, #20]
 8004cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	8013      	strh	r3, [r2, #0]
 8004cce:	e0a3      	b.n	8004e18 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004cde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01b      	beq.n	8004d20 <USB_DeactivateEndpoint+0x2d4>
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	441a      	add	r2, r3
 8004d0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004d2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01b      	beq.n	8004d70 <USB_DeactivateEndpoint+0x324>
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	441a      	add	r2, r3
 8004d5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	441a      	add	r2, r3
 8004d92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dbe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	441a      	add	r2, r3
 8004dca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	847b      	strh	r3, [r7, #34]	; 0x22
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	441a      	add	r2, r3
 8004e02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3734      	adds	r7, #52	; 0x34
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b0c2      	sub	sp, #264	; 0x108
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e32:	6018      	str	r0, [r3, #0]
 8004e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e3c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	785b      	ldrb	r3, [r3, #1]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	f040 86b7 	bne.w	8005bbe <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	699a      	ldr	r2, [r3, #24]
 8004e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d908      	bls.n	8004e7e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e7c:	e007      	b.n	8004e8e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	7b1b      	ldrb	r3, [r3, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d13a      	bne.n	8004f14 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6959      	ldr	r1, [r3, #20]
 8004eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	88da      	ldrh	r2, [r3, #6]
 8004eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004ec0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004ec4:	6800      	ldr	r0, [r0, #0]
 8004ec6:	f001 fc9c 	bl	8006802 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4413      	add	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	011a      	lsls	r2, r3, #4
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	4413      	add	r3, r2
 8004f00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	f000 be1f 	b.w	8005b52 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	78db      	ldrb	r3, [r3, #3]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	f040 8462 	bne.w	80057ea <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6a1a      	ldr	r2, [r3, #32]
 8004f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	f240 83df 	bls.w	8005702 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	441a      	add	r2, r3
 8004f88:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f94:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6a1a      	ldr	r2, [r3, #32]
 8004fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fb0:	1ad2      	subs	r2, r2, r3
 8004fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 81c7 	beq.w	8005374 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d177      	bne.n	80050f2 <USB_EPStartXfer+0x2ce>
 8005002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	62bb      	str	r3, [r7, #40]	; 0x28
 800500e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800501c:	b29b      	uxth	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005022:	4413      	add	r3, r2
 8005024:	62bb      	str	r3, [r7, #40]	; 0x28
 8005026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800502a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	011a      	lsls	r2, r3, #4
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	4413      	add	r3, r2
 8005038:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29b      	uxth	r3, r3
 8005044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005048:	b29a      	uxth	r2, r3
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	801a      	strh	r2, [r3, #0]
 800504e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005052:	2b3e      	cmp	r3, #62	; 0x3e
 8005054:	d921      	bls.n	800509a <USB_EPStartXfer+0x276>
 8005056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005064:	f003 031f 	and.w	r3, r3, #31
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <USB_EPStartXfer+0x252>
 800506c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005070:	3b01      	subs	r3, #1
 8005072:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	b29a      	uxth	r2, r3
 800507c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005080:	b29b      	uxth	r3, r3
 8005082:	029b      	lsls	r3, r3, #10
 8005084:	b29b      	uxth	r3, r3
 8005086:	4313      	orrs	r3, r2
 8005088:	b29b      	uxth	r3, r3
 800508a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800508e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005092:	b29a      	uxth	r2, r3
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	801a      	strh	r2, [r3, #0]
 8005098:	e050      	b.n	800513c <USB_EPStartXfer+0x318>
 800509a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <USB_EPStartXfer+0x294>
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	e041      	b.n	800513c <USB_EPStartXfer+0x318>
 80050b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050bc:	085b      	lsrs	r3, r3, #1
 80050be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d004      	beq.n	80050d8 <USB_EPStartXfer+0x2b4>
 80050ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050d2:	3301      	adds	r3, #1
 80050d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	b29a      	uxth	r2, r3
 80050de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	029b      	lsls	r3, r3, #10
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	4313      	orrs	r3, r2
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	801a      	strh	r2, [r3, #0]
 80050f0:	e024      	b.n	800513c <USB_EPStartXfer+0x318>
 80050f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	785b      	ldrb	r3, [r3, #1]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d11c      	bne.n	800513c <USB_EPStartXfer+0x318>
 8005102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005110:	b29b      	uxth	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	4413      	add	r3, r2
 8005118:	633b      	str	r3, [r7, #48]	; 0x30
 800511a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	011a      	lsls	r2, r3, #4
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	4413      	add	r3, r2
 800512c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005136:	b29a      	uxth	r2, r3
 8005138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800513c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	895b      	ldrh	r3, [r3, #10]
 8005148:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800514c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6959      	ldr	r1, [r3, #20]
 8005158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800515c:	b29b      	uxth	r3, r3
 800515e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005162:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005166:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800516a:	6800      	ldr	r0, [r0, #0]
 800516c:	f001 fb49 	bl	8006802 <USB_WritePMA>
            ep->xfer_buff += len;
 8005170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695a      	ldr	r2, [r3, #20]
 800517c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005180:	441a      	add	r2, r3
 8005182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800518e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6a1a      	ldr	r2, [r3, #32]
 800519a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d90f      	bls.n	80051ca <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80051aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6a1a      	ldr	r2, [r3, #32]
 80051b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ba:	1ad2      	subs	r2, r2, r3
 80051bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	621a      	str	r2, [r3, #32]
 80051c8:	e00e      	b.n	80051e8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80051ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80051da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2200      	movs	r2, #0
 80051e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	785b      	ldrb	r3, [r3, #1]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d177      	bne.n	80052e8 <USB_EPStartXfer+0x4c4>
 80051f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	61bb      	str	r3, [r7, #24]
 8005204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005208:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005212:	b29b      	uxth	r3, r3
 8005214:	461a      	mov	r2, r3
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	4413      	add	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
 800521c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	011a      	lsls	r2, r3, #4
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	4413      	add	r3, r2
 800522e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800523e:	b29a      	uxth	r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	801a      	strh	r2, [r3, #0]
 8005244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005248:	2b3e      	cmp	r3, #62	; 0x3e
 800524a:	d921      	bls.n	8005290 <USB_EPStartXfer+0x46c>
 800524c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	2b00      	cmp	r3, #0
 8005260:	d104      	bne.n	800526c <USB_EPStartXfer+0x448>
 8005262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005266:	3b01      	subs	r3, #1
 8005268:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	b29a      	uxth	r2, r3
 8005272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005276:	b29b      	uxth	r3, r3
 8005278:	029b      	lsls	r3, r3, #10
 800527a:	b29b      	uxth	r3, r3
 800527c:	4313      	orrs	r3, r2
 800527e:	b29b      	uxth	r3, r3
 8005280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005288:	b29a      	uxth	r2, r3
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	801a      	strh	r2, [r3, #0]
 800528e:	e056      	b.n	800533e <USB_EPStartXfer+0x51a>
 8005290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <USB_EPStartXfer+0x48a>
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29b      	uxth	r3, r3
 800529e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	801a      	strh	r2, [r3, #0]
 80052ac:	e047      	b.n	800533e <USB_EPStartXfer+0x51a>
 80052ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b2:	085b      	lsrs	r3, r3, #1
 80052b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d004      	beq.n	80052ce <USB_EPStartXfer+0x4aa>
 80052c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c8:	3301      	adds	r3, #1
 80052ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052d8:	b29b      	uxth	r3, r3
 80052da:	029b      	lsls	r3, r3, #10
 80052dc:	b29b      	uxth	r3, r3
 80052de:	4313      	orrs	r3, r2
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	801a      	strh	r2, [r3, #0]
 80052e6:	e02a      	b.n	800533e <USB_EPStartXfer+0x51a>
 80052e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d122      	bne.n	800533e <USB_EPStartXfer+0x51a>
 80052f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	623b      	str	r3, [r7, #32]
 8005304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005312:	b29b      	uxth	r3, r3
 8005314:	461a      	mov	r2, r3
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	4413      	add	r3, r2
 800531a:	623b      	str	r3, [r7, #32]
 800531c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	011a      	lsls	r2, r3, #4
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	4413      	add	r3, r2
 800532e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005338:	b29a      	uxth	r2, r3
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800533e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	891b      	ldrh	r3, [r3, #8]
 800534a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800534e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6959      	ldr	r1, [r3, #20]
 800535a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800535e:	b29b      	uxth	r3, r3
 8005360:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005364:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005368:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800536c:	6800      	ldr	r0, [r0, #0]
 800536e:	f001 fa48 	bl	8006802 <USB_WritePMA>
 8005372:	e3ee      	b.n	8005b52 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d177      	bne.n	8005474 <USB_EPStartXfer+0x650>
 8005384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005388:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005394:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539e:	b29b      	uxth	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a4:	4413      	add	r3, r2
 80053a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80053a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	011a      	lsls	r2, r3, #4
 80053b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b8:	4413      	add	r3, r2
 80053ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053be:	647b      	str	r3, [r7, #68]	; 0x44
 80053c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ce:	801a      	strh	r2, [r3, #0]
 80053d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d4:	2b3e      	cmp	r3, #62	; 0x3e
 80053d6:	d921      	bls.n	800541c <USB_EPStartXfer+0x5f8>
 80053d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <USB_EPStartXfer+0x5d4>
 80053ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053f2:	3b01      	subs	r3, #1
 80053f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005402:	b29b      	uxth	r3, r3
 8005404:	029b      	lsls	r3, r3, #10
 8005406:	b29b      	uxth	r3, r3
 8005408:	4313      	orrs	r3, r2
 800540a:	b29b      	uxth	r3, r3
 800540c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005414:	b29a      	uxth	r2, r3
 8005416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005418:	801a      	strh	r2, [r3, #0]
 800541a:	e056      	b.n	80054ca <USB_EPStartXfer+0x6a6>
 800541c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <USB_EPStartXfer+0x616>
 8005424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29b      	uxth	r3, r3
 800542a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005432:	b29a      	uxth	r2, r3
 8005434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005436:	801a      	strh	r2, [r3, #0]
 8005438:	e047      	b.n	80054ca <USB_EPStartXfer+0x6a6>
 800543a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543e:	085b      	lsrs	r3, r3, #1
 8005440:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d004      	beq.n	800545a <USB_EPStartXfer+0x636>
 8005450:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005454:	3301      	adds	r3, #1
 8005456:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800545a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29a      	uxth	r2, r3
 8005460:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005464:	b29b      	uxth	r3, r3
 8005466:	029b      	lsls	r3, r3, #10
 8005468:	b29b      	uxth	r3, r3
 800546a:	4313      	orrs	r3, r2
 800546c:	b29a      	uxth	r2, r3
 800546e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	e02a      	b.n	80054ca <USB_EPStartXfer+0x6a6>
 8005474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	785b      	ldrb	r3, [r3, #1]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d122      	bne.n	80054ca <USB_EPStartXfer+0x6a6>
 8005484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005488:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	653b      	str	r3, [r7, #80]	; 0x50
 8005490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800549e:	b29b      	uxth	r3, r3
 80054a0:	461a      	mov	r2, r3
 80054a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a4:	4413      	add	r3, r2
 80054a6:	653b      	str	r3, [r7, #80]	; 0x50
 80054a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	011a      	lsls	r2, r3, #4
 80054b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b8:	4413      	add	r3, r2
 80054ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	891b      	ldrh	r3, [r3, #8]
 80054d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6959      	ldr	r1, [r3, #20]
 80054e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80054f0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80054f4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80054f8:	6800      	ldr	r0, [r0, #0]
 80054fa:	f001 f982 	bl	8006802 <USB_WritePMA>
            ep->xfer_buff += len;
 80054fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695a      	ldr	r2, [r3, #20]
 800550a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800550e:	441a      	add	r2, r3
 8005510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800551c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6a1a      	ldr	r2, [r3, #32]
 8005528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800552c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	429a      	cmp	r2, r3
 8005536:	d90f      	bls.n	8005558 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800553c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6a1a      	ldr	r2, [r3, #32]
 8005544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005548:	1ad2      	subs	r2, r2, r3
 800554a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800554e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	621a      	str	r2, [r3, #32]
 8005556:	e00e      	b.n	8005576 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2200      	movs	r2, #0
 8005574:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800557a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	643b      	str	r3, [r7, #64]	; 0x40
 8005582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d177      	bne.n	8005682 <USB_EPStartXfer+0x85e>
 8005592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	63bb      	str	r3, [r7, #56]	; 0x38
 800559e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b2:	4413      	add	r3, r2
 80055b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80055b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	011a      	lsls	r2, r3, #4
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	4413      	add	r3, r2
 80055c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055cc:	637b      	str	r3, [r7, #52]	; 0x34
 80055ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055d8:	b29a      	uxth	r2, r3
 80055da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e2:	2b3e      	cmp	r3, #62	; 0x3e
 80055e4:	d921      	bls.n	800562a <USB_EPStartXfer+0x806>
 80055e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d104      	bne.n	8005606 <USB_EPStartXfer+0x7e2>
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005600:	3b01      	subs	r3, #1
 8005602:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29a      	uxth	r2, r3
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005610:	b29b      	uxth	r3, r3
 8005612:	029b      	lsls	r3, r3, #10
 8005614:	b29b      	uxth	r3, r3
 8005616:	4313      	orrs	r3, r2
 8005618:	b29b      	uxth	r3, r3
 800561a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005622:	b29a      	uxth	r2, r3
 8005624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005626:	801a      	strh	r2, [r3, #0]
 8005628:	e050      	b.n	80056cc <USB_EPStartXfer+0x8a8>
 800562a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <USB_EPStartXfer+0x824>
 8005632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800563c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005640:	b29a      	uxth	r2, r3
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	e041      	b.n	80056cc <USB_EPStartXfer+0x8a8>
 8005648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564c:	085b      	lsrs	r3, r3, #1
 800564e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d004      	beq.n	8005668 <USB_EPStartXfer+0x844>
 800565e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005662:	3301      	adds	r3, #1
 8005664:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29a      	uxth	r2, r3
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005672:	b29b      	uxth	r3, r3
 8005674:	029b      	lsls	r3, r3, #10
 8005676:	b29b      	uxth	r3, r3
 8005678:	4313      	orrs	r3, r2
 800567a:	b29a      	uxth	r2, r3
 800567c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567e:	801a      	strh	r2, [r3, #0]
 8005680:	e024      	b.n	80056cc <USB_EPStartXfer+0x8a8>
 8005682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	785b      	ldrb	r3, [r3, #1]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d11c      	bne.n	80056cc <USB_EPStartXfer+0x8a8>
 8005692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005696:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	461a      	mov	r2, r3
 80056a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a6:	4413      	add	r3, r2
 80056a8:	643b      	str	r3, [r7, #64]	; 0x40
 80056aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	011a      	lsls	r2, r3, #4
 80056b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ba:	4413      	add	r3, r2
 80056bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	895b      	ldrh	r3, [r3, #10]
 80056d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6959      	ldr	r1, [r3, #20]
 80056e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80056f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80056f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80056fa:	6800      	ldr	r0, [r0, #0]
 80056fc:	f001 f881 	bl	8006802 <USB_WritePMA>
 8005700:	e227      	b.n	8005b52 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005716:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	b29b      	uxth	r3, r3
 8005730:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005738:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800573c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800574a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	441a      	add	r2, r3
 8005756:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800575a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800575e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800576a:	b29b      	uxth	r3, r3
 800576c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800576e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	65fb      	str	r3, [r7, #92]	; 0x5c
 800577a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800577e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005788:	b29b      	uxth	r3, r3
 800578a:	461a      	mov	r2, r3
 800578c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800578e:	4413      	add	r3, r2
 8005790:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	011a      	lsls	r2, r3, #4
 80057a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057a2:	4413      	add	r3, r2
 80057a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80057aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80057b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	891b      	ldrh	r3, [r3, #8]
 80057c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6959      	ldr	r1, [r3, #20]
 80057d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80057da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80057de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80057e2:	6800      	ldr	r0, [r0, #0]
 80057e4:	f001 f80d 	bl	8006802 <USB_WritePMA>
 80057e8:	e1b3      	b.n	8005b52 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80057ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6a1a      	ldr	r2, [r3, #32]
 80057f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057fa:	1ad2      	subs	r2, r2, r3
 80057fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	b29b      	uxth	r3, r3
 8005826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 80c6 	beq.w	80059bc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005834:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	673b      	str	r3, [r7, #112]	; 0x70
 800583c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	785b      	ldrb	r3, [r3, #1]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d177      	bne.n	800593c <USB_EPStartXfer+0xb18>
 800584c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	66bb      	str	r3, [r7, #104]	; 0x68
 8005858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005866:	b29b      	uxth	r3, r3
 8005868:	461a      	mov	r2, r3
 800586a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800586c:	4413      	add	r3, r2
 800586e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	011a      	lsls	r2, r3, #4
 800587e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005880:	4413      	add	r3, r2
 8005882:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005886:	667b      	str	r3, [r7, #100]	; 0x64
 8005888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	b29b      	uxth	r3, r3
 800588e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005892:	b29a      	uxth	r2, r3
 8005894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005896:	801a      	strh	r2, [r3, #0]
 8005898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800589c:	2b3e      	cmp	r3, #62	; 0x3e
 800589e:	d921      	bls.n	80058e4 <USB_EPStartXfer+0xac0>
 80058a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ae:	f003 031f 	and.w	r3, r3, #31
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d104      	bne.n	80058c0 <USB_EPStartXfer+0xa9c>
 80058b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058ba:	3b01      	subs	r3, #1
 80058bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	029b      	lsls	r3, r3, #10
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	4313      	orrs	r3, r2
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058dc:	b29a      	uxth	r2, r3
 80058de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058e0:	801a      	strh	r2, [r3, #0]
 80058e2:	e050      	b.n	8005986 <USB_EPStartXfer+0xb62>
 80058e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <USB_EPStartXfer+0xade>
 80058ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058fe:	801a      	strh	r2, [r3, #0]
 8005900:	e041      	b.n	8005986 <USB_EPStartXfer+0xb62>
 8005902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005906:	085b      	lsrs	r3, r3, #1
 8005908:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800590c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d004      	beq.n	8005922 <USB_EPStartXfer+0xafe>
 8005918:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800591c:	3301      	adds	r3, #1
 800591e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29a      	uxth	r2, r3
 8005928:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800592c:	b29b      	uxth	r3, r3
 800592e:	029b      	lsls	r3, r3, #10
 8005930:	b29b      	uxth	r3, r3
 8005932:	4313      	orrs	r3, r2
 8005934:	b29a      	uxth	r2, r3
 8005936:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005938:	801a      	strh	r2, [r3, #0]
 800593a:	e024      	b.n	8005986 <USB_EPStartXfer+0xb62>
 800593c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d11c      	bne.n	8005986 <USB_EPStartXfer+0xb62>
 800594c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800595a:	b29b      	uxth	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005960:	4413      	add	r3, r2
 8005962:	673b      	str	r3, [r7, #112]	; 0x70
 8005964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	011a      	lsls	r2, r3, #4
 8005972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005974:	4413      	add	r3, r2
 8005976:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800597a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800597c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005980:	b29a      	uxth	r2, r3
 8005982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005984:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800598a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	895b      	ldrh	r3, [r3, #10]
 8005992:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6959      	ldr	r1, [r3, #20]
 80059a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80059b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80059b4:	6800      	ldr	r0, [r0, #0]
 80059b6:	f000 ff24 	bl	8006802 <USB_WritePMA>
 80059ba:	e0ca      	b.n	8005b52 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d177      	bne.n	8005abc <USB_EPStartXfer+0xc98>
 80059cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059ec:	4413      	add	r3, r2
 80059ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	011a      	lsls	r2, r3, #4
 80059fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a00:	4413      	add	r3, r2
 8005a02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a06:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a16:	801a      	strh	r2, [r3, #0]
 8005a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a1c:	2b3e      	cmp	r3, #62	; 0x3e
 8005a1e:	d921      	bls.n	8005a64 <USB_EPStartXfer+0xc40>
 8005a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a2e:	f003 031f 	and.w	r3, r3, #31
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d104      	bne.n	8005a40 <USB_EPStartXfer+0xc1c>
 8005a36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	029b      	lsls	r3, r3, #10
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	4313      	orrs	r3, r2
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	e05c      	b.n	8005b1e <USB_EPStartXfer+0xcfa>
 8005a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <USB_EPStartXfer+0xc5e>
 8005a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a7e:	801a      	strh	r2, [r3, #0]
 8005a80:	e04d      	b.n	8005b1e <USB_EPStartXfer+0xcfa>
 8005a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a86:	085b      	lsrs	r3, r3, #1
 8005a88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d004      	beq.n	8005aa2 <USB_EPStartXfer+0xc7e>
 8005a98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005aa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	029b      	lsls	r3, r3, #10
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ab8:	801a      	strh	r2, [r3, #0]
 8005aba:	e030      	b.n	8005b1e <USB_EPStartXfer+0xcfa>
 8005abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	785b      	ldrb	r3, [r3, #1]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d128      	bne.n	8005b1e <USB_EPStartXfer+0xcfa>
 8005acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	461a      	mov	r2, r3
 8005aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005af0:	4413      	add	r3, r2
 8005af2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	011a      	lsls	r2, r3, #4
 8005b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b08:	4413      	add	r3, r2
 8005b0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b1c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	891b      	ldrh	r3, [r3, #8]
 8005b2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6959      	ldr	r1, [r3, #20]
 8005b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b44:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b48:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b4c:	6800      	ldr	r0, [r0, #0]
 8005b4e:	f000 fe58 	bl	8006802 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b78:	817b      	strh	r3, [r7, #10]
 8005b7a:	897b      	ldrh	r3, [r7, #10]
 8005b7c:	f083 0310 	eor.w	r3, r3, #16
 8005b80:	817b      	strh	r3, [r7, #10]
 8005b82:	897b      	ldrh	r3, [r7, #10]
 8005b84:	f083 0320 	eor.w	r3, r3, #32
 8005b88:	817b      	strh	r3, [r7, #10]
 8005b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	441a      	add	r2, r3
 8005ba4:	897b      	ldrh	r3, [r7, #10]
 8005ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	8013      	strh	r3, [r2, #0]
 8005bba:	f000 bcde 	b.w	800657a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	7b1b      	ldrb	r3, [r3, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f040 80bb 	bne.w	8005d46 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	699a      	ldr	r2, [r3, #24]
 8005bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d917      	bls.n	8005c1c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699a      	ldr	r2, [r3, #24]
 8005c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c0c:	1ad2      	subs	r2, r2, r3
 8005c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	619a      	str	r2, [r3, #24]
 8005c1a:	e00e      	b.n	8005c3a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2200      	movs	r2, #0
 8005c38:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c5e:	4413      	add	r3, r2
 8005c60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	011a      	lsls	r2, r3, #4
 8005c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c76:	4413      	add	r3, r2
 8005c78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c92:	801a      	strh	r2, [r3, #0]
 8005c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c98:	2b3e      	cmp	r3, #62	; 0x3e
 8005c9a:	d924      	bls.n	8005ce6 <USB_EPStartXfer+0xec2>
 8005c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005caa:	f003 031f 	and.w	r3, r3, #31
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d104      	bne.n	8005cbc <USB_EPStartXfer+0xe98>
 8005cb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	029b      	lsls	r3, r3, #10
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ce0:	801a      	strh	r2, [r3, #0]
 8005ce2:	f000 bc10 	b.w	8006506 <USB_EPStartXfer+0x16e2>
 8005ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10c      	bne.n	8005d08 <USB_EPStartXfer+0xee4>
 8005cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d04:	801a      	strh	r2, [r3, #0]
 8005d06:	e3fe      	b.n	8006506 <USB_EPStartXfer+0x16e2>
 8005d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0c:	085b      	lsrs	r3, r3, #1
 8005d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d004      	beq.n	8005d28 <USB_EPStartXfer+0xf04>
 8005d1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d22:	3301      	adds	r3, #1
 8005d24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	029b      	lsls	r3, r3, #10
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d42:	801a      	strh	r2, [r3, #0]
 8005d44:	e3df      	b.n	8006506 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	78db      	ldrb	r3, [r3, #3]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	f040 8218 	bne.w	8006188 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f040 809d 	bne.w	8005ea4 <USB_EPStartXfer+0x1080>
 8005d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d8e:	4413      	add	r3, r2
 8005d90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	011a      	lsls	r2, r3, #4
 8005da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005da6:	4413      	add	r3, r2
 8005da8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005db0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	2b3e      	cmp	r3, #62	; 0x3e
 8005dd2:	d92b      	bls.n	8005e2c <USB_EPStartXfer+0x1008>
 8005dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d104      	bne.n	8005e04 <USB_EPStartXfer+0xfe0>
 8005dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	029b      	lsls	r3, r3, #10
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	4313      	orrs	r3, r2
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e28:	801a      	strh	r2, [r3, #0]
 8005e2a:	e070      	b.n	8005f0e <USB_EPStartXfer+0x10ea>
 8005e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10c      	bne.n	8005e56 <USB_EPStartXfer+0x1032>
 8005e3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e52:	801a      	strh	r2, [r3, #0]
 8005e54:	e05b      	b.n	8005f0e <USB_EPStartXfer+0x10ea>
 8005e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	085b      	lsrs	r3, r3, #1
 8005e64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d004      	beq.n	8005e86 <USB_EPStartXfer+0x1062>
 8005e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e80:	3301      	adds	r3, #1
 8005e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	029b      	lsls	r3, r3, #10
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ea0:	801a      	strh	r2, [r3, #0]
 8005ea2:	e034      	b.n	8005f0e <USB_EPStartXfer+0x10ea>
 8005ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d12c      	bne.n	8005f0e <USB_EPStartXfer+0x10ea>
 8005eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ed8:	4413      	add	r3, r2
 8005eda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	011a      	lsls	r2, r3, #4
 8005eec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f0c:	801a      	strh	r2, [r3, #0]
 8005f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	785b      	ldrb	r3, [r3, #1]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f040 809d 	bne.w	8006068 <USB_EPStartXfer+0x1244>
 8005f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f52:	4413      	add	r3, r2
 8005f54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	011a      	lsls	r2, r3, #4
 8005f66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	2b3e      	cmp	r3, #62	; 0x3e
 8005f96:	d92b      	bls.n	8005ff0 <USB_EPStartXfer+0x11cc>
 8005f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	095b      	lsrs	r3, r3, #5
 8005fa6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f003 031f 	and.w	r3, r3, #31
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d104      	bne.n	8005fc8 <USB_EPStartXfer+0x11a4>
 8005fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	029b      	lsls	r3, r3, #10
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fec:	801a      	strh	r2, [r3, #0]
 8005fee:	e069      	b.n	80060c4 <USB_EPStartXfer+0x12a0>
 8005ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10c      	bne.n	800601a <USB_EPStartXfer+0x11f6>
 8006000:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800600c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006010:	b29a      	uxth	r2, r3
 8006012:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006016:	801a      	strh	r2, [r3, #0]
 8006018:	e054      	b.n	80060c4 <USB_EPStartXfer+0x12a0>
 800601a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	085b      	lsrs	r3, r3, #1
 8006028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800602c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d004      	beq.n	800604a <USB_EPStartXfer+0x1226>
 8006040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006044:	3301      	adds	r3, #1
 8006046:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800604a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29a      	uxth	r2, r3
 8006052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006056:	b29b      	uxth	r3, r3
 8006058:	029b      	lsls	r3, r3, #10
 800605a:	b29b      	uxth	r3, r3
 800605c:	4313      	orrs	r3, r2
 800605e:	b29a      	uxth	r2, r3
 8006060:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006064:	801a      	strh	r2, [r3, #0]
 8006066:	e02d      	b.n	80060c4 <USB_EPStartXfer+0x12a0>
 8006068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	785b      	ldrb	r3, [r3, #1]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d125      	bne.n	80060c4 <USB_EPStartXfer+0x12a0>
 8006078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800607c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006086:	b29b      	uxth	r3, r3
 8006088:	461a      	mov	r2, r3
 800608a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800608e:	4413      	add	r3, r2
 8006090:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	011a      	lsls	r2, r3, #4
 80060a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060a6:	4413      	add	r3, r2
 80060a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	b29a      	uxth	r2, r3
 80060be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060c2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80060c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 8218 	beq.w	8006506 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80060d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80060f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80060fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <USB_EPStartXfer+0x12ea>
 8006102:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10d      	bne.n	800612a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800610e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006116:	2b00      	cmp	r3, #0
 8006118:	f040 81f5 	bne.w	8006506 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800611c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	f040 81ee 	bne.w	8006506 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800612a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006150:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	441a      	add	r2, r3
 800616e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800617a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006182:	b29b      	uxth	r3, r3
 8006184:	8013      	strh	r3, [r2, #0]
 8006186:	e1be      	b.n	8006506 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	78db      	ldrb	r3, [r3, #3]
 8006194:	2b01      	cmp	r3, #1
 8006196:	f040 81b4 	bne.w	8006502 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800619a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d917      	bls.n	80061e6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80061b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80061c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d6:	1ad2      	subs	r2, r2, r3
 80061d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	619a      	str	r2, [r3, #24]
 80061e4:	e00e      	b.n	8006204 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80061e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80061f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2200      	movs	r2, #0
 8006202:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	785b      	ldrb	r3, [r3, #1]
 8006210:	2b00      	cmp	r3, #0
 8006212:	f040 8085 	bne.w	8006320 <USB_EPStartXfer+0x14fc>
 8006216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006228:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006232:	b29b      	uxth	r3, r3
 8006234:	461a      	mov	r2, r3
 8006236:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800623a:	4413      	add	r3, r2
 800623c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	011a      	lsls	r2, r3, #4
 800624e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006252:	4413      	add	r3, r2
 8006254:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006258:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800625c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006268:	b29a      	uxth	r2, r3
 800626a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006274:	2b3e      	cmp	r3, #62	; 0x3e
 8006276:	d923      	bls.n	80062c0 <USB_EPStartXfer+0x149c>
 8006278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006286:	f003 031f 	and.w	r3, r3, #31
 800628a:	2b00      	cmp	r3, #0
 800628c:	d104      	bne.n	8006298 <USB_EPStartXfer+0x1474>
 800628e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006292:	3b01      	subs	r3, #1
 8006294:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006298:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29a      	uxth	r2, r3
 80062a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	029b      	lsls	r3, r3, #10
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	4313      	orrs	r3, r2
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	e060      	b.n	8006382 <USB_EPStartXfer+0x155e>
 80062c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10c      	bne.n	80062e2 <USB_EPStartXfer+0x14be>
 80062c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d8:	b29a      	uxth	r2, r3
 80062da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062de:	801a      	strh	r2, [r3, #0]
 80062e0:	e04f      	b.n	8006382 <USB_EPStartXfer+0x155e>
 80062e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e6:	085b      	lsrs	r3, r3, #1
 80062e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d004      	beq.n	8006302 <USB_EPStartXfer+0x14de>
 80062f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062fc:	3301      	adds	r3, #1
 80062fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006302:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29a      	uxth	r2, r3
 800630a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800630e:	b29b      	uxth	r3, r3
 8006310:	029b      	lsls	r3, r3, #10
 8006312:	b29b      	uxth	r3, r3
 8006314:	4313      	orrs	r3, r2
 8006316:	b29a      	uxth	r2, r3
 8006318:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	e030      	b.n	8006382 <USB_EPStartXfer+0x155e>
 8006320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	785b      	ldrb	r3, [r3, #1]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d128      	bne.n	8006382 <USB_EPStartXfer+0x155e>
 8006330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800633e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634c:	b29b      	uxth	r3, r3
 800634e:	461a      	mov	r2, r3
 8006350:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006354:	4413      	add	r3, r2
 8006356:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800635a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	011a      	lsls	r2, r3, #4
 8006368:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800636c:	4413      	add	r3, r2
 800636e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006372:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800637a:	b29a      	uxth	r2, r3
 800637c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006380:	801a      	strh	r2, [r3, #0]
 8006382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006386:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	785b      	ldrb	r3, [r3, #1]
 800639c:	2b00      	cmp	r3, #0
 800639e:	f040 8085 	bne.w	80064ac <USB_EPStartXfer+0x1688>
 80063a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80063b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063be:	b29b      	uxth	r3, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063c6:	4413      	add	r3, r2
 80063c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80063cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	011a      	lsls	r2, r3, #4
 80063da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063de:	4413      	add	r3, r2
 80063e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063fa:	801a      	strh	r2, [r3, #0]
 80063fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006400:	2b3e      	cmp	r3, #62	; 0x3e
 8006402:	d923      	bls.n	800644c <USB_EPStartXfer+0x1628>
 8006404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006408:	095b      	lsrs	r3, r3, #5
 800640a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800640e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006412:	f003 031f 	and.w	r3, r3, #31
 8006416:	2b00      	cmp	r3, #0
 8006418:	d104      	bne.n	8006424 <USB_EPStartXfer+0x1600>
 800641a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800641e:	3b01      	subs	r3, #1
 8006420:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006424:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	b29a      	uxth	r2, r3
 800642c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006430:	b29b      	uxth	r3, r3
 8006432:	029b      	lsls	r3, r3, #10
 8006434:	b29b      	uxth	r3, r3
 8006436:	4313      	orrs	r3, r2
 8006438:	b29b      	uxth	r3, r3
 800643a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006442:	b29a      	uxth	r2, r3
 8006444:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006448:	801a      	strh	r2, [r3, #0]
 800644a:	e05c      	b.n	8006506 <USB_EPStartXfer+0x16e2>
 800644c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10c      	bne.n	800646e <USB_EPStartXfer+0x164a>
 8006454:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	b29b      	uxth	r3, r3
 800645c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006464:	b29a      	uxth	r2, r3
 8006466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800646a:	801a      	strh	r2, [r3, #0]
 800646c:	e04b      	b.n	8006506 <USB_EPStartXfer+0x16e2>
 800646e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006472:	085b      	lsrs	r3, r3, #1
 8006474:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d004      	beq.n	800648e <USB_EPStartXfer+0x166a>
 8006484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006488:	3301      	adds	r3, #1
 800648a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800648e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	b29a      	uxth	r2, r3
 8006496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800649a:	b29b      	uxth	r3, r3
 800649c:	029b      	lsls	r3, r3, #10
 800649e:	b29b      	uxth	r3, r3
 80064a0:	4313      	orrs	r3, r2
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064a8:	801a      	strh	r2, [r3, #0]
 80064aa:	e02c      	b.n	8006506 <USB_EPStartXfer+0x16e2>
 80064ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	785b      	ldrb	r3, [r3, #1]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d124      	bne.n	8006506 <USB_EPStartXfer+0x16e2>
 80064bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064d2:	4413      	add	r3, r2
 80064d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	011a      	lsls	r2, r3, #4
 80064e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064ea:	4413      	add	r3, r2
 80064ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064fe:	801a      	strh	r2, [r3, #0]
 8006500:	e001      	b.n	8006506 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e03a      	b.n	800657c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800650a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006530:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006534:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006538:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800653c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006540:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006544:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	441a      	add	r2, r3
 8006562:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800656a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800656e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006576:	b29b      	uxth	r3, r3
 8006578:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006586:	b480      	push	{r7}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d020      	beq.n	80065da <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ae:	81bb      	strh	r3, [r7, #12]
 80065b0:	89bb      	ldrh	r3, [r7, #12]
 80065b2:	f083 0310 	eor.w	r3, r3, #16
 80065b6:	81bb      	strh	r3, [r7, #12]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	89bb      	ldrh	r3, [r7, #12]
 80065c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	8013      	strh	r3, [r2, #0]
 80065d8:	e01f      	b.n	800661a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f0:	81fb      	strh	r3, [r7, #14]
 80065f2:	89fb      	ldrh	r3, [r7, #14]
 80065f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065f8:	81fb      	strh	r3, [r7, #14]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	441a      	add	r2, r3
 8006604:	89fb      	ldrh	r3, [r7, #14]
 8006606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800660a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006616:	b29b      	uxth	r3, r3
 8006618:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr

08006626 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006626:	b480      	push	{r7}
 8006628:	b087      	sub	sp, #28
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	7b1b      	ldrb	r3, [r3, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	f040 809d 	bne.w	8006774 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	785b      	ldrb	r3, [r3, #1]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d04c      	beq.n	80066dc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	823b      	strh	r3, [r7, #16]
 8006650:	8a3b      	ldrh	r3, [r7, #16]
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d01b      	beq.n	8006692 <USB_EPClearStall+0x6c>
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	b29b      	uxth	r3, r3
 8006668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006670:	81fb      	strh	r3, [r7, #14]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	441a      	add	r2, r3
 800667c:	89fb      	ldrh	r3, [r7, #14]
 800667e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800668a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800668e:	b29b      	uxth	r3, r3
 8006690:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	78db      	ldrb	r3, [r3, #3]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d06c      	beq.n	8006774 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b0:	81bb      	strh	r3, [r7, #12]
 80066b2:	89bb      	ldrh	r3, [r7, #12]
 80066b4:	f083 0320 	eor.w	r3, r3, #32
 80066b8:	81bb      	strh	r3, [r7, #12]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	441a      	add	r2, r3
 80066c4:	89bb      	ldrh	r3, [r7, #12]
 80066c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	8013      	strh	r3, [r2, #0]
 80066da:	e04b      	b.n	8006774 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	82fb      	strh	r3, [r7, #22]
 80066ea:	8afb      	ldrh	r3, [r7, #22]
 80066ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01b      	beq.n	800672c <USB_EPClearStall+0x106>
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	b29b      	uxth	r3, r3
 8006702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800670a:	82bb      	strh	r3, [r7, #20]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	441a      	add	r2, r3
 8006716:	8abb      	ldrh	r3, [r7, #20]
 8006718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800671c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006728:	b29b      	uxth	r3, r3
 800672a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	b29b      	uxth	r3, r3
 800673a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800673e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006742:	827b      	strh	r3, [r7, #18]
 8006744:	8a7b      	ldrh	r3, [r7, #18]
 8006746:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800674a:	827b      	strh	r3, [r7, #18]
 800674c:	8a7b      	ldrh	r3, [r7, #18]
 800674e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006752:	827b      	strh	r3, [r7, #18]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	441a      	add	r2, r3
 800675e:	8a7b      	ldrh	r3, [r7, #18]
 8006760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800676c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006770:	b29b      	uxth	r3, r3
 8006772:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	371c      	adds	r7, #28
 800677a:	46bd      	mov	sp, r7
 800677c:	bc80      	pop	{r7}
 800677e:	4770      	bx	lr

08006780 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d103      	bne.n	800679a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2280      	movs	r2, #128	; 0x80
 8006796:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bc80      	pop	{r7}
 80067a4:	4770      	bx	lr

080067a6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr

080067ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr

080067ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067dc:	b29b      	uxth	r3, r3
 80067de:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80067e0:	68fb      	ldr	r3, [r7, #12]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr

080067ec <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr

08006802 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006802:	b480      	push	{r7}
 8006804:	b08b      	sub	sp, #44	; 0x2c
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	4611      	mov	r1, r2
 800680e:	461a      	mov	r2, r3
 8006810:	460b      	mov	r3, r1
 8006812:	80fb      	strh	r3, [r7, #6]
 8006814:	4613      	mov	r3, r2
 8006816:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006818:	88bb      	ldrh	r3, [r7, #4]
 800681a:	3301      	adds	r3, #1
 800681c:	085b      	lsrs	r3, r3, #1
 800681e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006828:	88fb      	ldrh	r3, [r7, #6]
 800682a:	005a      	lsls	r2, r3, #1
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006834:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
 800683a:	e01e      	b.n	800687a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	3301      	adds	r3, #1
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	021b      	lsls	r3, r3, #8
 800684a:	b21a      	sxth	r2, r3
 800684c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006850:	4313      	orrs	r3, r2
 8006852:	b21b      	sxth	r3, r3
 8006854:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	8a7a      	ldrh	r2, [r7, #18]
 800685a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	3302      	adds	r3, #2
 8006860:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	3302      	adds	r3, #2
 8006866:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	3301      	adds	r3, #1
 800686c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	3301      	adds	r3, #1
 8006872:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	3b01      	subs	r3, #1
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1dd      	bne.n	800683c <USB_WritePMA+0x3a>
  }
}
 8006880:	bf00      	nop
 8006882:	bf00      	nop
 8006884:	372c      	adds	r7, #44	; 0x2c
 8006886:	46bd      	mov	sp, r7
 8006888:	bc80      	pop	{r7}
 800688a:	4770      	bx	lr

0800688c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800688c:	b480      	push	{r7}
 800688e:	b08b      	sub	sp, #44	; 0x2c
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	4611      	mov	r1, r2
 8006898:	461a      	mov	r2, r3
 800689a:	460b      	mov	r3, r1
 800689c:	80fb      	strh	r3, [r7, #6]
 800689e:	4613      	mov	r3, r2
 80068a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80068a2:	88bb      	ldrh	r3, [r7, #4]
 80068a4:	085b      	lsrs	r3, r3, #1
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	005a      	lsls	r2, r3, #1
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068be:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24
 80068c4:	e01b      	b.n	80068fe <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	3302      	adds	r3, #2
 80068d2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	3301      	adds	r3, #1
 80068e0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	0a1b      	lsrs	r3, r3, #8
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	3301      	adds	r3, #1
 80068f0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	3302      	adds	r3, #2
 80068f6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	3b01      	subs	r3, #1
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e0      	bne.n	80068c6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006904:	88bb      	ldrh	r3, [r7, #4]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	b29b      	uxth	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	b29b      	uxth	r3, r3
 8006916:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	b2da      	uxtb	r2, r3
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	701a      	strb	r2, [r3, #0]
  }
}
 8006920:	bf00      	nop
 8006922:	372c      	adds	r7, #44	; 0x2c
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr

0800692a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	460b      	mov	r3, r1
 8006934:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	7c1b      	ldrb	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d115      	bne.n	800696e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006946:	2202      	movs	r2, #2
 8006948:	2181      	movs	r1, #129	; 0x81
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 fe87 	bl	800865e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800695a:	2202      	movs	r2, #2
 800695c:	2101      	movs	r1, #1
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f001 fe7d 	bl	800865e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800696c:	e012      	b.n	8006994 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800696e:	2340      	movs	r3, #64	; 0x40
 8006970:	2202      	movs	r2, #2
 8006972:	2181      	movs	r1, #129	; 0x81
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 fe72 	bl	800865e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006980:	2340      	movs	r3, #64	; 0x40
 8006982:	2202      	movs	r2, #2
 8006984:	2101      	movs	r1, #1
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 fe69 	bl	800865e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006994:	2308      	movs	r3, #8
 8006996:	2203      	movs	r2, #3
 8006998:	2182      	movs	r1, #130	; 0x82
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fe5f 	bl	800865e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80069a6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80069aa:	f001 ff7f 	bl	80088ac <USBD_static_malloc>
 80069ae:	4602      	mov	r2, r0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d102      	bne.n	80069c6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80069c0:	2301      	movs	r3, #1
 80069c2:	73fb      	strb	r3, [r7, #15]
 80069c4:	e026      	b.n	8006a14 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069cc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2200      	movs	r2, #0
 80069dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	7c1b      	ldrb	r3, [r3, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d109      	bne.n	8006a04 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069fa:	2101      	movs	r1, #1
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 ff1f 	bl	8008840 <USBD_LL_PrepareReceive>
 8006a02:	e007      	b.n	8006a14 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a0a:	2340      	movs	r3, #64	; 0x40
 8006a0c:	2101      	movs	r1, #1
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f001 ff16 	bl	8008840 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	460b      	mov	r3, r1
 8006a28:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006a2e:	2181      	movs	r1, #129	; 0x81
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f001 fe3a 	bl	80086aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 fe33 	bl	80086aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006a4c:	2182      	movs	r1, #130	; 0x82
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 fe2b 	bl	80086aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00e      	beq.n	8006a82 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a74:	4618      	mov	r0, r3
 8006a76:	f001 ff25 	bl	80088c4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d039      	beq.n	8006b2a <USBD_CDC_Setup+0x9e>
 8006ab6:	2b20      	cmp	r3, #32
 8006ab8:	d17f      	bne.n	8006bba <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	88db      	ldrh	r3, [r3, #6]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d029      	beq.n	8006b16 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	b25b      	sxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	da11      	bge.n	8006af0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006ad8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	88d2      	ldrh	r2, [r2, #6]
 8006ade:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ae0:	6939      	ldr	r1, [r7, #16]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	88db      	ldrh	r3, [r3, #6]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 fa0a 	bl	8007f02 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006aee:	e06b      	b.n	8006bc8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	785a      	ldrb	r2, [r3, #1]
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	88db      	ldrh	r3, [r3, #6]
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b06:	6939      	ldr	r1, [r7, #16]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	88db      	ldrh	r3, [r3, #6]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f001 fa25 	bl	8007f5e <USBD_CtlPrepareRx>
      break;
 8006b14:	e058      	b.n	8006bc8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	7850      	ldrb	r0, [r2, #1]
 8006b22:	2200      	movs	r2, #0
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	4798      	blx	r3
      break;
 8006b28:	e04e      	b.n	8006bc8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	785b      	ldrb	r3, [r3, #1]
 8006b2e:	2b0b      	cmp	r3, #11
 8006b30:	d02e      	beq.n	8006b90 <USBD_CDC_Setup+0x104>
 8006b32:	2b0b      	cmp	r3, #11
 8006b34:	dc38      	bgt.n	8006ba8 <USBD_CDC_Setup+0x11c>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <USBD_CDC_Setup+0xb4>
 8006b3a:	2b0a      	cmp	r3, #10
 8006b3c:	d014      	beq.n	8006b68 <USBD_CDC_Setup+0xdc>
 8006b3e:	e033      	b.n	8006ba8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d107      	bne.n	8006b5a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b4a:	f107 030c 	add.w	r3, r7, #12
 8006b4e:	2202      	movs	r2, #2
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 f9d5 	bl	8007f02 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b58:	e02e      	b.n	8006bb8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 f966 	bl	8007e2e <USBD_CtlError>
            ret = USBD_FAIL;
 8006b62:	2302      	movs	r3, #2
 8006b64:	75fb      	strb	r3, [r7, #23]
          break;
 8006b66:	e027      	b.n	8006bb8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d107      	bne.n	8006b82 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b72:	f107 030f 	add.w	r3, r7, #15
 8006b76:	2201      	movs	r2, #1
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 f9c1 	bl	8007f02 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b80:	e01a      	b.n	8006bb8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 f952 	bl	8007e2e <USBD_CtlError>
            ret = USBD_FAIL;
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b8e:	e013      	b.n	8006bb8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	d00d      	beq.n	8006bb6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 f946 	bl	8007e2e <USBD_CtlError>
            ret = USBD_FAIL;
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ba6:	e006      	b.n	8006bb6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f001 f93f 	bl	8007e2e <USBD_CtlError>
          ret = USBD_FAIL;
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	75fb      	strb	r3, [r7, #23]
          break;
 8006bb4:	e000      	b.n	8006bb8 <USBD_CDC_Setup+0x12c>
          break;
 8006bb6:	bf00      	nop
      }
      break;
 8006bb8:	e006      	b.n	8006bc8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f001 f936 	bl	8007e2e <USBD_CtlError>
      ret = USBD_FAIL;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc6:	bf00      	nop
  }

  return ret;
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bec:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d03a      	beq.n	8006c6e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006bf8:	78fa      	ldrb	r2, [r7, #3]
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	440b      	add	r3, r1
 8006c06:	331c      	adds	r3, #28
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d029      	beq.n	8006c62 <USBD_CDC_DataIn+0x90>
 8006c0e:	78fa      	ldrb	r2, [r7, #3]
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	331c      	adds	r3, #28
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	78f9      	ldrb	r1, [r7, #3]
 8006c22:	68b8      	ldr	r0, [r7, #8]
 8006c24:	460b      	mov	r3, r1
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	440b      	add	r3, r1
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	4403      	add	r3, r0
 8006c2e:	3338      	adds	r3, #56	; 0x38
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c36:	fb01 f303 	mul.w	r3, r1, r3
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d110      	bne.n	8006c62 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006c40:	78fa      	ldrb	r2, [r7, #3]
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	4613      	mov	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	440b      	add	r3, r1
 8006c4e:	331c      	adds	r3, #28
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c54:	78f9      	ldrb	r1, [r7, #3]
 8006c56:	2300      	movs	r3, #0
 8006c58:	2200      	movs	r2, #0
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 fdcd 	bl	80087fa <USBD_LL_Transmit>
 8006c60:	e003      	b.n	8006c6a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e000      	b.n	8006c70 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006c6e:	2302      	movs	r3, #2
  }
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c8c:	78fb      	ldrb	r3, [r7, #3]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 fdf8 	bl	8008886 <USBD_LL_GetRxDataSize>
 8006c96:	4602      	mov	r2, r0
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00d      	beq.n	8006cc4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	4798      	blx	r3

    return USBD_OK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e000      	b.n	8006cc6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006cc4:	2302      	movs	r3, #2
  }
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cdc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d015      	beq.n	8006d14 <USBD_CDC_EP0_RxReady+0x46>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006cee:	2bff      	cmp	r3, #255	; 0xff
 8006cf0:	d010      	beq.n	8006d14 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006d00:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d08:	b292      	uxth	r2, r2
 8006d0a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	22ff      	movs	r2, #255	; 0xff
 8006d10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
	...

08006d20 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2243      	movs	r2, #67	; 0x43
 8006d2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006d2e:	4b03      	ldr	r3, [pc, #12]	; (8006d3c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	20000094 	.word	0x20000094

08006d40 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2243      	movs	r2, #67	; 0x43
 8006d4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006d4e:	4b03      	ldr	r3, [pc, #12]	; (8006d5c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bc80      	pop	{r7}
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	20000050 	.word	0x20000050

08006d60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2243      	movs	r2, #67	; 0x43
 8006d6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006d6e:	4b03      	ldr	r3, [pc, #12]	; (8006d7c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bc80      	pop	{r7}
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	200000d8 	.word	0x200000d8

08006d80 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	220a      	movs	r2, #10
 8006d8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006d8e:	4b03      	ldr	r3, [pc, #12]	; (8006d9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	2000000c 	.word	0x2000000c

08006da0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006daa:	2302      	movs	r3, #2
 8006dac:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d005      	beq.n	8006dc0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bc80      	pop	{r7}
 8006dca:	4770      	bx	lr

08006dcc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006dea:	88fa      	ldrh	r2, [r7, #6]
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr

08006dfe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b085      	sub	sp, #20
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bc80      	pop	{r7}
 8006e22:	4770      	bx	lr

08006e24 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d01c      	beq.n	8006e78 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d115      	bne.n	8006e74 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2181      	movs	r1, #129	; 0x81
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 fcc5 	bl	80087fa <USBD_LL_Transmit>

      return USBD_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	e002      	b.n	8006e7a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e000      	b.n	8006e7a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006e78:	2302      	movs	r3, #2
  }
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d017      	beq.n	8006ecc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	7c1b      	ldrb	r3, [r3, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d109      	bne.n	8006eb8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eae:	2101      	movs	r1, #1
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 fcc5 	bl	8008840 <USBD_LL_PrepareReceive>
 8006eb6:	e007      	b.n	8006ec8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ebe:	2340      	movs	r3, #64	; 0x40
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f001 fcbc 	bl	8008840 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	e000      	b.n	8006ece <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006ecc:	2302      	movs	r3, #2
  }
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006eea:	2302      	movs	r3, #2
 8006eec:	e01a      	b.n	8006f24 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	79fa      	ldrb	r2, [r7, #7]
 8006f1a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f001 fb29 	bl	8008574 <USBD_LL_Init>

  return USBD_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d006      	beq.n	8006f4e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	73fb      	strb	r3, [r7, #15]
 8006f4c:	e001      	b.n	8006f52 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006f4e:	2302      	movs	r3, #2
 8006f50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr

08006f5e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b082      	sub	sp, #8
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 fb5e 	bl	8008628 <USBD_LL_Start>

  return USBD_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bc80      	pop	{r7}
 8006f88:	4770      	bx	lr

08006f8a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	460b      	mov	r3, r1
 8006f94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f96:	2302      	movs	r3, #2
 8006f98:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00c      	beq.n	8006fbe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	78fa      	ldrb	r2, [r7, #3]
 8006fae:	4611      	mov	r1, r2
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	4798      	blx	r3
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	78fa      	ldrb	r2, [r7, #3]
 8006fde:	4611      	mov	r1, r2
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3

  return USBD_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	4618      	mov	r0, r3
 8007002:	f000 fed8 	bl	8007db6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007014:	461a      	mov	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007022:	f003 031f 	and.w	r3, r3, #31
 8007026:	2b02      	cmp	r3, #2
 8007028:	d016      	beq.n	8007058 <USBD_LL_SetupStage+0x6a>
 800702a:	2b02      	cmp	r3, #2
 800702c:	d81c      	bhi.n	8007068 <USBD_LL_SetupStage+0x7a>
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <USBD_LL_SetupStage+0x4a>
 8007032:	2b01      	cmp	r3, #1
 8007034:	d008      	beq.n	8007048 <USBD_LL_SetupStage+0x5a>
 8007036:	e017      	b.n	8007068 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800703e:	4619      	mov	r1, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f9cb 	bl	80073dc <USBD_StdDevReq>
      break;
 8007046:	e01a      	b.n	800707e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fa2d 	bl	80074b0 <USBD_StdItfReq>
      break;
 8007056:	e012      	b.n	800707e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fa6d 	bl	8007540 <USBD_StdEPReq>
      break;
 8007066:	e00a      	b.n	800707e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800706e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007072:	b2db      	uxtb	r3, r3
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 fb36 	bl	80086e8 <USBD_LL_StallEP>
      break;
 800707c:	bf00      	nop
  }

  return USBD_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	460b      	mov	r3, r1
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007096:	7afb      	ldrb	r3, [r7, #11]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d14b      	bne.n	8007134 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80070a2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d134      	bne.n	8007118 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d919      	bls.n	80070ee <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	1ad2      	subs	r2, r2, r3
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d203      	bcs.n	80070dc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80070d8:	b29b      	uxth	r3, r3
 80070da:	e002      	b.n	80070e2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	461a      	mov	r2, r3
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f000 ff57 	bl	8007f9a <USBD_CtlContinueRx>
 80070ec:	e038      	b.n	8007160 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00a      	beq.n	8007110 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007100:	2b03      	cmp	r3, #3
 8007102:	d105      	bne.n	8007110 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 ff54 	bl	8007fbe <USBD_CtlSendStatus>
 8007116:	e023      	b.n	8007160 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800711e:	2b05      	cmp	r3, #5
 8007120:	d11e      	bne.n	8007160 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800712a:	2100      	movs	r1, #0
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f001 fadb 	bl	80086e8 <USBD_LL_StallEP>
 8007132:	e015      	b.n	8007160 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00d      	beq.n	800715c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007146:	2b03      	cmp	r3, #3
 8007148:	d108      	bne.n	800715c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	7afa      	ldrb	r2, [r7, #11]
 8007154:	4611      	mov	r1, r2
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	4798      	blx	r3
 800715a:	e001      	b.n	8007160 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800715c:	2302      	movs	r3, #2
 800715e:	e000      	b.n	8007162 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b086      	sub	sp, #24
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	460b      	mov	r3, r1
 8007174:	607a      	str	r2, [r7, #4]
 8007176:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007178:	7afb      	ldrb	r3, [r7, #11]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d17f      	bne.n	800727e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3314      	adds	r3, #20
 8007182:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800718a:	2b02      	cmp	r3, #2
 800718c:	d15c      	bne.n	8007248 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	429a      	cmp	r2, r3
 8007198:	d915      	bls.n	80071c6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	1ad2      	subs	r2, r2, r3
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	461a      	mov	r2, r3
 80071b0:	6879      	ldr	r1, [r7, #4]
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 fec1 	bl	8007f3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071b8:	2300      	movs	r3, #0
 80071ba:	2200      	movs	r2, #0
 80071bc:	2100      	movs	r1, #0
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f001 fb3e 	bl	8008840 <USBD_LL_PrepareReceive>
 80071c4:	e04e      	b.n	8007264 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	6912      	ldr	r2, [r2, #16]
 80071ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80071d2:	fb01 f202 	mul.w	r2, r1, r2
 80071d6:	1a9b      	subs	r3, r3, r2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d11c      	bne.n	8007216 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d316      	bcc.n	8007216 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d20f      	bcs.n	8007216 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80071f6:	2200      	movs	r2, #0
 80071f8:	2100      	movs	r1, #0
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 fe9d 	bl	8007f3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007208:	2300      	movs	r3, #0
 800720a:	2200      	movs	r2, #0
 800720c:	2100      	movs	r1, #0
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f001 fb16 	bl	8008840 <USBD_LL_PrepareReceive>
 8007214:	e026      	b.n	8007264 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007228:	2b03      	cmp	r3, #3
 800722a:	d105      	bne.n	8007238 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007238:	2180      	movs	r1, #128	; 0x80
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f001 fa54 	bl	80086e8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 fecf 	bl	8007fe4 <USBD_CtlReceiveStatus>
 8007246:	e00d      	b.n	8007264 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800724e:	2b04      	cmp	r3, #4
 8007250:	d004      	beq.n	800725c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007258:	2b00      	cmp	r3, #0
 800725a:	d103      	bne.n	8007264 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800725c:	2180      	movs	r1, #128	; 0x80
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f001 fa42 	bl	80086e8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800726a:	2b01      	cmp	r3, #1
 800726c:	d11d      	bne.n	80072aa <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7ff fe81 	bl	8006f76 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800727c:	e015      	b.n	80072aa <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00d      	beq.n	80072a6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007290:	2b03      	cmp	r3, #3
 8007292:	d108      	bne.n	80072a6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	7afa      	ldrb	r2, [r7, #11]
 800729e:	4611      	mov	r1, r2
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	4798      	blx	r3
 80072a4:	e001      	b.n	80072aa <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80072a6:	2302      	movs	r3, #2
 80072a8:	e000      	b.n	80072ac <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072bc:	2340      	movs	r3, #64	; 0x40
 80072be:	2200      	movs	r2, #0
 80072c0:	2100      	movs	r1, #0
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 f9cb 	bl	800865e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2240      	movs	r2, #64	; 0x40
 80072d4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072d8:	2340      	movs	r3, #64	; 0x40
 80072da:	2200      	movs	r2, #0
 80072dc:	2180      	movs	r1, #128	; 0x80
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 f9bd 	bl	800865e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2240      	movs	r2, #64	; 0x40
 80072ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007314:	2b00      	cmp	r3, #0
 8007316:	d009      	beq.n	800732c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	6852      	ldr	r2, [r2, #4]
 8007324:	b2d2      	uxtb	r2, r2
 8007326:	4611      	mov	r1, r2
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	4798      	blx	r3
  }

  return USBD_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	460b      	mov	r3, r1
 8007340:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	78fa      	ldrb	r2, [r7, #3]
 8007346:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	bc80      	pop	{r7}
 8007352:	4770      	bx	lr

08007354 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2204      	movs	r2, #4
 800736c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	bc80      	pop	{r7}
 800737a:	4770      	bx	lr

0800737c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800738a:	2b04      	cmp	r3, #4
 800738c:	d105      	bne.n	800739a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bc80      	pop	{r7}
 80073a4:	4770      	bx	lr

080073a6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b082      	sub	sp, #8
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d10b      	bne.n	80073d0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d005      	beq.n	80073d0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073f2:	2b40      	cmp	r3, #64	; 0x40
 80073f4:	d005      	beq.n	8007402 <USBD_StdDevReq+0x26>
 80073f6:	2b40      	cmp	r3, #64	; 0x40
 80073f8:	d84f      	bhi.n	800749a <USBD_StdDevReq+0xbe>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d009      	beq.n	8007412 <USBD_StdDevReq+0x36>
 80073fe:	2b20      	cmp	r3, #32
 8007400:	d14b      	bne.n	800749a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	4798      	blx	r3
      break;
 8007410:	e048      	b.n	80074a4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	785b      	ldrb	r3, [r3, #1]
 8007416:	2b09      	cmp	r3, #9
 8007418:	d839      	bhi.n	800748e <USBD_StdDevReq+0xb2>
 800741a:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <USBD_StdDevReq+0x44>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007471 	.word	0x08007471
 8007424:	08007485 	.word	0x08007485
 8007428:	0800748f 	.word	0x0800748f
 800742c:	0800747b 	.word	0x0800747b
 8007430:	0800748f 	.word	0x0800748f
 8007434:	08007453 	.word	0x08007453
 8007438:	08007449 	.word	0x08007449
 800743c:	0800748f 	.word	0x0800748f
 8007440:	08007467 	.word	0x08007467
 8007444:	0800745d 	.word	0x0800745d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f9dc 	bl	8007808 <USBD_GetDescriptor>
          break;
 8007450:	e022      	b.n	8007498 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fb3f 	bl	8007ad8 <USBD_SetAddress>
          break;
 800745a:	e01d      	b.n	8007498 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fb7e 	bl	8007b60 <USBD_SetConfig>
          break;
 8007464:	e018      	b.n	8007498 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fc07 	bl	8007c7c <USBD_GetConfig>
          break;
 800746e:	e013      	b.n	8007498 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fc37 	bl	8007ce6 <USBD_GetStatus>
          break;
 8007478:	e00e      	b.n	8007498 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fc65 	bl	8007d4c <USBD_SetFeature>
          break;
 8007482:	e009      	b.n	8007498 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fc74 	bl	8007d74 <USBD_ClrFeature>
          break;
 800748c:	e004      	b.n	8007498 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fccc 	bl	8007e2e <USBD_CtlError>
          break;
 8007496:	bf00      	nop
      }
      break;
 8007498:	e004      	b.n	80074a4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fcc6 	bl	8007e2e <USBD_CtlError>
      break;
 80074a2:	bf00      	nop
  }

  return ret;
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop

080074b0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	d005      	beq.n	80074d6 <USBD_StdItfReq+0x26>
 80074ca:	2b40      	cmp	r3, #64	; 0x40
 80074cc:	d82e      	bhi.n	800752c <USBD_StdItfReq+0x7c>
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <USBD_StdItfReq+0x26>
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	d12a      	bne.n	800752c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074dc:	3b01      	subs	r3, #1
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d81d      	bhi.n	800751e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	889b      	ldrh	r3, [r3, #4]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d813      	bhi.n	8007514 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	4798      	blx	r3
 80074fa:	4603      	mov	r3, r0
 80074fc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	88db      	ldrh	r3, [r3, #6]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d110      	bne.n	8007528 <USBD_StdItfReq+0x78>
 8007506:	7bfb      	ldrb	r3, [r7, #15]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10d      	bne.n	8007528 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fd56 	bl	8007fbe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007512:	e009      	b.n	8007528 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fc89 	bl	8007e2e <USBD_CtlError>
          break;
 800751c:	e004      	b.n	8007528 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fc84 	bl	8007e2e <USBD_CtlError>
          break;
 8007526:	e000      	b.n	800752a <USBD_StdItfReq+0x7a>
          break;
 8007528:	bf00      	nop
      }
      break;
 800752a:	e004      	b.n	8007536 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fc7d 	bl	8007e2e <USBD_CtlError>
      break;
 8007534:	bf00      	nop
  }

  return USBD_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	889b      	ldrh	r3, [r3, #4]
 8007552:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800755c:	2b40      	cmp	r3, #64	; 0x40
 800755e:	d007      	beq.n	8007570 <USBD_StdEPReq+0x30>
 8007560:	2b40      	cmp	r3, #64	; 0x40
 8007562:	f200 8146 	bhi.w	80077f2 <USBD_StdEPReq+0x2b2>
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00a      	beq.n	8007580 <USBD_StdEPReq+0x40>
 800756a:	2b20      	cmp	r3, #32
 800756c:	f040 8141 	bne.w	80077f2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	4798      	blx	r3
      break;
 800757e:	e13d      	b.n	80077fc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007588:	2b20      	cmp	r3, #32
 800758a:	d10a      	bne.n	80075a2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	4798      	blx	r3
 800759a:	4603      	mov	r3, r0
 800759c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800759e:	7bfb      	ldrb	r3, [r7, #15]
 80075a0:	e12d      	b.n	80077fe <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	785b      	ldrb	r3, [r3, #1]
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d007      	beq.n	80075ba <USBD_StdEPReq+0x7a>
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	f300 811b 	bgt.w	80077e6 <USBD_StdEPReq+0x2a6>
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d072      	beq.n	800769a <USBD_StdEPReq+0x15a>
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d03a      	beq.n	800762e <USBD_StdEPReq+0xee>
 80075b8:	e115      	b.n	80077e6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d002      	beq.n	80075ca <USBD_StdEPReq+0x8a>
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d015      	beq.n	80075f4 <USBD_StdEPReq+0xb4>
 80075c8:	e02b      	b.n	8007622 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00c      	beq.n	80075ea <USBD_StdEPReq+0xaa>
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
 80075d2:	2b80      	cmp	r3, #128	; 0x80
 80075d4:	d009      	beq.n	80075ea <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80075d6:	7bbb      	ldrb	r3, [r7, #14]
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f001 f884 	bl	80086e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80075e0:	2180      	movs	r1, #128	; 0x80
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f001 f880 	bl	80086e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075e8:	e020      	b.n	800762c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fc1e 	bl	8007e2e <USBD_CtlError>
              break;
 80075f2:	e01b      	b.n	800762c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	885b      	ldrh	r3, [r3, #2]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10e      	bne.n	800761a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00b      	beq.n	800761a <USBD_StdEPReq+0xda>
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	2b80      	cmp	r3, #128	; 0x80
 8007606:	d008      	beq.n	800761a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	88db      	ldrh	r3, [r3, #6]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d104      	bne.n	800761a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007610:	7bbb      	ldrb	r3, [r7, #14]
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f001 f867 	bl	80086e8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fccf 	bl	8007fbe <USBD_CtlSendStatus>

              break;
 8007620:	e004      	b.n	800762c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fc02 	bl	8007e2e <USBD_CtlError>
              break;
 800762a:	bf00      	nop
          }
          break;
 800762c:	e0e0      	b.n	80077f0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007634:	2b02      	cmp	r3, #2
 8007636:	d002      	beq.n	800763e <USBD_StdEPReq+0xfe>
 8007638:	2b03      	cmp	r3, #3
 800763a:	d015      	beq.n	8007668 <USBD_StdEPReq+0x128>
 800763c:	e026      	b.n	800768c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00c      	beq.n	800765e <USBD_StdEPReq+0x11e>
 8007644:	7bbb      	ldrb	r3, [r7, #14]
 8007646:	2b80      	cmp	r3, #128	; 0x80
 8007648:	d009      	beq.n	800765e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800764a:	7bbb      	ldrb	r3, [r7, #14]
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f001 f84a 	bl	80086e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007654:	2180      	movs	r1, #128	; 0x80
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 f846 	bl	80086e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800765c:	e01c      	b.n	8007698 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fbe4 	bl	8007e2e <USBD_CtlError>
              break;
 8007666:	e017      	b.n	8007698 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	885b      	ldrh	r3, [r3, #2]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d112      	bne.n	8007696 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007676:	2b00      	cmp	r3, #0
 8007678:	d004      	beq.n	8007684 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 f851 	bl	8008726 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fc9a 	bl	8007fbe <USBD_CtlSendStatus>
              }
              break;
 800768a:	e004      	b.n	8007696 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fbcd 	bl	8007e2e <USBD_CtlError>
              break;
 8007694:	e000      	b.n	8007698 <USBD_StdEPReq+0x158>
              break;
 8007696:	bf00      	nop
          }
          break;
 8007698:	e0aa      	b.n	80077f0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d002      	beq.n	80076aa <USBD_StdEPReq+0x16a>
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d032      	beq.n	800770e <USBD_StdEPReq+0x1ce>
 80076a8:	e097      	b.n	80077da <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d007      	beq.n	80076c0 <USBD_StdEPReq+0x180>
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	2b80      	cmp	r3, #128	; 0x80
 80076b4:	d004      	beq.n	80076c0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fbb8 	bl	8007e2e <USBD_CtlError>
                break;
 80076be:	e091      	b.n	80077e4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	da0b      	bge.n	80076e0 <USBD_StdEPReq+0x1a0>
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ce:	4613      	mov	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	3310      	adds	r3, #16
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	4413      	add	r3, r2
 80076dc:	3304      	adds	r3, #4
 80076de:	e00b      	b.n	80076f8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076e6:	4613      	mov	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	4413      	add	r3, r2
 80076f6:	3304      	adds	r3, #4
 80076f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2202      	movs	r2, #2
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fbfb 	bl	8007f02 <USBD_CtlSendData>
              break;
 800770c:	e06a      	b.n	80077e4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800770e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007712:	2b00      	cmp	r3, #0
 8007714:	da11      	bge.n	800773a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	f003 020f 	and.w	r2, r3, #15
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	440b      	add	r3, r1
 8007728:	3318      	adds	r3, #24
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d117      	bne.n	8007760 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fb7b 	bl	8007e2e <USBD_CtlError>
                  break;
 8007738:	e054      	b.n	80077e4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800773a:	7bbb      	ldrb	r3, [r7, #14]
 800773c:	f003 020f 	and.w	r2, r3, #15
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	440b      	add	r3, r1
 800774c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d104      	bne.n	8007760 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fb68 	bl	8007e2e <USBD_CtlError>
                  break;
 800775e:	e041      	b.n	80077e4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007764:	2b00      	cmp	r3, #0
 8007766:	da0b      	bge.n	8007780 <USBD_StdEPReq+0x240>
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	3310      	adds	r3, #16
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	4413      	add	r3, r2
 800777c:	3304      	adds	r3, #4
 800777e:	e00b      	b.n	8007798 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007786:	4613      	mov	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	4413      	add	r3, r2
 8007796:	3304      	adds	r3, #4
 8007798:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <USBD_StdEPReq+0x266>
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	2b80      	cmp	r3, #128	; 0x80
 80077a4:	d103      	bne.n	80077ae <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	e00e      	b.n	80077cc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 ffd6 	bl	8008764 <USBD_LL_IsStallEP>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2201      	movs	r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	e002      	b.n	80077cc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2202      	movs	r2, #2
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fb95 	bl	8007f02 <USBD_CtlSendData>
              break;
 80077d8:	e004      	b.n	80077e4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fb26 	bl	8007e2e <USBD_CtlError>
              break;
 80077e2:	bf00      	nop
          }
          break;
 80077e4:	e004      	b.n	80077f0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fb20 	bl	8007e2e <USBD_CtlError>
          break;
 80077ee:	bf00      	nop
      }
      break;
 80077f0:	e004      	b.n	80077fc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fb1a 	bl	8007e2e <USBD_CtlError>
      break;
 80077fa:	bf00      	nop
  }

  return ret;
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	885b      	ldrh	r3, [r3, #2]
 8007822:	0a1b      	lsrs	r3, r3, #8
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	2b06      	cmp	r3, #6
 800782a:	f200 8128 	bhi.w	8007a7e <USBD_GetDescriptor+0x276>
 800782e:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <USBD_GetDescriptor+0x2c>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	08007851 	.word	0x08007851
 8007838:	08007869 	.word	0x08007869
 800783c:	080078a9 	.word	0x080078a9
 8007840:	08007a7f 	.word	0x08007a7f
 8007844:	08007a7f 	.word	0x08007a7f
 8007848:	08007a1f 	.word	0x08007a1f
 800784c:	08007a4b 	.word	0x08007a4b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	7c12      	ldrb	r2, [r2, #16]
 800785c:	f107 0108 	add.w	r1, r7, #8
 8007860:	4610      	mov	r0, r2
 8007862:	4798      	blx	r3
 8007864:	60f8      	str	r0, [r7, #12]
      break;
 8007866:	e112      	b.n	8007a8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	7c1b      	ldrb	r3, [r3, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10d      	bne.n	800788c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007878:	f107 0208 	add.w	r2, r7, #8
 800787c:	4610      	mov	r0, r2
 800787e:	4798      	blx	r3
 8007880:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3301      	adds	r3, #1
 8007886:	2202      	movs	r2, #2
 8007888:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800788a:	e100      	b.n	8007a8e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007894:	f107 0208 	add.w	r2, r7, #8
 8007898:	4610      	mov	r0, r2
 800789a:	4798      	blx	r3
 800789c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3301      	adds	r3, #1
 80078a2:	2202      	movs	r2, #2
 80078a4:	701a      	strb	r2, [r3, #0]
      break;
 80078a6:	e0f2      	b.n	8007a8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	885b      	ldrh	r3, [r3, #2]
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b05      	cmp	r3, #5
 80078b0:	f200 80ac 	bhi.w	8007a0c <USBD_GetDescriptor+0x204>
 80078b4:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <USBD_GetDescriptor+0xb4>)
 80078b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ba:	bf00      	nop
 80078bc:	080078d5 	.word	0x080078d5
 80078c0:	08007909 	.word	0x08007909
 80078c4:	0800793d 	.word	0x0800793d
 80078c8:	08007971 	.word	0x08007971
 80078cc:	080079a5 	.word	0x080079a5
 80078d0:	080079d9 	.word	0x080079d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	7c12      	ldrb	r2, [r2, #16]
 80078ec:	f107 0108 	add.w	r1, r7, #8
 80078f0:	4610      	mov	r0, r2
 80078f2:	4798      	blx	r3
 80078f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078f6:	e091      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fa97 	bl	8007e2e <USBD_CtlError>
            err++;
 8007900:	7afb      	ldrb	r3, [r7, #11]
 8007902:	3301      	adds	r3, #1
 8007904:	72fb      	strb	r3, [r7, #11]
          break;
 8007906:	e089      	b.n	8007a1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	7c12      	ldrb	r2, [r2, #16]
 8007920:	f107 0108 	add.w	r1, r7, #8
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800792a:	e077      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fa7d 	bl	8007e2e <USBD_CtlError>
            err++;
 8007934:	7afb      	ldrb	r3, [r7, #11]
 8007936:	3301      	adds	r3, #1
 8007938:	72fb      	strb	r3, [r7, #11]
          break;
 800793a:	e06f      	b.n	8007a1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00b      	beq.n	8007960 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	7c12      	ldrb	r2, [r2, #16]
 8007954:	f107 0108 	add.w	r1, r7, #8
 8007958:	4610      	mov	r0, r2
 800795a:	4798      	blx	r3
 800795c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800795e:	e05d      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fa63 	bl	8007e2e <USBD_CtlError>
            err++;
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	3301      	adds	r3, #1
 800796c:	72fb      	strb	r3, [r7, #11]
          break;
 800796e:	e055      	b.n	8007a1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	7c12      	ldrb	r2, [r2, #16]
 8007988:	f107 0108 	add.w	r1, r7, #8
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
 8007990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007992:	e043      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa49 	bl	8007e2e <USBD_CtlError>
            err++;
 800799c:	7afb      	ldrb	r3, [r7, #11]
 800799e:	3301      	adds	r3, #1
 80079a0:	72fb      	strb	r3, [r7, #11]
          break;
 80079a2:	e03b      	b.n	8007a1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	7c12      	ldrb	r2, [r2, #16]
 80079bc:	f107 0108 	add.w	r1, r7, #8
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
 80079c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c6:	e029      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa2f 	bl	8007e2e <USBD_CtlError>
            err++;
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	3301      	adds	r3, #1
 80079d4:	72fb      	strb	r3, [r7, #11]
          break;
 80079d6:	e021      	b.n	8007a1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	7c12      	ldrb	r2, [r2, #16]
 80079f0:	f107 0108 	add.w	r1, r7, #8
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079fa:	e00f      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fa15 	bl	8007e2e <USBD_CtlError>
            err++;
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	3301      	adds	r3, #1
 8007a08:	72fb      	strb	r3, [r7, #11]
          break;
 8007a0a:	e007      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fa0d 	bl	8007e2e <USBD_CtlError>
          err++;
 8007a14:	7afb      	ldrb	r3, [r7, #11]
 8007a16:	3301      	adds	r3, #1
 8007a18:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007a1a:	e038      	b.n	8007a8e <USBD_GetDescriptor+0x286>
 8007a1c:	e037      	b.n	8007a8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	7c1b      	ldrb	r3, [r3, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d109      	bne.n	8007a3a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2e:	f107 0208 	add.w	r2, r7, #8
 8007a32:	4610      	mov	r0, r2
 8007a34:	4798      	blx	r3
 8007a36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a38:	e029      	b.n	8007a8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f9f6 	bl	8007e2e <USBD_CtlError>
        err++;
 8007a42:	7afb      	ldrb	r3, [r7, #11]
 8007a44:	3301      	adds	r3, #1
 8007a46:	72fb      	strb	r3, [r7, #11]
      break;
 8007a48:	e021      	b.n	8007a8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	7c1b      	ldrb	r3, [r3, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10d      	bne.n	8007a6e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	f107 0208 	add.w	r2, r7, #8
 8007a5e:	4610      	mov	r0, r2
 8007a60:	4798      	blx	r3
 8007a62:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3301      	adds	r3, #1
 8007a68:	2207      	movs	r2, #7
 8007a6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a6c:	e00f      	b.n	8007a8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f9dc 	bl	8007e2e <USBD_CtlError>
        err++;
 8007a76:	7afb      	ldrb	r3, [r7, #11]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a7c:	e007      	b.n	8007a8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f9d4 	bl	8007e2e <USBD_CtlError>
      err++;
 8007a86:	7afb      	ldrb	r3, [r7, #11]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a8c:	bf00      	nop
  }

  if (err != 0U)
 8007a8e:	7afb      	ldrb	r3, [r7, #11]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d11c      	bne.n	8007ace <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007a94:	893b      	ldrh	r3, [r7, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d011      	beq.n	8007abe <USBD_GetDescriptor+0x2b6>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	88db      	ldrh	r3, [r3, #6]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00d      	beq.n	8007abe <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	88da      	ldrh	r2, [r3, #6]
 8007aa6:	893b      	ldrh	r3, [r7, #8]
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	bf28      	it	cs
 8007aac:	4613      	movcs	r3, r2
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ab2:	893b      	ldrh	r3, [r7, #8]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	68f9      	ldr	r1, [r7, #12]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fa22 	bl	8007f02 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	88db      	ldrh	r3, [r3, #6]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d104      	bne.n	8007ad0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fa79 	bl	8007fbe <USBD_CtlSendStatus>
 8007acc:	e000      	b.n	8007ad0 <USBD_GetDescriptor+0x2c8>
    return;
 8007ace:	bf00      	nop
    }
  }
}
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop

08007ad8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	889b      	ldrh	r3, [r3, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d130      	bne.n	8007b4c <USBD_SetAddress+0x74>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	88db      	ldrh	r3, [r3, #6]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d12c      	bne.n	8007b4c <USBD_SetAddress+0x74>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	885b      	ldrh	r3, [r3, #2]
 8007af6:	2b7f      	cmp	r3, #127	; 0x7f
 8007af8:	d828      	bhi.n	8007b4c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	885b      	ldrh	r3, [r3, #2]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0c:	2b03      	cmp	r3, #3
 8007b0e:	d104      	bne.n	8007b1a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f98b 	bl	8007e2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b18:	e01d      	b.n	8007b56 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	7bfa      	ldrb	r2, [r7, #15]
 8007b1e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fe48 	bl	80087bc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fa46 	bl	8007fbe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b40:	e009      	b.n	8007b56 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b4a:	e004      	b.n	8007b56 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f96d 	bl	8007e2e <USBD_CtlError>
  }
}
 8007b54:	bf00      	nop
 8007b56:	bf00      	nop
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	885b      	ldrh	r3, [r3, #2]
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	4b41      	ldr	r3, [pc, #260]	; (8007c78 <USBD_SetConfig+0x118>)
 8007b72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b74:	4b40      	ldr	r3, [pc, #256]	; (8007c78 <USBD_SetConfig+0x118>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d904      	bls.n	8007b86 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f955 	bl	8007e2e <USBD_CtlError>
 8007b84:	e075      	b.n	8007c72 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d002      	beq.n	8007b96 <USBD_SetConfig+0x36>
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d023      	beq.n	8007bdc <USBD_SetConfig+0x7c>
 8007b94:	e062      	b.n	8007c5c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007b96:	4b38      	ldr	r3, [pc, #224]	; (8007c78 <USBD_SetConfig+0x118>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d01a      	beq.n	8007bd4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007b9e:	4b36      	ldr	r3, [pc, #216]	; (8007c78 <USBD_SetConfig+0x118>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2203      	movs	r2, #3
 8007bac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007bb0:	4b31      	ldr	r3, [pc, #196]	; (8007c78 <USBD_SetConfig+0x118>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7ff f9e7 	bl	8006f8a <USBD_SetClassConfig>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d104      	bne.n	8007bcc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f932 	bl	8007e2e <USBD_CtlError>
            return;
 8007bca:	e052      	b.n	8007c72 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f9f6 	bl	8007fbe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007bd2:	e04e      	b.n	8007c72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f9f2 	bl	8007fbe <USBD_CtlSendStatus>
        break;
 8007bda:	e04a      	b.n	8007c72 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007bdc:	4b26      	ldr	r3, [pc, #152]	; (8007c78 <USBD_SetConfig+0x118>)
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d112      	bne.n	8007c0a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007bec:	4b22      	ldr	r3, [pc, #136]	; (8007c78 <USBD_SetConfig+0x118>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007bf6:	4b20      	ldr	r3, [pc, #128]	; (8007c78 <USBD_SetConfig+0x118>)
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7ff f9e3 	bl	8006fc8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f9db 	bl	8007fbe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c08:	e033      	b.n	8007c72 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007c0a:	4b1b      	ldr	r3, [pc, #108]	; (8007c78 <USBD_SetConfig+0x118>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d01d      	beq.n	8007c54 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7ff f9d1 	bl	8006fc8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007c26:	4b14      	ldr	r3, [pc, #80]	; (8007c78 <USBD_SetConfig+0x118>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c30:	4b11      	ldr	r3, [pc, #68]	; (8007c78 <USBD_SetConfig+0x118>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7ff f9a7 	bl	8006f8a <USBD_SetClassConfig>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d104      	bne.n	8007c4c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f8f2 	bl	8007e2e <USBD_CtlError>
            return;
 8007c4a:	e012      	b.n	8007c72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f9b6 	bl	8007fbe <USBD_CtlSendStatus>
        break;
 8007c52:	e00e      	b.n	8007c72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f9b2 	bl	8007fbe <USBD_CtlSendStatus>
        break;
 8007c5a:	e00a      	b.n	8007c72 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f8e5 	bl	8007e2e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007c64:	4b04      	ldr	r3, [pc, #16]	; (8007c78 <USBD_SetConfig+0x118>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7ff f9ac 	bl	8006fc8 <USBD_ClrClassConfig>
        break;
 8007c70:	bf00      	nop
    }
  }
}
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	200002c4 	.word	0x200002c4

08007c7c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	88db      	ldrh	r3, [r3, #6]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d004      	beq.n	8007c98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f8cc 	bl	8007e2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c96:	e022      	b.n	8007cde <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	dc02      	bgt.n	8007ca8 <USBD_GetConfig+0x2c>
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	dc03      	bgt.n	8007cae <USBD_GetConfig+0x32>
 8007ca6:	e015      	b.n	8007cd4 <USBD_GetConfig+0x58>
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d00b      	beq.n	8007cc4 <USBD_GetConfig+0x48>
 8007cac:	e012      	b.n	8007cd4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	2201      	movs	r2, #1
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f920 	bl	8007f02 <USBD_CtlSendData>
        break;
 8007cc2:	e00c      	b.n	8007cde <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	2201      	movs	r2, #1
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f918 	bl	8007f02 <USBD_CtlSendData>
        break;
 8007cd2:	e004      	b.n	8007cde <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f8a9 	bl	8007e2e <USBD_CtlError>
        break;
 8007cdc:	bf00      	nop
}
 8007cde:	bf00      	nop
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d81e      	bhi.n	8007d3a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	88db      	ldrh	r3, [r3, #6]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d004      	beq.n	8007d0e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f891 	bl	8007e2e <USBD_CtlError>
        break;
 8007d0c:	e01a      	b.n	8007d44 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d005      	beq.n	8007d2a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f043 0202 	orr.w	r2, r3, #2
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	330c      	adds	r3, #12
 8007d2e:	2202      	movs	r2, #2
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f8e5 	bl	8007f02 <USBD_CtlSendData>
      break;
 8007d38:	e004      	b.n	8007d44 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f876 	bl	8007e2e <USBD_CtlError>
      break;
 8007d42:	bf00      	nop
  }
}
 8007d44:	bf00      	nop
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	885b      	ldrh	r3, [r3, #2]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d106      	bne.n	8007d6c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f929 	bl	8007fbe <USBD_CtlSendStatus>
  }
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d84:	3b01      	subs	r3, #1
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d80b      	bhi.n	8007da2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	885b      	ldrh	r3, [r3, #2]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d10c      	bne.n	8007dac <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f90f 	bl	8007fbe <USBD_CtlSendStatus>
      }
      break;
 8007da0:	e004      	b.n	8007dac <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f842 	bl	8007e2e <USBD_CtlError>
      break;
 8007daa:	e000      	b.n	8007dae <USBD_ClrFeature+0x3a>
      break;
 8007dac:	bf00      	nop
  }
}
 8007dae:	bf00      	nop
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781a      	ldrb	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	785a      	ldrb	r2, [r3, #1]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	3302      	adds	r3, #2
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	3303      	adds	r3, #3
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	021b      	lsls	r3, r3, #8
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	4413      	add	r3, r2
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	3304      	adds	r3, #4
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	3305      	adds	r3, #5
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	021b      	lsls	r3, r3, #8
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	4413      	add	r3, r2
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	3306      	adds	r3, #6
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	3307      	adds	r3, #7
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	021b      	lsls	r3, r3, #8
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	4413      	add	r3, r2
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	80da      	strh	r2, [r3, #6]

}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bc80      	pop	{r7}
 8007e2c:	4770      	bx	lr

08007e2e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b082      	sub	sp, #8
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007e38:	2180      	movs	r1, #128	; 0x80
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fc54 	bl	80086e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007e40:	2100      	movs	r1, #0
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fc50 	bl	80086e8 <USBD_LL_StallEP>
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d032      	beq.n	8007ecc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 f834 	bl	8007ed4 <USBD_GetLen>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	3301      	adds	r3, #1
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007e7a:	7dfb      	ldrb	r3, [r7, #23]
 8007e7c:	1c5a      	adds	r2, r3, #1
 8007e7e:	75fa      	strb	r2, [r7, #23]
 8007e80:	461a      	mov	r2, r3
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	4413      	add	r3, r2
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	7812      	ldrb	r2, [r2, #0]
 8007e8a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007e8c:	7dfb      	ldrb	r3, [r7, #23]
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	75fa      	strb	r2, [r7, #23]
 8007e92:	461a      	mov	r2, r3
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	4413      	add	r3, r2
 8007e98:	2203      	movs	r2, #3
 8007e9a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007e9c:	e012      	b.n	8007ec4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	60fa      	str	r2, [r7, #12]
 8007ea4:	7dfa      	ldrb	r2, [r7, #23]
 8007ea6:	1c51      	adds	r1, r2, #1
 8007ea8:	75f9      	strb	r1, [r7, #23]
 8007eaa:	4611      	mov	r1, r2
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	440a      	add	r2, r1
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
 8007eb6:	1c5a      	adds	r2, r3, #1
 8007eb8:	75fa      	strb	r2, [r7, #23]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e8      	bne.n	8007e9e <USBD_GetString+0x4e>
    }
  }
}
 8007ecc:	bf00      	nop
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007ee0:	e005      	b.n	8007eee <USBD_GetLen+0x1a>
  {
    len++;
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3301      	adds	r3, #1
 8007eec:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1f5      	bne.n	8007ee2 <USBD_GetLen+0xe>
  }

  return len;
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bc80      	pop	{r7}
 8007f00:	4770      	bx	lr

08007f02 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b084      	sub	sp, #16
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f18:	88fa      	ldrh	r2, [r7, #6]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007f1e:	88fa      	ldrh	r2, [r7, #6]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f24:	88fb      	ldrh	r3, [r7, #6]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	2100      	movs	r1, #0
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 fc65 	bl	80087fa <USBD_LL_Transmit>

  return USBD_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	4613      	mov	r3, r2
 8007f46:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f48:	88fb      	ldrh	r3, [r7, #6]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f000 fc53 	bl	80087fa <USBD_LL_Transmit>

  return USBD_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2203      	movs	r2, #3
 8007f70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007f74:	88fa      	ldrh	r2, [r7, #6]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007f7c:	88fa      	ldrh	r2, [r7, #6]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f84:	88fb      	ldrh	r3, [r7, #6]
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	2100      	movs	r1, #0
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 fc58 	bl	8008840 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fa8:	88fb      	ldrh	r3, [r7, #6]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	2100      	movs	r1, #0
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 fc46 	bl	8008840 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b082      	sub	sp, #8
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2204      	movs	r2, #4
 8007fca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007fce:	2300      	movs	r3, #0
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fc10 	bl	80087fa <USBD_LL_Transmit>

  return USBD_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2205      	movs	r2, #5
 8007ff0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fc20 	bl	8008840 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008010:	2200      	movs	r2, #0
 8008012:	4912      	ldr	r1, [pc, #72]	; (800805c <MX_USB_DEVICE_Init+0x50>)
 8008014:	4812      	ldr	r0, [pc, #72]	; (8008060 <MX_USB_DEVICE_Init+0x54>)
 8008016:	f7fe ff5e 	bl	8006ed6 <USBD_Init>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008020:	f7f8 fa84 	bl	800052c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008024:	490f      	ldr	r1, [pc, #60]	; (8008064 <MX_USB_DEVICE_Init+0x58>)
 8008026:	480e      	ldr	r0, [pc, #56]	; (8008060 <MX_USB_DEVICE_Init+0x54>)
 8008028:	f7fe ff80 	bl	8006f2c <USBD_RegisterClass>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008032:	f7f8 fa7b 	bl	800052c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008036:	490c      	ldr	r1, [pc, #48]	; (8008068 <MX_USB_DEVICE_Init+0x5c>)
 8008038:	4809      	ldr	r0, [pc, #36]	; (8008060 <MX_USB_DEVICE_Init+0x54>)
 800803a:	f7fe feb1 	bl	8006da0 <USBD_CDC_RegisterInterface>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008044:	f7f8 fa72 	bl	800052c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008048:	4805      	ldr	r0, [pc, #20]	; (8008060 <MX_USB_DEVICE_Init+0x54>)
 800804a:	f7fe ff88 	bl	8006f5e <USBD_Start>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008054:	f7f8 fa6a 	bl	800052c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008058:	bf00      	nop
 800805a:	bd80      	pop	{r7, pc}
 800805c:	2000012c 	.word	0x2000012c
 8008060:	200002c8 	.word	0x200002c8
 8008064:	20000018 	.word	0x20000018
 8008068:	2000011c 	.word	0x2000011c

0800806c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008070:	2200      	movs	r2, #0
 8008072:	4905      	ldr	r1, [pc, #20]	; (8008088 <CDC_Init_FS+0x1c>)
 8008074:	4805      	ldr	r0, [pc, #20]	; (800808c <CDC_Init_FS+0x20>)
 8008076:	f7fe fea9 	bl	8006dcc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800807a:	4905      	ldr	r1, [pc, #20]	; (8008090 <CDC_Init_FS+0x24>)
 800807c:	4803      	ldr	r0, [pc, #12]	; (800808c <CDC_Init_FS+0x20>)
 800807e:	f7fe febe 	bl	8006dfe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008082:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008084:	4618      	mov	r0, r3
 8008086:	bd80      	pop	{r7, pc}
 8008088:	2000098c 	.word	0x2000098c
 800808c:	200002c8 	.word	0x200002c8
 8008090:	2000058c 	.word	0x2000058c

08008094 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008094:	b480      	push	{r7}
 8008096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008098:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800809a:	4618      	mov	r0, r3
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr
	...

080080a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	4603      	mov	r3, r0
 80080ac:	6039      	str	r1, [r7, #0]
 80080ae:	71fb      	strb	r3, [r7, #7]
 80080b0:	4613      	mov	r3, r2
 80080b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	2b23      	cmp	r3, #35	; 0x23
 80080b8:	d84a      	bhi.n	8008150 <CDC_Control_FS+0xac>
 80080ba:	a201      	add	r2, pc, #4	; (adr r2, 80080c0 <CDC_Control_FS+0x1c>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	08008151 	.word	0x08008151
 80080c4:	08008151 	.word	0x08008151
 80080c8:	08008151 	.word	0x08008151
 80080cc:	08008151 	.word	0x08008151
 80080d0:	08008151 	.word	0x08008151
 80080d4:	08008151 	.word	0x08008151
 80080d8:	08008151 	.word	0x08008151
 80080dc:	08008151 	.word	0x08008151
 80080e0:	08008151 	.word	0x08008151
 80080e4:	08008151 	.word	0x08008151
 80080e8:	08008151 	.word	0x08008151
 80080ec:	08008151 	.word	0x08008151
 80080f0:	08008151 	.word	0x08008151
 80080f4:	08008151 	.word	0x08008151
 80080f8:	08008151 	.word	0x08008151
 80080fc:	08008151 	.word	0x08008151
 8008100:	08008151 	.word	0x08008151
 8008104:	08008151 	.word	0x08008151
 8008108:	08008151 	.word	0x08008151
 800810c:	08008151 	.word	0x08008151
 8008110:	08008151 	.word	0x08008151
 8008114:	08008151 	.word	0x08008151
 8008118:	08008151 	.word	0x08008151
 800811c:	08008151 	.word	0x08008151
 8008120:	08008151 	.word	0x08008151
 8008124:	08008151 	.word	0x08008151
 8008128:	08008151 	.word	0x08008151
 800812c:	08008151 	.word	0x08008151
 8008130:	08008151 	.word	0x08008151
 8008134:	08008151 	.word	0x08008151
 8008138:	08008151 	.word	0x08008151
 800813c:	08008151 	.word	0x08008151
 8008140:	08008151 	.word	0x08008151
 8008144:	08008151 	.word	0x08008151
 8008148:	08008151 	.word	0x08008151
 800814c:	08008151 	.word	0x08008151
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008150:	bf00      	nop
  }

  return (USBD_OK);
 8008152:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008154:	4618      	mov	r0, r3
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	bc80      	pop	{r7}
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop

08008160 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	4805      	ldr	r0, [pc, #20]	; (8008184 <CDC_Receive_FS+0x24>)
 800816e:	f7fe fe46 	bl	8006dfe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008172:	4804      	ldr	r0, [pc, #16]	; (8008184 <CDC_Receive_FS+0x24>)
 8008174:	f7fe fe85 	bl	8006e82 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008178:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800817a:	4618      	mov	r0, r3
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	200002c8 	.word	0x200002c8

08008188 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008194:	2300      	movs	r3, #0
 8008196:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008198:	4b0d      	ldr	r3, [pc, #52]	; (80081d0 <CDC_Transmit_FS+0x48>)
 800819a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e00b      	b.n	80081c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80081ae:	887b      	ldrh	r3, [r7, #2]
 80081b0:	461a      	mov	r2, r3
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	4806      	ldr	r0, [pc, #24]	; (80081d0 <CDC_Transmit_FS+0x48>)
 80081b6:	f7fe fe09 	bl	8006dcc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80081ba:	4805      	ldr	r0, [pc, #20]	; (80081d0 <CDC_Transmit_FS+0x48>)
 80081bc:	f7fe fe32 	bl	8006e24 <USBD_CDC_TransmitPacket>
 80081c0:	4603      	mov	r3, r0
 80081c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	200002c8 	.word	0x200002c8

080081d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2212      	movs	r2, #18
 80081e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081e6:	4b03      	ldr	r3, [pc, #12]	; (80081f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bc80      	pop	{r7}
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20000148 	.word	0x20000148

080081f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2204      	movs	r2, #4
 8008208:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800820a:	4b03      	ldr	r3, [pc, #12]	; (8008218 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800820c:	4618      	mov	r0, r3
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	bc80      	pop	{r7}
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	2000015c 	.word	0x2000015c

0800821c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	6039      	str	r1, [r7, #0]
 8008226:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d105      	bne.n	800823a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	4907      	ldr	r1, [pc, #28]	; (8008250 <USBD_FS_ProductStrDescriptor+0x34>)
 8008232:	4808      	ldr	r0, [pc, #32]	; (8008254 <USBD_FS_ProductStrDescriptor+0x38>)
 8008234:	f7ff fe0c 	bl	8007e50 <USBD_GetString>
 8008238:	e004      	b.n	8008244 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	4904      	ldr	r1, [pc, #16]	; (8008250 <USBD_FS_ProductStrDescriptor+0x34>)
 800823e:	4805      	ldr	r0, [pc, #20]	; (8008254 <USBD_FS_ProductStrDescriptor+0x38>)
 8008240:	f7ff fe06 	bl	8007e50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008244:	4b02      	ldr	r3, [pc, #8]	; (8008250 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000d8c 	.word	0x20000d8c
 8008254:	080089d0 	.word	0x080089d0

08008258 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	6039      	str	r1, [r7, #0]
 8008262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	4904      	ldr	r1, [pc, #16]	; (8008278 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008268:	4804      	ldr	r0, [pc, #16]	; (800827c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800826a:	f7ff fdf1 	bl	8007e50 <USBD_GetString>
  return USBD_StrDesc;
 800826e:	4b02      	ldr	r3, [pc, #8]	; (8008278 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008270:	4618      	mov	r0, r3
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	20000d8c 	.word	0x20000d8c
 800827c:	080089e8 	.word	0x080089e8

08008280 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	6039      	str	r1, [r7, #0]
 800828a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	221a      	movs	r2, #26
 8008290:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008292:	f000 f843 	bl	800831c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008296:	4b02      	ldr	r3, [pc, #8]	; (80082a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20000160 	.word	0x20000160

080082a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	4603      	mov	r3, r0
 80082ac:	6039      	str	r1, [r7, #0]
 80082ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082b0:	79fb      	ldrb	r3, [r7, #7]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d105      	bne.n	80082c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	4907      	ldr	r1, [pc, #28]	; (80082d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082ba:	4808      	ldr	r0, [pc, #32]	; (80082dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80082bc:	f7ff fdc8 	bl	8007e50 <USBD_GetString>
 80082c0:	e004      	b.n	80082cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	4904      	ldr	r1, [pc, #16]	; (80082d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082c6:	4805      	ldr	r0, [pc, #20]	; (80082dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80082c8:	f7ff fdc2 	bl	8007e50 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082cc:	4b02      	ldr	r3, [pc, #8]	; (80082d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20000d8c 	.word	0x20000d8c
 80082dc:	080089fc 	.word	0x080089fc

080082e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	6039      	str	r1, [r7, #0]
 80082ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d105      	bne.n	80082fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	4907      	ldr	r1, [pc, #28]	; (8008314 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082f6:	4808      	ldr	r0, [pc, #32]	; (8008318 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082f8:	f7ff fdaa 	bl	8007e50 <USBD_GetString>
 80082fc:	e004      	b.n	8008308 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	4904      	ldr	r1, [pc, #16]	; (8008314 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008302:	4805      	ldr	r0, [pc, #20]	; (8008318 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008304:	f7ff fda4 	bl	8007e50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008308:	4b02      	ldr	r3, [pc, #8]	; (8008314 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20000d8c 	.word	0x20000d8c
 8008318:	08008a08 	.word	0x08008a08

0800831c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008322:	4b0f      	ldr	r3, [pc, #60]	; (8008360 <Get_SerialNum+0x44>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008328:	4b0e      	ldr	r3, [pc, #56]	; (8008364 <Get_SerialNum+0x48>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800832e:	4b0e      	ldr	r3, [pc, #56]	; (8008368 <Get_SerialNum+0x4c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4413      	add	r3, r2
 800833a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d009      	beq.n	8008356 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008342:	2208      	movs	r2, #8
 8008344:	4909      	ldr	r1, [pc, #36]	; (800836c <Get_SerialNum+0x50>)
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 f814 	bl	8008374 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800834c:	2204      	movs	r2, #4
 800834e:	4908      	ldr	r1, [pc, #32]	; (8008370 <Get_SerialNum+0x54>)
 8008350:	68b8      	ldr	r0, [r7, #8]
 8008352:	f000 f80f 	bl	8008374 <IntToUnicode>
  }
}
 8008356:	bf00      	nop
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	1ffff7e8 	.word	0x1ffff7e8
 8008364:	1ffff7ec 	.word	0x1ffff7ec
 8008368:	1ffff7f0 	.word	0x1ffff7f0
 800836c:	20000162 	.word	0x20000162
 8008370:	20000172 	.word	0x20000172

08008374 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008374:	b480      	push	{r7}
 8008376:	b087      	sub	sp, #28
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	4613      	mov	r3, r2
 8008380:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008386:	2300      	movs	r3, #0
 8008388:	75fb      	strb	r3, [r7, #23]
 800838a:	e027      	b.n	80083dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	0f1b      	lsrs	r3, r3, #28
 8008390:	2b09      	cmp	r3, #9
 8008392:	d80b      	bhi.n	80083ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	0f1b      	lsrs	r3, r3, #28
 8008398:	b2da      	uxtb	r2, r3
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	4619      	mov	r1, r3
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	440b      	add	r3, r1
 80083a4:	3230      	adds	r2, #48	; 0x30
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	701a      	strb	r2, [r3, #0]
 80083aa:	e00a      	b.n	80083c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	0f1b      	lsrs	r3, r3, #28
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	4619      	mov	r1, r3
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	440b      	add	r3, r1
 80083bc:	3237      	adds	r2, #55	; 0x37
 80083be:	b2d2      	uxtb	r2, r2
 80083c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	011b      	lsls	r3, r3, #4
 80083c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	3301      	adds	r3, #1
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	4413      	add	r3, r2
 80083d2:	2200      	movs	r2, #0
 80083d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
 80083d8:	3301      	adds	r3, #1
 80083da:	75fb      	strb	r3, [r7, #23]
 80083dc:	7dfa      	ldrb	r2, [r7, #23]
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d3d3      	bcc.n	800838c <IntToUnicode+0x18>
  }
}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bc80      	pop	{r7}
 80083ee:	4770      	bx	lr

080083f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a0d      	ldr	r2, [pc, #52]	; (8008434 <HAL_PCD_MspInit+0x44>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d113      	bne.n	800842a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008402:	4b0d      	ldr	r3, [pc, #52]	; (8008438 <HAL_PCD_MspInit+0x48>)
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	4a0c      	ldr	r2, [pc, #48]	; (8008438 <HAL_PCD_MspInit+0x48>)
 8008408:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800840c:	61d3      	str	r3, [r2, #28]
 800840e:	4b0a      	ldr	r3, [pc, #40]	; (8008438 <HAL_PCD_MspInit+0x48>)
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800841a:	2200      	movs	r2, #0
 800841c:	2100      	movs	r1, #0
 800841e:	2014      	movs	r0, #20
 8008420:	f7f8 fb41 	bl	8000aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008424:	2014      	movs	r0, #20
 8008426:	f7f8 fb5a 	bl	8000ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800842a:	bf00      	nop
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	40005c00 	.word	0x40005c00
 8008438:	40021000 	.word	0x40021000

0800843c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008450:	4619      	mov	r1, r3
 8008452:	4610      	mov	r0, r2
 8008454:	f7fe fdcb 	bl	8006fee <USBD_LL_SetupStage>
}
 8008458:	bf00      	nop
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008472:	78fa      	ldrb	r2, [r7, #3]
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	4613      	mov	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	440b      	add	r3, r1
 8008480:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	78fb      	ldrb	r3, [r7, #3]
 8008488:	4619      	mov	r1, r3
 800848a:	f7fe fdfd 	bl	8007088 <USBD_LL_DataOutStage>
}
 800848e:	bf00      	nop
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b082      	sub	sp, #8
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	460b      	mov	r3, r1
 80084a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80084a8:	78fa      	ldrb	r2, [r7, #3]
 80084aa:	6879      	ldr	r1, [r7, #4]
 80084ac:	4613      	mov	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	00db      	lsls	r3, r3, #3
 80084b4:	440b      	add	r3, r1
 80084b6:	333c      	adds	r3, #60	; 0x3c
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	78fb      	ldrb	r3, [r7, #3]
 80084bc:	4619      	mov	r1, r3
 80084be:	f7fe fe54 	bl	800716a <USBD_LL_DataInStage>
}
 80084c2:	bf00      	nop
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b082      	sub	sp, #8
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fe ff64 	bl	80073a6 <USBD_LL_SOF>
}
 80084de:	bf00      	nop
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084ee:	2301      	movs	r3, #1
 80084f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d001      	beq.n	80084fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80084fa:	f7f8 f817 	bl	800052c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008504:	7bfa      	ldrb	r2, [r7, #15]
 8008506:	4611      	mov	r1, r2
 8008508:	4618      	mov	r0, r3
 800850a:	f7fe ff14 	bl	8007336 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008514:	4618      	mov	r0, r3
 8008516:	f7fe fecd 	bl	80072b4 <USBD_LL_Reset>
}
 800851a:	bf00      	nop
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008532:	4618      	mov	r0, r3
 8008534:	f7fe ff0e 	bl	8007354 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008540:	4b04      	ldr	r3, [pc, #16]	; (8008554 <HAL_PCD_SuspendCallback+0x30>)
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	4a03      	ldr	r2, [pc, #12]	; (8008554 <HAL_PCD_SuspendCallback+0x30>)
 8008546:	f043 0306 	orr.w	r3, r3, #6
 800854a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	e000ed00 	.word	0xe000ed00

08008558 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008566:	4618      	mov	r0, r3
 8008568:	f7fe ff08 	bl	800737c <USBD_LL_Resume>
}
 800856c:	bf00      	nop
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800857c:	4a28      	ldr	r2, [pc, #160]	; (8008620 <USBD_LL_Init+0xac>)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a26      	ldr	r2, [pc, #152]	; (8008620 <USBD_LL_Init+0xac>)
 8008588:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800858c:	4b24      	ldr	r3, [pc, #144]	; (8008620 <USBD_LL_Init+0xac>)
 800858e:	4a25      	ldr	r2, [pc, #148]	; (8008624 <USBD_LL_Init+0xb0>)
 8008590:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008592:	4b23      	ldr	r3, [pc, #140]	; (8008620 <USBD_LL_Init+0xac>)
 8008594:	2208      	movs	r2, #8
 8008596:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008598:	4b21      	ldr	r3, [pc, #132]	; (8008620 <USBD_LL_Init+0xac>)
 800859a:	2202      	movs	r2, #2
 800859c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800859e:	4b20      	ldr	r3, [pc, #128]	; (8008620 <USBD_LL_Init+0xac>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80085a4:	4b1e      	ldr	r3, [pc, #120]	; (8008620 <USBD_LL_Init+0xac>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80085aa:	4b1d      	ldr	r3, [pc, #116]	; (8008620 <USBD_LL_Init+0xac>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80085b0:	481b      	ldr	r0, [pc, #108]	; (8008620 <USBD_LL_Init+0xac>)
 80085b2:	f7f8 feef 	bl	8001394 <HAL_PCD_Init>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80085bc:	f7f7 ffb6 	bl	800052c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085c6:	2318      	movs	r3, #24
 80085c8:	2200      	movs	r2, #0
 80085ca:	2100      	movs	r1, #0
 80085cc:	f7fa fc0e 	bl	8002dec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085d6:	2358      	movs	r3, #88	; 0x58
 80085d8:	2200      	movs	r2, #0
 80085da:	2180      	movs	r1, #128	; 0x80
 80085dc:	f7fa fc06 	bl	8002dec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085e6:	23c0      	movs	r3, #192	; 0xc0
 80085e8:	2200      	movs	r2, #0
 80085ea:	2181      	movs	r1, #129	; 0x81
 80085ec:	f7fa fbfe 	bl	8002dec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80085fa:	2200      	movs	r2, #0
 80085fc:	2101      	movs	r1, #1
 80085fe:	f7fa fbf5 	bl	8002dec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800860c:	2200      	movs	r2, #0
 800860e:	2182      	movs	r1, #130	; 0x82
 8008610:	f7fa fbec 	bl	8002dec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20000f8c 	.word	0x20000f8c
 8008624:	40005c00 	.word	0x40005c00

08008628 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800863e:	4618      	mov	r0, r3
 8008640:	f7f8 ffa7 	bl	8001592 <HAL_PCD_Start>
 8008644:	4603      	mov	r3, r0
 8008646:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	4618      	mov	r0, r3
 800864c:	f000 f94e 	bl	80088ec <USBD_Get_USB_Status>
 8008650:	4603      	mov	r3, r0
 8008652:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008654:	7bbb      	ldrb	r3, [r7, #14]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	4608      	mov	r0, r1
 8008668:	4611      	mov	r1, r2
 800866a:	461a      	mov	r2, r3
 800866c:	4603      	mov	r3, r0
 800866e:	70fb      	strb	r3, [r7, #3]
 8008670:	460b      	mov	r3, r1
 8008672:	70bb      	strb	r3, [r7, #2]
 8008674:	4613      	mov	r3, r2
 8008676:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008686:	78bb      	ldrb	r3, [r7, #2]
 8008688:	883a      	ldrh	r2, [r7, #0]
 800868a:	78f9      	ldrb	r1, [r7, #3]
 800868c:	f7f9 f8fc 	bl	8001888 <HAL_PCD_EP_Open>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	4618      	mov	r0, r3
 8008698:	f000 f928 	bl	80088ec <USBD_Get_USB_Status>
 800869c:	4603      	mov	r3, r0
 800869e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b084      	sub	sp, #16
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	460b      	mov	r3, r1
 80086b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086c4:	78fa      	ldrb	r2, [r7, #3]
 80086c6:	4611      	mov	r1, r2
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7f9 f93a 	bl	8001942 <HAL_PCD_EP_Close>
 80086ce:	4603      	mov	r3, r0
 80086d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 f909 	bl	80088ec <USBD_Get_USB_Status>
 80086da:	4603      	mov	r3, r0
 80086dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086de:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008702:	78fa      	ldrb	r2, [r7, #3]
 8008704:	4611      	mov	r1, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f7f9 f9e2 	bl	8001ad0 <HAL_PCD_EP_SetStall>
 800870c:	4603      	mov	r3, r0
 800870e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	4618      	mov	r0, r3
 8008714:	f000 f8ea 	bl	80088ec <USBD_Get_USB_Status>
 8008718:	4603      	mov	r3, r0
 800871a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800871c:	7bbb      	ldrb	r3, [r7, #14]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	460b      	mov	r3, r1
 8008730:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008740:	78fa      	ldrb	r2, [r7, #3]
 8008742:	4611      	mov	r1, r2
 8008744:	4618      	mov	r0, r3
 8008746:	f7f9 fa23 	bl	8001b90 <HAL_PCD_EP_ClrStall>
 800874a:	4603      	mov	r3, r0
 800874c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	4618      	mov	r0, r3
 8008752:	f000 f8cb 	bl	80088ec <USBD_Get_USB_Status>
 8008756:	4603      	mov	r3, r0
 8008758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800875a:	7bbb      	ldrb	r3, [r7, #14]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008776:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800877c:	2b00      	cmp	r3, #0
 800877e:	da0c      	bge.n	800879a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008780:	78fb      	ldrb	r3, [r7, #3]
 8008782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008786:	68f9      	ldr	r1, [r7, #12]
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	4613      	mov	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	440b      	add	r3, r1
 8008794:	3302      	adds	r3, #2
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	e00b      	b.n	80087b2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087a0:	68f9      	ldr	r1, [r7, #12]
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	00db      	lsls	r3, r3, #3
 80087aa:	440b      	add	r3, r1
 80087ac:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80087b0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bc80      	pop	{r7}
 80087ba:	4770      	bx	lr

080087bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	460b      	mov	r3, r1
 80087c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087d6:	78fa      	ldrb	r2, [r7, #3]
 80087d8:	4611      	mov	r1, r2
 80087da:	4618      	mov	r0, r3
 80087dc:	f7f9 f82f 	bl	800183e <HAL_PCD_SetAddress>
 80087e0:	4603      	mov	r3, r0
 80087e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 f880 	bl	80088ec <USBD_Get_USB_Status>
 80087ec:	4603      	mov	r3, r0
 80087ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b086      	sub	sp, #24
 80087fe:	af00      	add	r7, sp, #0
 8008800:	60f8      	str	r0, [r7, #12]
 8008802:	607a      	str	r2, [r7, #4]
 8008804:	461a      	mov	r2, r3
 8008806:	460b      	mov	r3, r1
 8008808:	72fb      	strb	r3, [r7, #11]
 800880a:	4613      	mov	r3, r2
 800880c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008812:	2300      	movs	r3, #0
 8008814:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800881c:	893b      	ldrh	r3, [r7, #8]
 800881e:	7af9      	ldrb	r1, [r7, #11]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	f7f9 f91e 	bl	8001a62 <HAL_PCD_EP_Transmit>
 8008826:	4603      	mov	r3, r0
 8008828:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	4618      	mov	r0, r3
 800882e:	f000 f85d 	bl	80088ec <USBD_Get_USB_Status>
 8008832:	4603      	mov	r3, r0
 8008834:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008836:	7dbb      	ldrb	r3, [r7, #22]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	607a      	str	r2, [r7, #4]
 800884a:	461a      	mov	r2, r3
 800884c:	460b      	mov	r3, r1
 800884e:	72fb      	strb	r3, [r7, #11]
 8008850:	4613      	mov	r3, r2
 8008852:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008862:	893b      	ldrh	r3, [r7, #8]
 8008864:	7af9      	ldrb	r1, [r7, #11]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	f7f9 f8b3 	bl	80019d2 <HAL_PCD_EP_Receive>
 800886c:	4603      	mov	r3, r0
 800886e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008870:	7dfb      	ldrb	r3, [r7, #23]
 8008872:	4618      	mov	r0, r3
 8008874:	f000 f83a 	bl	80088ec <USBD_Get_USB_Status>
 8008878:	4603      	mov	r3, r0
 800887a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800887c:	7dbb      	ldrb	r3, [r7, #22]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b082      	sub	sp, #8
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	460b      	mov	r3, r1
 8008890:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008898:	78fa      	ldrb	r2, [r7, #3]
 800889a:	4611      	mov	r1, r2
 800889c:	4618      	mov	r0, r3
 800889e:	f7f9 f8c9 	bl	8001a34 <HAL_PCD_EP_GetRxCount>
 80088a2:	4603      	mov	r3, r0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80088b4:	4b02      	ldr	r3, [pc, #8]	; (80088c0 <USBD_static_malloc+0x14>)
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	370c      	adds	r7, #12
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bc80      	pop	{r7}
 80088be:	4770      	bx	lr
 80088c0:	2000127c 	.word	0x2000127c

080088c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]

}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bc80      	pop	{r7}
 80088d4:	4770      	bx	lr

080088d6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	460b      	mov	r3, r1
 80088e0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80088e2:	bf00      	nop
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bc80      	pop	{r7}
 80088ea:	4770      	bx	lr

080088ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	4603      	mov	r3, r0
 80088f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088fa:	79fb      	ldrb	r3, [r7, #7]
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d817      	bhi.n	8008930 <USBD_Get_USB_Status+0x44>
 8008900:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <USBD_Get_USB_Status+0x1c>)
 8008902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008906:	bf00      	nop
 8008908:	08008919 	.word	0x08008919
 800890c:	0800891f 	.word	0x0800891f
 8008910:	08008925 	.word	0x08008925
 8008914:	0800892b 	.word	0x0800892b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	73fb      	strb	r3, [r7, #15]
    break;
 800891c:	e00b      	b.n	8008936 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800891e:	2302      	movs	r3, #2
 8008920:	73fb      	strb	r3, [r7, #15]
    break;
 8008922:	e008      	b.n	8008936 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008924:	2301      	movs	r3, #1
 8008926:	73fb      	strb	r3, [r7, #15]
    break;
 8008928:	e005      	b.n	8008936 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800892a:	2302      	movs	r3, #2
 800892c:	73fb      	strb	r3, [r7, #15]
    break;
 800892e:	e002      	b.n	8008936 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008930:	2302      	movs	r3, #2
 8008932:	73fb      	strb	r3, [r7, #15]
    break;
 8008934:	bf00      	nop
  }
  return usb_status;
 8008936:	7bfb      	ldrb	r3, [r7, #15]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	bc80      	pop	{r7}
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop

08008944 <__libc_init_array>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	2600      	movs	r6, #0
 8008948:	4d0c      	ldr	r5, [pc, #48]	; (800897c <__libc_init_array+0x38>)
 800894a:	4c0d      	ldr	r4, [pc, #52]	; (8008980 <__libc_init_array+0x3c>)
 800894c:	1b64      	subs	r4, r4, r5
 800894e:	10a4      	asrs	r4, r4, #2
 8008950:	42a6      	cmp	r6, r4
 8008952:	d109      	bne.n	8008968 <__libc_init_array+0x24>
 8008954:	f000 f822 	bl	800899c <_init>
 8008958:	2600      	movs	r6, #0
 800895a:	4d0a      	ldr	r5, [pc, #40]	; (8008984 <__libc_init_array+0x40>)
 800895c:	4c0a      	ldr	r4, [pc, #40]	; (8008988 <__libc_init_array+0x44>)
 800895e:	1b64      	subs	r4, r4, r5
 8008960:	10a4      	asrs	r4, r4, #2
 8008962:	42a6      	cmp	r6, r4
 8008964:	d105      	bne.n	8008972 <__libc_init_array+0x2e>
 8008966:	bd70      	pop	{r4, r5, r6, pc}
 8008968:	f855 3b04 	ldr.w	r3, [r5], #4
 800896c:	4798      	blx	r3
 800896e:	3601      	adds	r6, #1
 8008970:	e7ee      	b.n	8008950 <__libc_init_array+0xc>
 8008972:	f855 3b04 	ldr.w	r3, [r5], #4
 8008976:	4798      	blx	r3
 8008978:	3601      	adds	r6, #1
 800897a:	e7f2      	b.n	8008962 <__libc_init_array+0x1e>
 800897c:	08008a44 	.word	0x08008a44
 8008980:	08008a44 	.word	0x08008a44
 8008984:	08008a44 	.word	0x08008a44
 8008988:	08008a48 	.word	0x08008a48

0800898c <memset>:
 800898c:	4603      	mov	r3, r0
 800898e:	4402      	add	r2, r0
 8008990:	4293      	cmp	r3, r2
 8008992:	d100      	bne.n	8008996 <memset+0xa>
 8008994:	4770      	bx	lr
 8008996:	f803 1b01 	strb.w	r1, [r3], #1
 800899a:	e7f9      	b.n	8008990 <memset+0x4>

0800899c <_init>:
 800899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899e:	bf00      	nop
 80089a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089a2:	bc08      	pop	{r3}
 80089a4:	469e      	mov	lr, r3
 80089a6:	4770      	bx	lr

080089a8 <_fini>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	bf00      	nop
 80089ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ae:	bc08      	pop	{r3}
 80089b0:	469e      	mov	lr, r3
 80089b2:	4770      	bx	lr
