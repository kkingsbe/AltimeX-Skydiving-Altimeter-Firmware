
ftsn_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  080054c0  080054c0  000154c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f0  080056f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080056f0  080056f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056f0  080056f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f0  080056f0  000156f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080056f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000000c  08005704  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08005704  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d45b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002182  00000000  00000000  0002d490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  0002f618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  000303a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b88  00000000  00000000  00031058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f988  00000000  00000000  00048be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a00e  00000000  00000000  00058568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2576  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c94  00000000  00000000  000e25c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	080054a4 	.word	0x080054a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	080054a4 	.word	0x080054a4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <Display_Configure_Pins>:

TIM_HandleTypeDef* displayTimer = NULL;
struct DisplayPinConfig displayPinConfig;

void Display_Configure_Pins(uint16_t RD_pin, GPIO_TypeDef* RD_port, uint16_t WR_pin, GPIO_TypeDef* WR_port, uint16_t A0_pin, GPIO_TypeDef* A0_port)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4603      	mov	r3, r0
 8000d54:	81fb      	strh	r3, [r7, #14]
 8000d56:	4613      	mov	r3, r2
 8000d58:	81bb      	strh	r3, [r7, #12]
	struct DisplayPinType RD = {
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	623b      	str	r3, [r7, #32]
 8000d5e:	89fb      	ldrh	r3, [r7, #14]
 8000d60:	84bb      	strh	r3, [r7, #36]	; 0x24
			RD_port,
			RD_pin
	};
	struct DisplayPinType WR = {
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	61bb      	str	r3, [r7, #24]
 8000d66:	89bb      	ldrh	r3, [r7, #12]
 8000d68:	83bb      	strh	r3, [r7, #28]
			WR_port,
			WR_pin
	};
	struct DisplayPinType A0 = {
 8000d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000d70:	82bb      	strh	r3, [r7, #20]
			A0_port,
			A0_pin
	};

	displayPinConfig.RD = RD;
 8000d72:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <Display_Configure_Pins+0xc4>)
 8000d74:	461a      	mov	r2, r3
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d7e:	e882 0003 	stmia.w	r2, {r0, r1}
	displayPinConfig.WR = WR;
 8000d82:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <Display_Configure_Pins+0xc4>)
 8000d84:	3308      	adds	r3, #8
 8000d86:	f107 0218 	add.w	r2, r7, #24
 8000d8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d8e:	e883 0003 	stmia.w	r3, {r0, r1}
	displayPinConfig.A0 = A0;
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <Display_Configure_Pins+0xc4>)
 8000d94:	3310      	adds	r3, #16
 8000d96:	f107 0210 	add.w	r2, r7, #16
 8000d9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d9e:	e883 0003 	stmia.w	r3, {r0, r1}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da8:	4819      	ldr	r0, [pc, #100]	; (8000e10 <Display_Configure_Pins+0xc8>)
 8000daa:	f001 fcd5 	bl	8002758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db4:	4816      	ldr	r0, [pc, #88]	; (8000e10 <Display_Configure_Pins+0xc8>)
 8000db6:	f001 fccf 	bl	8002758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc0:	4813      	ldr	r0, [pc, #76]	; (8000e10 <Display_Configure_Pins+0xc8>)
 8000dc2:	f001 fcc9 	bl	8002758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dcc:	4810      	ldr	r0, [pc, #64]	; (8000e10 <Display_Configure_Pins+0xc8>)
 8000dce:	f001 fcc3 	bl	8002758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd8:	480d      	ldr	r0, [pc, #52]	; (8000e10 <Display_Configure_Pins+0xc8>)
 8000dda:	f001 fcbd 	bl	8002758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de4:	480a      	ldr	r0, [pc, #40]	; (8000e10 <Display_Configure_Pins+0xc8>)
 8000de6:	f001 fcb7 	bl	8002758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df0:	4807      	ldr	r0, [pc, #28]	; (8000e10 <Display_Configure_Pins+0xc8>)
 8000df2:	f001 fcb1 	bl	8002758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfc:	4804      	ldr	r0, [pc, #16]	; (8000e10 <Display_Configure_Pins+0xc8>)
 8000dfe:	f001 fcab 	bl	8002758 <HAL_GPIO_WritePin>
}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	; 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000002c 	.word	0x2000002c
 8000e10:	40010c00 	.word	0x40010c00

08000e14 <Display_Write_Byte>:

//data is an array of bits, starting from d7
void Display_Write_Byte(uint8_t* data, uint8_t A0, uint8_t RD, uint8_t WR)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	4611      	mov	r1, r2
 8000e20:	461a      	mov	r2, r3
 8000e22:	4603      	mov	r3, r0
 8000e24:	70fb      	strb	r3, [r7, #3]
 8000e26:	460b      	mov	r3, r1
 8000e28:	70bb      	strb	r3, [r7, #2]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	707b      	strb	r3, [r7, #1]
	//AO
	if(A0 == 0x00)
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d107      	bne.n	8000e44 <Display_Write_Byte+0x30>
	{
		HAL_GPIO_WritePin(displayPinConfig.A0.port, displayPinConfig.A0.pin_number, GPIO_PIN_RESET);
 8000e34:	4b9e      	ldr	r3, [pc, #632]	; (80010b0 <Display_Write_Byte+0x29c>)
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	4a9d      	ldr	r2, [pc, #628]	; (80010b0 <Display_Write_Byte+0x29c>)
 8000e3a:	8a91      	ldrh	r1, [r2, #20]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fc8a 	bl	8002758 <HAL_GPIO_WritePin>
	}
	if(A0 == 0x01)
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d107      	bne.n	8000e5a <Display_Write_Byte+0x46>
	{
		HAL_GPIO_WritePin(displayPinConfig.A0.port, displayPinConfig.A0.pin_number, GPIO_PIN_SET);
 8000e4a:	4b99      	ldr	r3, [pc, #612]	; (80010b0 <Display_Write_Byte+0x29c>)
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	4a98      	ldr	r2, [pc, #608]	; (80010b0 <Display_Write_Byte+0x29c>)
 8000e50:	8a91      	ldrh	r1, [r2, #20]
 8000e52:	2201      	movs	r2, #1
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 fc7f 	bl	8002758 <HAL_GPIO_WritePin>
	}

	delay_ns(20);
 8000e5a:	2014      	movs	r0, #20
 8000e5c:	f000 f974 	bl	8001148 <delay_ns>

	//RD
	if(RD == 0x00)
 8000e60:	78bb      	ldrb	r3, [r7, #2]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d107      	bne.n	8000e76 <Display_Write_Byte+0x62>
	{
		HAL_GPIO_WritePin(displayPinConfig.RD.port, displayPinConfig.RD.pin_number, GPIO_PIN_RESET);
 8000e66:	4b92      	ldr	r3, [pc, #584]	; (80010b0 <Display_Write_Byte+0x29c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a91      	ldr	r2, [pc, #580]	; (80010b0 <Display_Write_Byte+0x29c>)
 8000e6c:	8891      	ldrh	r1, [r2, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f001 fc71 	bl	8002758 <HAL_GPIO_WritePin>
	}
	if(RD == 0x01)
 8000e76:	78bb      	ldrb	r3, [r7, #2]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d107      	bne.n	8000e8c <Display_Write_Byte+0x78>
	{
		HAL_GPIO_WritePin(displayPinConfig.RD.port, displayPinConfig.RD.pin_number, GPIO_PIN_SET);
 8000e7c:	4b8c      	ldr	r3, [pc, #560]	; (80010b0 <Display_Write_Byte+0x29c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a8b      	ldr	r2, [pc, #556]	; (80010b0 <Display_Write_Byte+0x29c>)
 8000e82:	8891      	ldrh	r1, [r2, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	4618      	mov	r0, r3
 8000e88:	f001 fc66 	bl	8002758 <HAL_GPIO_WritePin>
	}

	//WR
	if(WR == 0x00)
 8000e8c:	787b      	ldrb	r3, [r7, #1]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d107      	bne.n	8000ea2 <Display_Write_Byte+0x8e>
	{
		HAL_GPIO_WritePin(displayPinConfig.WR.port, displayPinConfig.WR.pin_number, GPIO_PIN_RESET);
 8000e92:	4b87      	ldr	r3, [pc, #540]	; (80010b0 <Display_Write_Byte+0x29c>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	4a86      	ldr	r2, [pc, #536]	; (80010b0 <Display_Write_Byte+0x29c>)
 8000e98:	8991      	ldrh	r1, [r2, #12]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 fc5b 	bl	8002758 <HAL_GPIO_WritePin>
	}
	if(WR == 0x01)
 8000ea2:	787b      	ldrb	r3, [r7, #1]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d107      	bne.n	8000eb8 <Display_Write_Byte+0xa4>
	{
		HAL_GPIO_WritePin(displayPinConfig.WR.port, displayPinConfig.WR.pin_number, GPIO_PIN_SET);
 8000ea8:	4b81      	ldr	r3, [pc, #516]	; (80010b0 <Display_Write_Byte+0x29c>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	4a80      	ldr	r2, [pc, #512]	; (80010b0 <Display_Write_Byte+0x29c>)
 8000eae:	8991      	ldrh	r1, [r2, #12]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 fc50 	bl	8002758 <HAL_GPIO_WritePin>
	}

	uint8_t bit1 = data[0];
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	73fb      	strb	r3, [r7, #15]
	uint8_t bit2 = data[1];
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	785b      	ldrb	r3, [r3, #1]
 8000ec2:	73bb      	strb	r3, [r7, #14]
	uint8_t bit3 = data[2];
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	789b      	ldrb	r3, [r3, #2]
 8000ec8:	737b      	strb	r3, [r7, #13]
	uint8_t bit4 = data[3];
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	78db      	ldrb	r3, [r3, #3]
 8000ece:	733b      	strb	r3, [r7, #12]
	uint8_t bit5 = data[4];
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	791b      	ldrb	r3, [r3, #4]
 8000ed4:	72fb      	strb	r3, [r7, #11]
	uint8_t bit6 = data[5];
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	795b      	ldrb	r3, [r3, #5]
 8000eda:	72bb      	strb	r3, [r7, #10]
	uint8_t bit7 = data[6];
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	799b      	ldrb	r3, [r3, #6]
 8000ee0:	727b      	strb	r3, [r7, #9]
	uint8_t bit8 = data[7];
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	79db      	ldrb	r3, [r3, #7]
 8000ee6:	723b      	strb	r3, [r7, #8]

	//Data bus
	if(data[0] == 0x00)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d105      	bne.n	8000efc <Display_Write_Byte+0xe8>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef6:	486f      	ldr	r0, [pc, #444]	; (80010b4 <Display_Write_Byte+0x2a0>)
 8000ef8:	f001 fc2e 	bl	8002758 <HAL_GPIO_WritePin>
	}
	if(data[0] == 0x01)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d105      	bne.n	8000f10 <Display_Write_Byte+0xfc>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f0a:	486a      	ldr	r0, [pc, #424]	; (80010b4 <Display_Write_Byte+0x2a0>)
 8000f0c:	f001 fc24 	bl	8002758 <HAL_GPIO_WritePin>
	}

	if(data[1] == 0x00)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3301      	adds	r3, #1
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d105      	bne.n	8000f26 <Display_Write_Byte+0x112>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f20:	4864      	ldr	r0, [pc, #400]	; (80010b4 <Display_Write_Byte+0x2a0>)
 8000f22:	f001 fc19 	bl	8002758 <HAL_GPIO_WritePin>
	}
	if(data[1] == 0x01)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d105      	bne.n	8000f3c <Display_Write_Byte+0x128>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f36:	485f      	ldr	r0, [pc, #380]	; (80010b4 <Display_Write_Byte+0x2a0>)
 8000f38:	f001 fc0e 	bl	8002758 <HAL_GPIO_WritePin>
	}

	if(data[2] == 0x00)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3302      	adds	r3, #2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d105      	bne.n	8000f52 <Display_Write_Byte+0x13e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4c:	4859      	ldr	r0, [pc, #356]	; (80010b4 <Display_Write_Byte+0x2a0>)
 8000f4e:	f001 fc03 	bl	8002758 <HAL_GPIO_WritePin>
	}
	if(data[2] == 0x01)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3302      	adds	r3, #2
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d105      	bne.n	8000f68 <Display_Write_Byte+0x154>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f62:	4854      	ldr	r0, [pc, #336]	; (80010b4 <Display_Write_Byte+0x2a0>)
 8000f64:	f001 fbf8 	bl	8002758 <HAL_GPIO_WritePin>
	}

	if(data[3] == 0x00)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3303      	adds	r3, #3
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d105      	bne.n	8000f7e <Display_Write_Byte+0x16a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f78:	484e      	ldr	r0, [pc, #312]	; (80010b4 <Display_Write_Byte+0x2a0>)
 8000f7a:	f001 fbed 	bl	8002758 <HAL_GPIO_WritePin>
	}
	if(data[3] == 0x01)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3303      	adds	r3, #3
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d105      	bne.n	8000f94 <Display_Write_Byte+0x180>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f8e:	4849      	ldr	r0, [pc, #292]	; (80010b4 <Display_Write_Byte+0x2a0>)
 8000f90:	f001 fbe2 	bl	8002758 <HAL_GPIO_WritePin>
	}

	if(data[4] == 0x00)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3304      	adds	r3, #4
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d105      	bne.n	8000faa <Display_Write_Byte+0x196>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa4:	4843      	ldr	r0, [pc, #268]	; (80010b4 <Display_Write_Byte+0x2a0>)
 8000fa6:	f001 fbd7 	bl	8002758 <HAL_GPIO_WritePin>
	}
	if(data[4] == 0x01)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3304      	adds	r3, #4
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d105      	bne.n	8000fc0 <Display_Write_Byte+0x1ac>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fba:	483e      	ldr	r0, [pc, #248]	; (80010b4 <Display_Write_Byte+0x2a0>)
 8000fbc:	f001 fbcc 	bl	8002758 <HAL_GPIO_WritePin>
	}

	if(data[5] == 0x00)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3305      	adds	r3, #5
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d105      	bne.n	8000fd6 <Display_Write_Byte+0x1c2>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd0:	4838      	ldr	r0, [pc, #224]	; (80010b4 <Display_Write_Byte+0x2a0>)
 8000fd2:	f001 fbc1 	bl	8002758 <HAL_GPIO_WritePin>
	}
	if(data[5] == 0x01)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3305      	adds	r3, #5
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d105      	bne.n	8000fec <Display_Write_Byte+0x1d8>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe6:	4833      	ldr	r0, [pc, #204]	; (80010b4 <Display_Write_Byte+0x2a0>)
 8000fe8:	f001 fbb6 	bl	8002758 <HAL_GPIO_WritePin>
	}

	if(data[6] == 0x00)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3306      	adds	r3, #6
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d105      	bne.n	8001002 <Display_Write_Byte+0x1ee>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffc:	482d      	ldr	r0, [pc, #180]	; (80010b4 <Display_Write_Byte+0x2a0>)
 8000ffe:	f001 fbab 	bl	8002758 <HAL_GPIO_WritePin>
	}
	if(data[6] == 0x01)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3306      	adds	r3, #6
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d105      	bne.n	8001018 <Display_Write_Byte+0x204>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001012:	4828      	ldr	r0, [pc, #160]	; (80010b4 <Display_Write_Byte+0x2a0>)
 8001014:	f001 fba0 	bl	8002758 <HAL_GPIO_WritePin>
	}

	if(data[7] == 0x00)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3307      	adds	r3, #7
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d105      	bne.n	800102e <Display_Write_Byte+0x21a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001028:	4822      	ldr	r0, [pc, #136]	; (80010b4 <Display_Write_Byte+0x2a0>)
 800102a:	f001 fb95 	bl	8002758 <HAL_GPIO_WritePin>
	}
	if(data[7] == 0x01)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3307      	adds	r3, #7
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d105      	bne.n	8001044 <Display_Write_Byte+0x230>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103e:	481d      	ldr	r0, [pc, #116]	; (80010b4 <Display_Write_Byte+0x2a0>)
 8001040:	f001 fb8a 	bl	8002758 <HAL_GPIO_WritePin>
	}

	delay_ns(40);
 8001044:	2028      	movs	r0, #40	; 0x28
 8001046:	f000 f87f 	bl	8001148 <delay_ns>

	//Invert WR
	if(WR == 0x00)
 800104a:	787b      	ldrb	r3, [r7, #1]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d107      	bne.n	8001060 <Display_Write_Byte+0x24c>
	{
		HAL_GPIO_WritePin(displayPinConfig.WR.port, displayPinConfig.WR.pin_number, GPIO_PIN_SET);
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <Display_Write_Byte+0x29c>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	4a16      	ldr	r2, [pc, #88]	; (80010b0 <Display_Write_Byte+0x29c>)
 8001056:	8991      	ldrh	r1, [r2, #12]
 8001058:	2201      	movs	r2, #1
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fb7c 	bl	8002758 <HAL_GPIO_WritePin>
	}
	if(WR == 0x01)
 8001060:	787b      	ldrb	r3, [r7, #1]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d107      	bne.n	8001076 <Display_Write_Byte+0x262>
	{
		HAL_GPIO_WritePin(displayPinConfig.WR.port, displayPinConfig.WR.pin_number, GPIO_PIN_RESET);
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <Display_Write_Byte+0x29c>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <Display_Write_Byte+0x29c>)
 800106c:	8991      	ldrh	r1, [r2, #12]
 800106e:	2200      	movs	r2, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f001 fb71 	bl	8002758 <HAL_GPIO_WritePin>
	}

	delay_ns(20);
 8001076:	2014      	movs	r0, #20
 8001078:	f000 f866 	bl	8001148 <delay_ns>

	//Invert A0
	if(A0 == 0x00)
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d107      	bne.n	8001092 <Display_Write_Byte+0x27e>
	{
		HAL_GPIO_WritePin(displayPinConfig.A0.port, displayPinConfig.A0.pin_number, GPIO_PIN_SET);
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <Display_Write_Byte+0x29c>)
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <Display_Write_Byte+0x29c>)
 8001088:	8a91      	ldrh	r1, [r2, #20]
 800108a:	2201      	movs	r2, #1
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fb63 	bl	8002758 <HAL_GPIO_WritePin>
	}
	if(A0 == 0x01)
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d107      	bne.n	80010a8 <Display_Write_Byte+0x294>
	{
		HAL_GPIO_WritePin(displayPinConfig.A0.port, displayPinConfig.A0.pin_number, GPIO_PIN_RESET);
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <Display_Write_Byte+0x29c>)
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <Display_Write_Byte+0x29c>)
 800109e:	8a91      	ldrh	r1, [r2, #20]
 80010a0:	2200      	movs	r2, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 fb58 	bl	8002758 <HAL_GPIO_WritePin>
	}

	//delay_ns(250);
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000002c 	.word	0x2000002c
 80010b4:	40010c00 	.word	0x40010c00

080010b8 <Display_Turn_On>:

void Display_Turn_On()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
	uint8_t data[8] = {0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01};
 80010be:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <Display_Turn_On+0x34>)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t A0 = 0x00;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
	uint8_t RD = 0x01;
 80010ce:	2301      	movs	r3, #1
 80010d0:	73bb      	strb	r3, [r7, #14]
	uint8_t WR = 0x00;
 80010d2:	2300      	movs	r3, #0
 80010d4:	737b      	strb	r3, [r7, #13]

	Display_Write_Byte(data, A0, RD, WR);
 80010d6:	7b7b      	ldrb	r3, [r7, #13]
 80010d8:	7bba      	ldrb	r2, [r7, #14]
 80010da:	7bf9      	ldrb	r1, [r7, #15]
 80010dc:	1d38      	adds	r0, r7, #4
 80010de:	f7ff fe99 	bl	8000e14 <Display_Write_Byte>
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	080054c0 	.word	0x080054c0

080010f0 <Display_All_Points_On>:

	Display_Write_Byte(data, A0, RD, WR);
}

void Display_All_Points_On()
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
	uint8_t data[8] = {0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01};
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <Display_All_Points_On+0x34>)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010fe:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t A0 = 0x00;
 8001102:	2300      	movs	r3, #0
 8001104:	73fb      	strb	r3, [r7, #15]
	uint8_t RD = 0x01;
 8001106:	2301      	movs	r3, #1
 8001108:	73bb      	strb	r3, [r7, #14]
	uint8_t WR = 0x00;
 800110a:	2300      	movs	r3, #0
 800110c:	737b      	strb	r3, [r7, #13]

	Display_Write_Byte(data, A0, RD, WR);
 800110e:	7b7b      	ldrb	r3, [r7, #13]
 8001110:	7bba      	ldrb	r2, [r7, #14]
 8001112:	7bf9      	ldrb	r1, [r7, #15]
 8001114:	1d38      	adds	r0, r7, #4
 8001116:	f7ff fe7d 	bl	8000e14 <Display_Write_Byte>
}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	080054d0 	.word	0x080054d0

08001128 <Display_Set_Timer>:

	Display_Write_Byte(data, A0, RD, WR);
}

void Display_Set_Timer(TIM_HandleTypeDef* _timer)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(_timer);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f002 f8c3 	bl	80032bc <HAL_TIM_Base_Start>
	displayTimer = _timer;
 8001136:	4a03      	ldr	r2, [pc, #12]	; (8001144 <Display_Set_Timer+0x1c>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000028 	.word	0x20000028

08001148 <delay_ns>:
	GPIO_PinState v15 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
	//data = Display_Read_Byte(&data);
}

void delay_ns(uint16_t ns)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(displayTimer,0);
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <delay_ns+0x30>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(displayTimer) < ns);
 800115c:	bf00      	nop
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <delay_ns+0x30>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	429a      	cmp	r2, r3
 800116a:	d3f8      	bcc.n	800115e <delay_ns+0x16>
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	20000028 	.word	0x20000028

0800117c <Strip_Set_Timer>:
 */

#include "led_strip.h"

void Strip_Set_Timer(TIM_HandleTypeDef* timer)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	Set_LED_Timer(timer);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f835 	bl	80011f4 <Set_LED_Timer>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <Strip_Progress_Bar_Single_Color>:

void Strip_Progress_Bar_Single_Color(uint8_t num_filled, enum COLOR color)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	460a      	mov	r2, r1
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	4613      	mov	r3, r2
 80011a0:	71bb      	strb	r3, [r7, #6]
	Clear_All_LED();
 80011a2:	f000 f9eb 	bl	800157c <Clear_All_LED>
	if(num_filled > 5) num_filled = 5;
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b05      	cmp	r3, #5
 80011aa:	d901      	bls.n	80011b0 <Strip_Progress_Bar_Single_Color+0x1e>
 80011ac:	2305      	movs	r3, #5
 80011ae:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < num_filled; i++) {
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	e008      	b.n	80011c8 <Strip_Progress_Bar_Single_Color+0x36>
		Set_LED_From_Color_Name(i, color);
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	79ba      	ldrb	r2, [r7, #6]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f9b2 	bl	8001526 <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < num_filled; i++) {
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	3301      	adds	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d3f2      	bcc.n	80011b6 <Strip_Progress_Bar_Single_Color+0x24>
	}
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <Strip_Clear>:

void Strip_Clear()
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
	Clear_All_LED();
 80011de:	f000 f9cd 	bl	800157c <Clear_All_LED>
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <Strip_Send>:

void Strip_Send()
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	af00      	add	r7, sp, #0
	WS2813_Send();
 80011ea:	f000 f8c1 	bl	8001370 <WS2813_Send>
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <Set_LED_Timer>:
*/

struct WS2813B_Config ws_config;

void Set_LED_Timer(TIM_HandleTypeDef* timer)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	ws_config.timer = timer;
 80011fc:	4a03      	ldr	r2, [pc, #12]	; (800120c <Set_LED_Timer+0x18>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	20000044 	.word	0x20000044

08001210 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
	ws_config.LED_Data[LEDnum][0] = LEDnum;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	b2d9      	uxtb	r1, r3
 8001222:	4a11      	ldr	r2, [pc, #68]	; (8001268 <Set_LED+0x58>)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	460a      	mov	r2, r1
 800122c:	711a      	strb	r2, [r3, #4]
	ws_config.LED_Data[LEDnum][1] = Green;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	b2d9      	uxtb	r1, r3
 8001232:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <Set_LED+0x58>)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	460a      	mov	r2, r1
 800123c:	715a      	strb	r2, [r3, #5]
	ws_config.LED_Data[LEDnum][2] = Red;
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	b2d9      	uxtb	r1, r3
 8001242:	4a09      	ldr	r2, [pc, #36]	; (8001268 <Set_LED+0x58>)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	460a      	mov	r2, r1
 800124c:	719a      	strb	r2, [r3, #6]
	ws_config.LED_Data[LEDnum][3] = Blue;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2d9      	uxtb	r1, r3
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <Set_LED+0x58>)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	460a      	mov	r2, r1
 800125c:	71da      	strb	r2, [r3, #7]
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20000044 	.word	0x20000044
 800126c:	00000000 	.word	0x00000000

08001270 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b2d      	cmp	r3, #45	; 0x2d
 800127c:	dd01      	ble.n	8001282 <Set_Brightness+0x12>
 800127e:	232d      	movs	r3, #45	; 0x2d
 8001280:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e063      	b.n	8001350 <Set_Brightness+0xe0>
	{
		ws_config.LED_Mod[i][0] = ws_config.LED_Data[i][0];
 8001288:	4a37      	ldr	r2, [pc, #220]	; (8001368 <Set_Brightness+0xf8>)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	7919      	ldrb	r1, [r3, #4]
 8001292:	4a35      	ldr	r2, [pc, #212]	; (8001368 <Set_Brightness+0xf8>)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	3306      	adds	r3, #6
 8001298:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 800129c:	2301      	movs	r3, #1
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	e050      	b.n	8001344 <Set_Brightness+0xd4>
		{
			float angle = 90-brightness;  // in degrees
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fcf9 	bl	8000ca0 <__aeabi_i2f>
 80012ae:	4603      	mov	r3, r0
 80012b0:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff f8b0 	bl	8000418 <__aeabi_f2d>
 80012b8:	a329      	add	r3, pc, #164	; (adr r3, 8001360 <Set_Brightness+0xf0>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff f903 	bl	80004c8 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <Set_Brightness+0xfc>)
 80012d0:	f7ff fa24 	bl	800071c <__aeabi_ddiv>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fbd6 	bl	8000a8c <__aeabi_d2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	60fb      	str	r3, [r7, #12]
			ws_config.LED_Mod[i][j] = (ws_config.LED_Data[i][j])/(tan(angle));
 80012e4:	4a20      	ldr	r2, [pc, #128]	; (8001368 <Set_Brightness+0xf8>)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	441a      	add	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4413      	add	r3, r2
 80012f0:	3304      	adds	r3, #4
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f87d 	bl	80003f4 <__aeabi_i2d>
 80012fa:	4604      	mov	r4, r0
 80012fc:	460d      	mov	r5, r1
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f7ff f88a 	bl	8000418 <__aeabi_f2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f003 f864 	bl	80043d8 <tan>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4620      	mov	r0, r4
 8001316:	4629      	mov	r1, r5
 8001318:	f7ff fa00 	bl	800071c <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fb92 	bl	8000a4c <__aeabi_d2uiz>
 8001328:	4603      	mov	r3, r0
 800132a:	b2d9      	uxtb	r1, r3
 800132c:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <Set_Brightness+0xf8>)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	441a      	add	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4413      	add	r3, r2
 8001338:	3318      	adds	r3, #24
 800133a:	460a      	mov	r2, r1
 800133c:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	3301      	adds	r3, #1
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	2b03      	cmp	r3, #3
 8001348:	ddab      	ble.n	80012a2 <Set_Brightness+0x32>
	for (int i=0; i<MAX_LED; i++)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b04      	cmp	r3, #4
 8001354:	dd98      	ble.n	8001288 <Set_Brightness+0x18>
		}
	}

#endif

}
 8001356:	bf00      	nop
 8001358:	bf00      	nop
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bdb0      	pop	{r4, r5, r7, pc}
 8001360:	53c8d4f1 	.word	0x53c8d4f1
 8001364:	400921fb 	.word	0x400921fb
 8001368:	20000044 	.word	0x20000044
 800136c:	40668000 	.word	0x40668000

08001370 <WS2813_Send>:

void WS2813_Send ()
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	e03a      	b.n	80013f6 <WS2813_Send+0x86>
	{
#if USE_BRIGHTNESS
		color = ((ws_config.LED_Mod[i][1]<<16) | (ws_config.LED_Mod[i][2]<<8) | (ws_config.LED_Mod[i][3]));
 8001380:	4a33      	ldr	r2, [pc, #204]	; (8001450 <WS2813_Send+0xe0>)
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	7e5b      	ldrb	r3, [r3, #25]
 800138a:	041a      	lsls	r2, r3, #16
 800138c:	4930      	ldr	r1, [pc, #192]	; (8001450 <WS2813_Send+0xe0>)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	7e9b      	ldrb	r3, [r3, #26]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	431a      	orrs	r2, r3
 800139a:	492d      	ldr	r1, [pc, #180]	; (8001450 <WS2813_Send+0xe0>)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	7edb      	ldrb	r3, [r3, #27]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	607b      	str	r3, [r7, #4]
#else
		color = ((ws_config.LED_Data[i][1]<<16) | (ws_config.LED_Data[i][2]<<8) | (ws_config.LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 80013a8:	2317      	movs	r3, #23
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	e01d      	b.n	80013ea <WS2813_Send+0x7a>
		{
			if (color&(1<<i))
 80013ae:	2201      	movs	r2, #1
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d007      	beq.n	80013d0 <WS2813_Send+0x60>
			{
				ws_config.pwmData[indx] = 48;  // 75% of 64
 80013c0:	4a23      	ldr	r2, [pc, #140]	; (8001450 <WS2813_Send+0xe0>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3314      	adds	r3, #20
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	2230      	movs	r2, #48	; 0x30
 80013cc:	809a      	strh	r2, [r3, #4]
 80013ce:	e006      	b.n	80013de <WS2813_Send+0x6e>
			}

			else ws_config.pwmData[indx] = 20;  // ~30% of 64
 80013d0:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <WS2813_Send+0xe0>)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3314      	adds	r3, #20
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	2214      	movs	r2, #20
 80013dc:	809a      	strh	r2, [r3, #4]

			indx++;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3301      	adds	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	dade      	bge.n	80013ae <WS2813_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	3301      	adds	r3, #1
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	ddc1      	ble.n	8001380 <WS2813_Send+0x10>
		}

	}

	//May need to be changed
	for (int i=0; i<50; i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	e00c      	b.n	800141c <WS2813_Send+0xac>
	{
		ws_config.pwmData[indx] = 0;
 8001402:	4a13      	ldr	r2, [pc, #76]	; (8001450 <WS2813_Send+0xe0>)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	3314      	adds	r3, #20
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	2200      	movs	r2, #0
 800140e:	809a      	strh	r2, [r3, #4]
		indx++;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3301      	adds	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	3301      	adds	r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2b31      	cmp	r3, #49	; 0x31
 8001420:	ddef      	ble.n	8001402 <WS2813_Send+0x92>
	}

	HAL_TIM_PWM_Start_DMA(ws_config.timer, TIM_CHANNEL_2, (uint32_t *)ws_config.pwmData, indx);
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <WS2813_Send+0xe0>)
 8001424:	6818      	ldr	r0, [r3, #0]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	b29b      	uxth	r3, r3
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <WS2813_Send+0xe4>)
 800142c:	2104      	movs	r1, #4
 800142e:	f001 ffe7 	bl	8003400 <HAL_TIM_PWM_Start_DMA>
	while (!ws_config.datasentflag){};
 8001432:	bf00      	nop
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <WS2813_Send+0xe0>)
 8001436:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0fa      	beq.n	8001434 <WS2813_Send+0xc4>
	ws_config.datasentflag = 0;
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <WS2813_Send+0xe0>)
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000044 	.word	0x20000044
 8001454:	20000070 	.word	0x20000070

08001458 <Color_To_RGB>:

void Color_To_RGB(struct RGB* rgb, enum COLOR color)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
	if(color == GREEN) {
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d108      	bne.n	800147c <Color_To_RGB+0x24>
		rgb->r = 0;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	22ff      	movs	r2, #255	; 0xff
 8001474:	705a      	strb	r2, [r3, #1]
		rgb->b = 20;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2214      	movs	r2, #20
 800147a:	709a      	strb	r2, [r3, #2]
	}

	if(color == YELLOW) {
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d108      	bne.n	8001494 <Color_To_RGB+0x3c>
		rgb->r = 255;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	22ff      	movs	r2, #255	; 0xff
 8001486:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	22ff      	movs	r2, #255	; 0xff
 800148c:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	709a      	strb	r2, [r3, #2]
	}

	if(color == RED) {
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d108      	bne.n	80014ac <Color_To_RGB+0x54>
		rgb->r = 255;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	22ff      	movs	r2, #255	; 0xff
 800149e:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	709a      	strb	r2, [r3, #2]
	}

	if(color == PURPLE) {
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d108      	bne.n	80014c4 <Color_To_RGB+0x6c>
		rgb->r = 255;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	22ff      	movs	r2, #255	; 0xff
 80014b6:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	705a      	strb	r2, [r3, #1]
		rgb->b = 255;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	22ff      	movs	r2, #255	; 0xff
 80014c2:	709a      	strb	r2, [r3, #2]
	}

	if(color == SKYBLUE) {
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d108      	bne.n	80014dc <Color_To_RGB+0x84>
		rgb->r = 0;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	22ff      	movs	r2, #255	; 0xff
 80014d4:	705a      	strb	r2, [r3, #1]
		rgb->b = 200;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	22c8      	movs	r2, #200	; 0xc8
 80014da:	709a      	strb	r2, [r3, #2]
	}

	if(color == CLEAR) {
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d108      	bne.n	80014f4 <Color_To_RGB+0x9c>
		rgb->r = 0;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	709a      	strb	r2, [r3, #2]
	}
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr

080014fe <Set_LED_From_RGB>:

void Set_LED_From_RGB(int LEDnum, struct RGB* rgb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
	Set_LED(LEDnum, rgb->r, rgb->g, rgb->b);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	785b      	ldrb	r3, [r3, #1]
 8001512:	461a      	mov	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	789b      	ldrb	r3, [r3, #2]
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff fe79 	bl	8001210 <Set_LED>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <Set_LED_From_Color_Name>:

void Set_LED_From_Color_Name(int LEDnum, enum COLOR color)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	460b      	mov	r3, r1
 8001530:	70fb      	strb	r3, [r7, #3]
	struct RGB rgb;
	Color_To_RGB(&rgb, color);
 8001532:	78fa      	ldrb	r2, [r7, #3]
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff8c 	bl	8001458 <Color_To_RGB>
	Set_LED_From_RGB(LEDnum, &rgb);
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4619      	mov	r1, r3
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffd9 	bl	80014fe <Set_LED_From_RGB>
}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(ws_config.timer, TIM_CHANNEL_2);
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2104      	movs	r1, #4
 8001562:	4618      	mov	r0, r3
 8001564:	f002 f8e6 	bl	8003734 <HAL_TIM_PWM_Stop_DMA>
	ws_config.datasentflag=1;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000044 	.word	0x20000044

0800157c <Clear_All_LED>:

void Clear_All_LED()
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_LED; i++)
 8001582:	2300      	movs	r3, #0
 8001584:	71fb      	strb	r3, [r7, #7]
 8001586:	e007      	b.n	8001598 <Clear_All_LED+0x1c>
	{
		Set_LED_From_Color_Name(i, CLEAR);
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	2105      	movs	r1, #5
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ffca 	bl	8001526 <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < MAX_LED; i++)
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	3301      	adds	r3, #1
 8001596:	71fb      	strb	r3, [r7, #7]
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	2b04      	cmp	r3, #4
 800159c:	d9f4      	bls.n	8001588 <Clear_All_LED+0xc>
	}
}
 800159e:	bf00      	nop
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ae:	f000 fb57 	bl	8001c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b2:	f000 f84d 	bl	8001650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b6:	f000 f9a9 	bl	800190c <MX_GPIO_Init>
  MX_DMA_Init();
 80015ba:	f000 f989 	bl	80018d0 <MX_DMA_Init>
  MX_I2C1_Init();
 80015be:	f000 f889 	bl	80016d4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80015c2:	f000 f905 	bl	80017d0 <MX_TIM2_Init>
  MX_TIM1_Init();
 80015c6:	f000 f8b3 	bl	8001730 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Strip_Set_Timer(&htim2);
 80015ca:	481c      	ldr	r0, [pc, #112]	; (800163c <main+0x94>)
 80015cc:	f7ff fdd6 	bl	800117c <Strip_Set_Timer>
  Strip_Clear();
 80015d0:	f7ff fe03 	bl	80011da <Strip_Clear>

  Display_Set_Timer(&htim1);
 80015d4:	481a      	ldr	r0, [pc, #104]	; (8001640 <main+0x98>)
 80015d6:	f7ff fda7 	bl	8001128 <Display_Set_Timer>
  Display_Configure_Pins(GPIO_PIN_5, GPIOA, GPIO_PIN_2, GPIOA, GPIO_PIN_4, GPIOA);
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <main+0x9c>)
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	2310      	movs	r3, #16
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <main+0x9c>)
 80015e4:	2204      	movs	r2, #4
 80015e6:	4917      	ldr	r1, [pc, #92]	; (8001644 <main+0x9c>)
 80015e8:	2020      	movs	r0, #32
 80015ea:	f7ff fbad 	bl	8000d48 <Display_Configure_Pins>
  Display_Turn_On();
 80015ee:	f7ff fd63 	bl	80010b8 <Display_Turn_On>
  Display_All_Points_On();
 80015f2:	f7ff fd7d 	bl	80010f0 <Display_All_Points_On>
  //Display_Data_Read();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t j = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	80fb      	strh	r3, [r7, #6]
  while (1)
  {
	  //printf("Hello SWV debugging prints...count = %d\n",j++);
	  Set_Brightness(40);
 80015fa:	2028      	movs	r0, #40	; 0x28
 80015fc:	f7ff fe38 	bl	8001270 <Set_Brightness>
	  Strip_Progress_Bar_Single_Color((j/20)%6, RED);
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	4a11      	ldr	r2, [pc, #68]	; (8001648 <main+0xa0>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	b29a      	uxth	r2, r3
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <main+0xa4>)
 800160e:	fba3 1302 	umull	r1, r3, r3, r2
 8001612:	0899      	lsrs	r1, r3, #2
 8001614:	460b      	mov	r3, r1
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	440b      	add	r3, r1
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	b29b      	uxth	r3, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2102      	movs	r1, #2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fdb4 	bl	8001192 <Strip_Progress_Bar_Single_Color>

	  Strip_Send();
 800162a:	f7ff fddc 	bl	80011e6 <Strip_Send>
	  HAL_Delay (10);
 800162e:	200a      	movs	r0, #10
 8001630:	f000 fb78 	bl	8001d24 <HAL_Delay>
	  j++;
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	3301      	adds	r3, #1
 8001638:	80fb      	strh	r3, [r7, #6]
	  Set_Brightness(40);
 800163a:	e7de      	b.n	80015fa <main+0x52>
 800163c:	20000264 	.word	0x20000264
 8001640:	2000021c 	.word	0x2000021c
 8001644:	40010800 	.word	0x40010800
 8001648:	cccccccd 	.word	0xcccccccd
 800164c:	aaaaaaab 	.word	0xaaaaaaab

08001650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b090      	sub	sp, #64	; 0x40
 8001654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 0318 	add.w	r3, r7, #24
 800165a:	2228      	movs	r2, #40	; 0x28
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f002 feb2 	bl	80043c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001672:	2302      	movs	r3, #2
 8001674:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001676:	2301      	movs	r3, #1
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800167a:	2310      	movs	r3, #16
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167e:	2302      	movs	r3, #2
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001682:	2300      	movs	r3, #0
 8001684:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001686:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800168a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168c:	f107 0318 	add.w	r3, r7, #24
 8001690:	4618      	mov	r0, r3
 8001692:	f001 f9bd 	bl	8002a10 <HAL_RCC_OscConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800169c:	f000 f98a 	bl	80019b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a0:	230f      	movs	r3, #15
 80016a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a4:	2302      	movs	r3, #2
 80016a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2102      	movs	r1, #2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 fc2a 	bl	8002f14 <HAL_RCC_ClockConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80016c6:	f000 f975 	bl	80019b4 <Error_Handler>
  }
}
 80016ca:	bf00      	nop
 80016cc:	3740      	adds	r7, #64	; 0x40
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <MX_I2C1_Init+0x50>)
 80016da:	4a13      	ldr	r2, [pc, #76]	; (8001728 <MX_I2C1_Init+0x54>)
 80016dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_I2C1_Init+0x50>)
 80016e0:	4a12      	ldr	r2, [pc, #72]	; (800172c <MX_I2C1_Init+0x58>)
 80016e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_I2C1_Init+0x50>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_I2C1_Init+0x50>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_I2C1_Init+0x50>)
 80016f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <MX_I2C1_Init+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_I2C1_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <MX_I2C1_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_I2C1_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	; (8001724 <MX_I2C1_Init+0x50>)
 8001712:	f001 f839 	bl	8002788 <HAL_I2C_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800171c:	f000 f94a 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200001c8 	.word	0x200001c8
 8001728:	40005400 	.word	0x40005400
 800172c:	000186a0 	.word	0x000186a0

08001730 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001736:	f107 0308 	add.w	r3, r7, #8
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001744:	463b      	mov	r3, r7
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800174c:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <MX_TIM1_Init+0x98>)
 800174e:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <MX_TIM1_Init+0x9c>)
 8001750:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_TIM1_Init+0x98>)
 8001754:	2203      	movs	r2, #3
 8001756:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <MX_TIM1_Init+0x98>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_TIM1_Init+0x98>)
 8001760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001764:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_TIM1_Init+0x98>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_TIM1_Init+0x98>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <MX_TIM1_Init+0x98>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001778:	4813      	ldr	r0, [pc, #76]	; (80017c8 <MX_TIM1_Init+0x98>)
 800177a:	f001 fd4f 	bl	800321c <HAL_TIM_Base_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001784:	f000 f916 	bl	80019b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4619      	mov	r1, r3
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <MX_TIM1_Init+0x98>)
 8001796:	f002 f949 	bl	8003a2c <HAL_TIM_ConfigClockSource>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80017a0:	f000 f908 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_TIM1_Init+0x98>)
 80017b2:	f002 fd87 	bl	80042c4 <HAL_TIMEx_MasterConfigSynchronization>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80017bc:	f000 f8fa 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000021c 	.word	0x2000021c
 80017cc:	40012c00 	.word	0x40012c00

080017d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08e      	sub	sp, #56	; 0x38
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e4:	f107 0320 	add.w	r3, r7, #32
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	615a      	str	r2, [r3, #20]
 80017fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001800:	4b32      	ldr	r3, [pc, #200]	; (80018cc <MX_TIM2_Init+0xfc>)
 8001802:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001806:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001808:	4b30      	ldr	r3, [pc, #192]	; (80018cc <MX_TIM2_Init+0xfc>)
 800180a:	2200      	movs	r2, #0
 800180c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180e:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <MX_TIM2_Init+0xfc>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64-1;
 8001814:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <MX_TIM2_Init+0xfc>)
 8001816:	223f      	movs	r2, #63	; 0x3f
 8001818:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181a:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <MX_TIM2_Init+0xfc>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <MX_TIM2_Init+0xfc>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001826:	4829      	ldr	r0, [pc, #164]	; (80018cc <MX_TIM2_Init+0xfc>)
 8001828:	f001 fcf8 	bl	800321c <HAL_TIM_Base_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001832:	f000 f8bf 	bl	80019b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800183c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001840:	4619      	mov	r1, r3
 8001842:	4822      	ldr	r0, [pc, #136]	; (80018cc <MX_TIM2_Init+0xfc>)
 8001844:	f002 f8f2 	bl	8003a2c <HAL_TIM_ConfigClockSource>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800184e:	f000 f8b1 	bl	80019b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001852:	481e      	ldr	r0, [pc, #120]	; (80018cc <MX_TIM2_Init+0xfc>)
 8001854:	f001 fd7c 	bl	8003350 <HAL_TIM_PWM_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800185e:	f000 f8a9 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800186a:	f107 0320 	add.w	r3, r7, #32
 800186e:	4619      	mov	r1, r3
 8001870:	4816      	ldr	r0, [pc, #88]	; (80018cc <MX_TIM2_Init+0xfc>)
 8001872:	f002 fd27 	bl	80042c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800187c:	f000 f89a 	bl	80019b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001880:	2360      	movs	r3, #96	; 0x60
 8001882:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	2200      	movs	r2, #0
 8001894:	4619      	mov	r1, r3
 8001896:	480d      	ldr	r0, [pc, #52]	; (80018cc <MX_TIM2_Init+0xfc>)
 8001898:	f002 f80a 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80018a2:	f000 f887 	bl	80019b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2204      	movs	r2, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4807      	ldr	r0, [pc, #28]	; (80018cc <MX_TIM2_Init+0xfc>)
 80018ae:	f001 ffff 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80018b8:	f000 f87c 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018bc:	4803      	ldr	r0, [pc, #12]	; (80018cc <MX_TIM2_Init+0xfc>)
 80018be:	f000 f941 	bl	8001b44 <HAL_TIM_MspPostInit>

}
 80018c2:	bf00      	nop
 80018c4:	3738      	adds	r7, #56	; 0x38
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000264 	.word	0x20000264

080018d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_DMA_Init+0x38>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <MX_DMA_Init+0x38>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6153      	str	r3, [r2, #20]
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_DMA_Init+0x38>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	2011      	movs	r0, #17
 80018f4:	f000 fb11 	bl	8001f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80018f8:	2011      	movs	r0, #17
 80018fa:	f000 fb2a 	bl	8001f52 <HAL_NVIC_EnableIRQ>

}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000

0800190c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001920:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <MX_GPIO_Init+0x9c>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a20      	ldr	r2, [pc, #128]	; (80019a8 <MX_GPIO_Init+0x9c>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <MX_GPIO_Init+0x9c>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <MX_GPIO_Init+0x9c>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a1a      	ldr	r2, [pc, #104]	; (80019a8 <MX_GPIO_Init+0x9c>)
 800193e:	f043 0308 	orr.w	r3, r3, #8
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <MX_GPIO_Init+0x9c>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	213c      	movs	r1, #60	; 0x3c
 8001954:	4815      	ldr	r0, [pc, #84]	; (80019ac <MX_GPIO_Init+0xa0>)
 8001956:	f000 feff 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001960:	4813      	ldr	r0, [pc, #76]	; (80019b0 <MX_GPIO_Init+0xa4>)
 8001962:	f000 fef9 	bl	8002758 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001966:	233c      	movs	r3, #60	; 0x3c
 8001968:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2302      	movs	r3, #2
 8001974:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	4619      	mov	r1, r3
 800197c:	480b      	ldr	r0, [pc, #44]	; (80019ac <MX_GPIO_Init+0xa0>)
 800197e:	f000 fd67 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001982:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001986:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2302      	movs	r3, #2
 8001992:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	f107 0308 	add.w	r3, r7, #8
 8001998:	4619      	mov	r1, r3
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_GPIO_Init+0xa4>)
 800199c:	f000 fd58 	bl	8002450 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019a0:	bf00      	nop
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010800 	.word	0x40010800
 80019b0:	40010c00 	.word	0x40010c00

080019b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
}
 80019ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019bc:	e7fe      	b.n	80019bc <Error_Handler+0x8>
	...

080019c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HAL_MspInit+0x40>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <HAL_MspInit+0x40>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6193      	str	r3, [r2, #24]
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_MspInit+0x40>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <HAL_MspInit+0x40>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <HAL_MspInit+0x40>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_MspInit+0x40>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	40021000 	.word	0x40021000

08001a04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a15      	ldr	r2, [pc, #84]	; (8001a74 <HAL_I2C_MspInit+0x70>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d123      	bne.n	8001a6c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <HAL_I2C_MspInit+0x74>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <HAL_I2C_MspInit+0x74>)
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_I2C_MspInit+0x74>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a3c:	23c0      	movs	r3, #192	; 0xc0
 8001a3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a40:	2312      	movs	r3, #18
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480b      	ldr	r0, [pc, #44]	; (8001a7c <HAL_I2C_MspInit+0x78>)
 8001a50:	f000 fcfe 	bl	8002450 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_I2C_MspInit+0x74>)
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_I2C_MspInit+0x74>)
 8001a5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a5e:	61d3      	str	r3, [r2, #28]
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_I2C_MspInit+0x74>)
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a6c:	bf00      	nop
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40005400 	.word	0x40005400
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40010c00 	.word	0x40010c00

08001a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a29      	ldr	r2, [pc, #164]	; (8001b34 <HAL_TIM_Base_MspInit+0xb4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d10c      	bne.n	8001aac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <HAL_TIM_Base_MspInit+0xb8>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	4a28      	ldr	r2, [pc, #160]	; (8001b38 <HAL_TIM_Base_MspInit+0xb8>)
 8001a98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a9c:	6193      	str	r3, [r2, #24]
 8001a9e:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <HAL_TIM_Base_MspInit+0xb8>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001aaa:	e03e      	b.n	8001b2a <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab4:	d139      	bne.n	8001b2a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_TIM_Base_MspInit+0xb8>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a1f      	ldr	r2, [pc, #124]	; (8001b38 <HAL_TIM_Base_MspInit+0xb8>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_TIM_Base_MspInit+0xb8>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <HAL_TIM_Base_MspInit+0xc0>)
 8001ad2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ada:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aec:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001af0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001af4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001b02:	480e      	ldr	r0, [pc, #56]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001b04:	f000 fa40 	bl	8001f88 <HAL_DMA_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 8001b0e:	f7ff ff51 	bl	80019b4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
 8001b18:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a06      	ldr	r2, [pc, #24]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001b22:	631a      	str	r2, [r3, #48]	; 0x30
 8001b24:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40012c00 	.word	0x40012c00
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	200002ac 	.word	0x200002ac
 8001b40:	40020080 	.word	0x40020080

08001b44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b62:	d117      	bne.n	8001b94 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b64:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_TIM_MspPostInit+0x58>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <HAL_TIM_MspPostInit+0x58>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_TIM_MspPostInit+0x58>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2302      	movs	r3, #2
 8001b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <HAL_TIM_MspPostInit+0x5c>)
 8001b90:	f000 fc5e 	bl	8002450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b94:	bf00      	nop
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40010800 	.word	0x40010800

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <NMI_Handler+0x4>

08001baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <HardFault_Handler+0x4>

08001bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <MemManage_Handler+0x4>

08001bb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <BusFault_Handler+0x4>

08001bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <UsageFault_Handler+0x4>

08001bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bea:	f000 f87f 	bl	8001cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <DMA1_Channel7_IRQHandler+0x10>)
 8001bfa:	f000 faf5 	bl	80021e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200002ac 	.word	0x200002ac

08001c08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c14:	480c      	ldr	r0, [pc, #48]	; (8001c48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c16:	490d      	ldr	r1, [pc, #52]	; (8001c4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c18:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c1c:	e002      	b.n	8001c24 <LoopCopyDataInit>

08001c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c22:	3304      	adds	r3, #4

08001c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c28:	d3f9      	bcc.n	8001c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c2c:	4c0a      	ldr	r4, [pc, #40]	; (8001c58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c30:	e001      	b.n	8001c36 <LoopFillZerobss>

08001c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c34:	3204      	adds	r2, #4

08001c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c38:	d3fb      	bcc.n	8001c32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c3a:	f7ff ffe5 	bl	8001c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f002 fb9f 	bl	8004380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c42:	f7ff fcb1 	bl	80015a8 <main>
  bx lr
 8001c46:	4770      	bx	lr
  ldr r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c50:	080056f8 	.word	0x080056f8
  ldr r2, =_sbss
 8001c54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c58:	200002f4 	.word	0x200002f4

08001c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC1_2_IRQHandler>
	...

08001c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_Init+0x28>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a07      	ldr	r2, [pc, #28]	; (8001c88 <HAL_Init+0x28>)
 8001c6a:	f043 0310 	orr.w	r3, r3, #16
 8001c6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c70:	2003      	movs	r0, #3
 8001c72:	f000 f947 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c76:	200f      	movs	r0, #15
 8001c78:	f000 f808 	bl	8001c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c7c:	f7ff fea0 	bl	80019c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40022000 	.word	0x40022000

08001c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_InitTick+0x54>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_InitTick+0x58>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 f95f 	bl	8001f6e <HAL_SYSTICK_Config>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00e      	b.n	8001cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b0f      	cmp	r3, #15
 8001cbe:	d80a      	bhi.n	8001cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f000 f927 	bl	8001f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ccc:	4a06      	ldr	r2, [pc, #24]	; (8001ce8 <HAL_InitTick+0x5c>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e000      	b.n	8001cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	20000004 	.word	0x20000004

08001cec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_IncTick+0x1c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_IncTick+0x20>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a03      	ldr	r2, [pc, #12]	; (8001d0c <HAL_IncTick+0x20>)
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	200002f0 	.word	0x200002f0

08001d10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b02      	ldr	r3, [pc, #8]	; (8001d20 <HAL_GetTick+0x10>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	200002f0 	.word	0x200002f0

08001d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d2c:	f7ff fff0 	bl	8001d10 <HAL_GetTick>
 8001d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d005      	beq.n	8001d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_Delay+0x44>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d4a:	bf00      	nop
 8001d4c:	f7ff ffe0 	bl	8001d10 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d8f7      	bhi.n	8001d4c <HAL_Delay+0x28>
  {
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000008 	.word	0x20000008

08001d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9e:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60d3      	str	r3, [r2, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <__NVIC_GetPriorityGrouping+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 0307 	and.w	r3, r3, #7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0b      	blt.n	8001dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4906      	ldr	r1, [pc, #24]	; (8001e04 <__NVIC_EnableIRQ+0x34>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	2001      	movs	r0, #1
 8001df2:	fa00 f202 	lsl.w	r2, r0, r2
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	e000e100 	.word	0xe000e100

08001e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	db0a      	blt.n	8001e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	490c      	ldr	r1, [pc, #48]	; (8001e54 <__NVIC_SetPriority+0x4c>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	0112      	lsls	r2, r2, #4
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e30:	e00a      	b.n	8001e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4908      	ldr	r1, [pc, #32]	; (8001e58 <__NVIC_SetPriority+0x50>)
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	440b      	add	r3, r1
 8001e46:	761a      	strb	r2, [r3, #24]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000e100 	.word	0xe000e100
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f1c3 0307 	rsb	r3, r3, #7
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	bf28      	it	cs
 8001e7a:	2304      	movcs	r3, #4
 8001e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3304      	adds	r3, #4
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d902      	bls.n	8001e8c <NVIC_EncodePriority+0x30>
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3b03      	subs	r3, #3
 8001e8a:	e000      	b.n	8001e8e <NVIC_EncodePriority+0x32>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	f04f 32ff 	mov.w	r2, #4294967295
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	4313      	orrs	r3, r2
         );
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	; 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f7ff ff90 	bl	8001e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff2d 	bl	8001d6c <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2c:	f7ff ff42 	bl	8001db4 <__NVIC_GetPriorityGrouping>
 8001f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	f7ff ff90 	bl	8001e5c <NVIC_EncodePriority>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff5f 	bl	8001e08 <__NVIC_SetPriority>
}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff35 	bl	8001dd0 <__NVIC_EnableIRQ>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ffa2 	bl	8001ec0 <SysTick_Config>
 8001f7c:	4603      	mov	r3, r0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e043      	b.n	8002026 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b22      	ldr	r3, [pc, #136]	; (8002030 <HAL_DMA_Init+0xa8>)
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a22      	ldr	r2, [pc, #136]	; (8002034 <HAL_DMA_Init+0xac>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	009a      	lsls	r2, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a1f      	ldr	r2, [pc, #124]	; (8002038 <HAL_DMA_Init+0xb0>)
 8001fba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fd2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	bffdfff8 	.word	0xbffdfff8
 8002034:	cccccccd 	.word	0xcccccccd
 8002038:	40020000 	.word	0x40020000

0800203c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_DMA_Start_IT+0x20>
 8002058:	2302      	movs	r3, #2
 800205a:	e04a      	b.n	80020f2 <HAL_DMA_Start_IT+0xb6>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800206a:	2b01      	cmp	r3, #1
 800206c:	d13a      	bne.n	80020e4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2202      	movs	r2, #2
 8002072:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f9ae 	bl	80023f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 020e 	orr.w	r2, r2, #14
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	e00f      	b.n	80020d2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0204 	bic.w	r2, r2, #4
 80020c0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 020a 	orr.w	r2, r2, #10
 80020d0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	e005      	b.n	80020f0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020ec:	2302      	movs	r3, #2
 80020ee:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800210e:	2b02      	cmp	r3, #2
 8002110:	d005      	beq.n	800211e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2204      	movs	r2, #4
 8002116:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e051      	b.n	80021c2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 020e 	bic.w	r2, r2, #14
 800212c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a22      	ldr	r2, [pc, #136]	; (80021cc <HAL_DMA_Abort_IT+0xd0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d029      	beq.n	800219c <HAL_DMA_Abort_IT+0xa0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a20      	ldr	r2, [pc, #128]	; (80021d0 <HAL_DMA_Abort_IT+0xd4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d022      	beq.n	8002198 <HAL_DMA_Abort_IT+0x9c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <HAL_DMA_Abort_IT+0xd8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d01a      	beq.n	8002192 <HAL_DMA_Abort_IT+0x96>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <HAL_DMA_Abort_IT+0xdc>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d012      	beq.n	800218c <HAL_DMA_Abort_IT+0x90>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <HAL_DMA_Abort_IT+0xe0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00a      	beq.n	8002186 <HAL_DMA_Abort_IT+0x8a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1a      	ldr	r2, [pc, #104]	; (80021e0 <HAL_DMA_Abort_IT+0xe4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d102      	bne.n	8002180 <HAL_DMA_Abort_IT+0x84>
 800217a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800217e:	e00e      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 8002180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002184:	e00b      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 8002186:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800218a:	e008      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 800218c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002190:	e005      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 8002192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002196:	e002      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 8002198:	2310      	movs	r3, #16
 800219a:	e000      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 800219c:	2301      	movs	r3, #1
 800219e:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_DMA_Abort_IT+0xe8>)
 80021a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
    } 
  }
  return status;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40020008 	.word	0x40020008
 80021d0:	4002001c 	.word	0x4002001c
 80021d4:	40020030 	.word	0x40020030
 80021d8:	40020044 	.word	0x40020044
 80021dc:	40020058 	.word	0x40020058
 80021e0:	4002006c 	.word	0x4002006c
 80021e4:	40020000 	.word	0x40020000

080021e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	2204      	movs	r2, #4
 8002206:	409a      	lsls	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d04f      	beq.n	80022b0 <HAL_DMA_IRQHandler+0xc8>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	2b00      	cmp	r3, #0
 8002218:	d04a      	beq.n	80022b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d107      	bne.n	8002238 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0204 	bic.w	r2, r2, #4
 8002236:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a66      	ldr	r2, [pc, #408]	; (80023d8 <HAL_DMA_IRQHandler+0x1f0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d029      	beq.n	8002296 <HAL_DMA_IRQHandler+0xae>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a65      	ldr	r2, [pc, #404]	; (80023dc <HAL_DMA_IRQHandler+0x1f4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d022      	beq.n	8002292 <HAL_DMA_IRQHandler+0xaa>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a63      	ldr	r2, [pc, #396]	; (80023e0 <HAL_DMA_IRQHandler+0x1f8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01a      	beq.n	800228c <HAL_DMA_IRQHandler+0xa4>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a62      	ldr	r2, [pc, #392]	; (80023e4 <HAL_DMA_IRQHandler+0x1fc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d012      	beq.n	8002286 <HAL_DMA_IRQHandler+0x9e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a60      	ldr	r2, [pc, #384]	; (80023e8 <HAL_DMA_IRQHandler+0x200>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00a      	beq.n	8002280 <HAL_DMA_IRQHandler+0x98>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a5f      	ldr	r2, [pc, #380]	; (80023ec <HAL_DMA_IRQHandler+0x204>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d102      	bne.n	800227a <HAL_DMA_IRQHandler+0x92>
 8002274:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002278:	e00e      	b.n	8002298 <HAL_DMA_IRQHandler+0xb0>
 800227a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800227e:	e00b      	b.n	8002298 <HAL_DMA_IRQHandler+0xb0>
 8002280:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002284:	e008      	b.n	8002298 <HAL_DMA_IRQHandler+0xb0>
 8002286:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800228a:	e005      	b.n	8002298 <HAL_DMA_IRQHandler+0xb0>
 800228c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002290:	e002      	b.n	8002298 <HAL_DMA_IRQHandler+0xb0>
 8002292:	2340      	movs	r3, #64	; 0x40
 8002294:	e000      	b.n	8002298 <HAL_DMA_IRQHandler+0xb0>
 8002296:	2304      	movs	r3, #4
 8002298:	4a55      	ldr	r2, [pc, #340]	; (80023f0 <HAL_DMA_IRQHandler+0x208>)
 800229a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 8094 	beq.w	80023ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022ae:	e08e      	b.n	80023ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	2202      	movs	r2, #2
 80022b6:	409a      	lsls	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d056      	beq.n	800236e <HAL_DMA_IRQHandler+0x186>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d051      	beq.n	800236e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10b      	bne.n	80022f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 020a 	bic.w	r2, r2, #10
 80022e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a38      	ldr	r2, [pc, #224]	; (80023d8 <HAL_DMA_IRQHandler+0x1f0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d029      	beq.n	800234e <HAL_DMA_IRQHandler+0x166>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a37      	ldr	r2, [pc, #220]	; (80023dc <HAL_DMA_IRQHandler+0x1f4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d022      	beq.n	800234a <HAL_DMA_IRQHandler+0x162>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a35      	ldr	r2, [pc, #212]	; (80023e0 <HAL_DMA_IRQHandler+0x1f8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d01a      	beq.n	8002344 <HAL_DMA_IRQHandler+0x15c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a34      	ldr	r2, [pc, #208]	; (80023e4 <HAL_DMA_IRQHandler+0x1fc>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d012      	beq.n	800233e <HAL_DMA_IRQHandler+0x156>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a32      	ldr	r2, [pc, #200]	; (80023e8 <HAL_DMA_IRQHandler+0x200>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00a      	beq.n	8002338 <HAL_DMA_IRQHandler+0x150>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a31      	ldr	r2, [pc, #196]	; (80023ec <HAL_DMA_IRQHandler+0x204>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d102      	bne.n	8002332 <HAL_DMA_IRQHandler+0x14a>
 800232c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002330:	e00e      	b.n	8002350 <HAL_DMA_IRQHandler+0x168>
 8002332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002336:	e00b      	b.n	8002350 <HAL_DMA_IRQHandler+0x168>
 8002338:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800233c:	e008      	b.n	8002350 <HAL_DMA_IRQHandler+0x168>
 800233e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002342:	e005      	b.n	8002350 <HAL_DMA_IRQHandler+0x168>
 8002344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002348:	e002      	b.n	8002350 <HAL_DMA_IRQHandler+0x168>
 800234a:	2320      	movs	r3, #32
 800234c:	e000      	b.n	8002350 <HAL_DMA_IRQHandler+0x168>
 800234e:	2302      	movs	r3, #2
 8002350:	4a27      	ldr	r2, [pc, #156]	; (80023f0 <HAL_DMA_IRQHandler+0x208>)
 8002352:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	2b00      	cmp	r3, #0
 8002362:	d034      	beq.n	80023ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800236c:	e02f      	b.n	80023ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	2208      	movs	r2, #8
 8002374:	409a      	lsls	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d028      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x1e8>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d023      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 020e 	bic.w	r2, r2, #14
 8002396:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f202 	lsl.w	r2, r1, r2
 80023a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d004      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	4798      	blx	r3
    }
  }
  return;
 80023ce:	bf00      	nop
 80023d0:	bf00      	nop
}
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40020008 	.word	0x40020008
 80023dc:	4002001c 	.word	0x4002001c
 80023e0:	40020030 	.word	0x40020030
 80023e4:	40020044 	.word	0x40020044
 80023e8:	40020058 	.word	0x40020058
 80023ec:	4002006c 	.word	0x4002006c
 80023f0:	40020000 	.word	0x40020000

080023f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240a:	2101      	movs	r1, #1
 800240c:	fa01 f202 	lsl.w	r2, r1, r2
 8002410:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b10      	cmp	r3, #16
 8002420:	d108      	bne.n	8002434 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002432:	e007      	b.n	8002444 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	60da      	str	r2, [r3, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr
	...

08002450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002450:	b480      	push	{r7}
 8002452:	b08b      	sub	sp, #44	; 0x2c
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800245a:	2300      	movs	r3, #0
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800245e:	2300      	movs	r3, #0
 8002460:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002462:	e169      	b.n	8002738 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002464:	2201      	movs	r2, #1
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	429a      	cmp	r2, r3
 800247e:	f040 8158 	bne.w	8002732 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4a9a      	ldr	r2, [pc, #616]	; (80026f0 <HAL_GPIO_Init+0x2a0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d05e      	beq.n	800254a <HAL_GPIO_Init+0xfa>
 800248c:	4a98      	ldr	r2, [pc, #608]	; (80026f0 <HAL_GPIO_Init+0x2a0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d875      	bhi.n	800257e <HAL_GPIO_Init+0x12e>
 8002492:	4a98      	ldr	r2, [pc, #608]	; (80026f4 <HAL_GPIO_Init+0x2a4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d058      	beq.n	800254a <HAL_GPIO_Init+0xfa>
 8002498:	4a96      	ldr	r2, [pc, #600]	; (80026f4 <HAL_GPIO_Init+0x2a4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d86f      	bhi.n	800257e <HAL_GPIO_Init+0x12e>
 800249e:	4a96      	ldr	r2, [pc, #600]	; (80026f8 <HAL_GPIO_Init+0x2a8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d052      	beq.n	800254a <HAL_GPIO_Init+0xfa>
 80024a4:	4a94      	ldr	r2, [pc, #592]	; (80026f8 <HAL_GPIO_Init+0x2a8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d869      	bhi.n	800257e <HAL_GPIO_Init+0x12e>
 80024aa:	4a94      	ldr	r2, [pc, #592]	; (80026fc <HAL_GPIO_Init+0x2ac>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d04c      	beq.n	800254a <HAL_GPIO_Init+0xfa>
 80024b0:	4a92      	ldr	r2, [pc, #584]	; (80026fc <HAL_GPIO_Init+0x2ac>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d863      	bhi.n	800257e <HAL_GPIO_Init+0x12e>
 80024b6:	4a92      	ldr	r2, [pc, #584]	; (8002700 <HAL_GPIO_Init+0x2b0>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d046      	beq.n	800254a <HAL_GPIO_Init+0xfa>
 80024bc:	4a90      	ldr	r2, [pc, #576]	; (8002700 <HAL_GPIO_Init+0x2b0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d85d      	bhi.n	800257e <HAL_GPIO_Init+0x12e>
 80024c2:	2b12      	cmp	r3, #18
 80024c4:	d82a      	bhi.n	800251c <HAL_GPIO_Init+0xcc>
 80024c6:	2b12      	cmp	r3, #18
 80024c8:	d859      	bhi.n	800257e <HAL_GPIO_Init+0x12e>
 80024ca:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <HAL_GPIO_Init+0x80>)
 80024cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d0:	0800254b 	.word	0x0800254b
 80024d4:	08002525 	.word	0x08002525
 80024d8:	08002537 	.word	0x08002537
 80024dc:	08002579 	.word	0x08002579
 80024e0:	0800257f 	.word	0x0800257f
 80024e4:	0800257f 	.word	0x0800257f
 80024e8:	0800257f 	.word	0x0800257f
 80024ec:	0800257f 	.word	0x0800257f
 80024f0:	0800257f 	.word	0x0800257f
 80024f4:	0800257f 	.word	0x0800257f
 80024f8:	0800257f 	.word	0x0800257f
 80024fc:	0800257f 	.word	0x0800257f
 8002500:	0800257f 	.word	0x0800257f
 8002504:	0800257f 	.word	0x0800257f
 8002508:	0800257f 	.word	0x0800257f
 800250c:	0800257f 	.word	0x0800257f
 8002510:	0800257f 	.word	0x0800257f
 8002514:	0800252d 	.word	0x0800252d
 8002518:	08002541 	.word	0x08002541
 800251c:	4a79      	ldr	r2, [pc, #484]	; (8002704 <HAL_GPIO_Init+0x2b4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002522:	e02c      	b.n	800257e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	623b      	str	r3, [r7, #32]
          break;
 800252a:	e029      	b.n	8002580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	3304      	adds	r3, #4
 8002532:	623b      	str	r3, [r7, #32]
          break;
 8002534:	e024      	b.n	8002580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	3308      	adds	r3, #8
 800253c:	623b      	str	r3, [r7, #32]
          break;
 800253e:	e01f      	b.n	8002580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	330c      	adds	r3, #12
 8002546:	623b      	str	r3, [r7, #32]
          break;
 8002548:	e01a      	b.n	8002580 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d102      	bne.n	8002558 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002552:	2304      	movs	r3, #4
 8002554:	623b      	str	r3, [r7, #32]
          break;
 8002556:	e013      	b.n	8002580 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d105      	bne.n	800256c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002560:	2308      	movs	r3, #8
 8002562:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	611a      	str	r2, [r3, #16]
          break;
 800256a:	e009      	b.n	8002580 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800256c:	2308      	movs	r3, #8
 800256e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	615a      	str	r2, [r3, #20]
          break;
 8002576:	e003      	b.n	8002580 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002578:	2300      	movs	r3, #0
 800257a:	623b      	str	r3, [r7, #32]
          break;
 800257c:	e000      	b.n	8002580 <HAL_GPIO_Init+0x130>
          break;
 800257e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2bff      	cmp	r3, #255	; 0xff
 8002584:	d801      	bhi.n	800258a <HAL_GPIO_Init+0x13a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	e001      	b.n	800258e <HAL_GPIO_Init+0x13e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3304      	adds	r3, #4
 800258e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2bff      	cmp	r3, #255	; 0xff
 8002594:	d802      	bhi.n	800259c <HAL_GPIO_Init+0x14c>
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	e002      	b.n	80025a2 <HAL_GPIO_Init+0x152>
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	3b08      	subs	r3, #8
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	210f      	movs	r1, #15
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	fa01 f303 	lsl.w	r3, r1, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	401a      	ands	r2, r3
 80025b4:	6a39      	ldr	r1, [r7, #32]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	431a      	orrs	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80b1 	beq.w	8002732 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025d0:	4b4d      	ldr	r3, [pc, #308]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	4a4c      	ldr	r2, [pc, #304]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6193      	str	r3, [r2, #24]
 80025dc:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025e8:	4a48      	ldr	r2, [pc, #288]	; (800270c <HAL_GPIO_Init+0x2bc>)
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	3302      	adds	r3, #2
 80025f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	220f      	movs	r2, #15
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4013      	ands	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a40      	ldr	r2, [pc, #256]	; (8002710 <HAL_GPIO_Init+0x2c0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d013      	beq.n	800263c <HAL_GPIO_Init+0x1ec>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a3f      	ldr	r2, [pc, #252]	; (8002714 <HAL_GPIO_Init+0x2c4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00d      	beq.n	8002638 <HAL_GPIO_Init+0x1e8>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a3e      	ldr	r2, [pc, #248]	; (8002718 <HAL_GPIO_Init+0x2c8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d007      	beq.n	8002634 <HAL_GPIO_Init+0x1e4>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a3d      	ldr	r2, [pc, #244]	; (800271c <HAL_GPIO_Init+0x2cc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_GPIO_Init+0x1e0>
 800262c:	2303      	movs	r3, #3
 800262e:	e006      	b.n	800263e <HAL_GPIO_Init+0x1ee>
 8002630:	2304      	movs	r3, #4
 8002632:	e004      	b.n	800263e <HAL_GPIO_Init+0x1ee>
 8002634:	2302      	movs	r3, #2
 8002636:	e002      	b.n	800263e <HAL_GPIO_Init+0x1ee>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <HAL_GPIO_Init+0x1ee>
 800263c:	2300      	movs	r3, #0
 800263e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002640:	f002 0203 	and.w	r2, r2, #3
 8002644:	0092      	lsls	r2, r2, #2
 8002646:	4093      	lsls	r3, r2
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800264e:	492f      	ldr	r1, [pc, #188]	; (800270c <HAL_GPIO_Init+0x2bc>)
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	3302      	adds	r3, #2
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d006      	beq.n	8002676 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <HAL_GPIO_Init+0x2d0>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	492c      	ldr	r1, [pc, #176]	; (8002720 <HAL_GPIO_Init+0x2d0>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	600b      	str	r3, [r1, #0]
 8002674:	e006      	b.n	8002684 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002676:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <HAL_GPIO_Init+0x2d0>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	43db      	mvns	r3, r3
 800267e:	4928      	ldr	r1, [pc, #160]	; (8002720 <HAL_GPIO_Init+0x2d0>)
 8002680:	4013      	ands	r3, r2
 8002682:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d006      	beq.n	800269e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002690:	4b23      	ldr	r3, [pc, #140]	; (8002720 <HAL_GPIO_Init+0x2d0>)
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	4922      	ldr	r1, [pc, #136]	; (8002720 <HAL_GPIO_Init+0x2d0>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
 800269c:	e006      	b.n	80026ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <HAL_GPIO_Init+0x2d0>)
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	491e      	ldr	r1, [pc, #120]	; (8002720 <HAL_GPIO_Init+0x2d0>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d006      	beq.n	80026c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_GPIO_Init+0x2d0>)
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	4918      	ldr	r1, [pc, #96]	; (8002720 <HAL_GPIO_Init+0x2d0>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	608b      	str	r3, [r1, #8]
 80026c4:	e006      	b.n	80026d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026c6:	4b16      	ldr	r3, [pc, #88]	; (8002720 <HAL_GPIO_Init+0x2d0>)
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	4914      	ldr	r1, [pc, #80]	; (8002720 <HAL_GPIO_Init+0x2d0>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d021      	beq.n	8002724 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <HAL_GPIO_Init+0x2d0>)
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	490e      	ldr	r1, [pc, #56]	; (8002720 <HAL_GPIO_Init+0x2d0>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60cb      	str	r3, [r1, #12]
 80026ec:	e021      	b.n	8002732 <HAL_GPIO_Init+0x2e2>
 80026ee:	bf00      	nop
 80026f0:	10320000 	.word	0x10320000
 80026f4:	10310000 	.word	0x10310000
 80026f8:	10220000 	.word	0x10220000
 80026fc:	10210000 	.word	0x10210000
 8002700:	10120000 	.word	0x10120000
 8002704:	10110000 	.word	0x10110000
 8002708:	40021000 	.word	0x40021000
 800270c:	40010000 	.word	0x40010000
 8002710:	40010800 	.word	0x40010800
 8002714:	40010c00 	.word	0x40010c00
 8002718:	40011000 	.word	0x40011000
 800271c:	40011400 	.word	0x40011400
 8002720:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_GPIO_Init+0x304>)
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	43db      	mvns	r3, r3
 800272c:	4909      	ldr	r1, [pc, #36]	; (8002754 <HAL_GPIO_Init+0x304>)
 800272e:	4013      	ands	r3, r2
 8002730:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	3301      	adds	r3, #1
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	fa22 f303 	lsr.w	r3, r2, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	f47f ae8e 	bne.w	8002464 <HAL_GPIO_Init+0x14>
  }
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	372c      	adds	r7, #44	; 0x2c
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	40010400 	.word	0x40010400

08002758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
 8002764:	4613      	mov	r3, r2
 8002766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002768:	787b      	ldrb	r3, [r7, #1]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800276e:	887a      	ldrh	r2, [r7, #2]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002774:	e003      	b.n	800277e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	041a      	lsls	r2, r3, #16
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	611a      	str	r2, [r3, #16]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e12b      	b.n	80029f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff f928 	bl	8001a04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2224      	movs	r2, #36	; 0x24
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0201 	bic.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027ec:	f000 fce4 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 80027f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4a81      	ldr	r2, [pc, #516]	; (80029fc <HAL_I2C_Init+0x274>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d807      	bhi.n	800280c <HAL_I2C_Init+0x84>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a80      	ldr	r2, [pc, #512]	; (8002a00 <HAL_I2C_Init+0x278>)
 8002800:	4293      	cmp	r3, r2
 8002802:	bf94      	ite	ls
 8002804:	2301      	movls	r3, #1
 8002806:	2300      	movhi	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e006      	b.n	800281a <HAL_I2C_Init+0x92>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4a7d      	ldr	r2, [pc, #500]	; (8002a04 <HAL_I2C_Init+0x27c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	bf94      	ite	ls
 8002814:	2301      	movls	r3, #1
 8002816:	2300      	movhi	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e0e7      	b.n	80029f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4a78      	ldr	r2, [pc, #480]	; (8002a08 <HAL_I2C_Init+0x280>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	0c9b      	lsrs	r3, r3, #18
 800282c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a6a      	ldr	r2, [pc, #424]	; (80029fc <HAL_I2C_Init+0x274>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d802      	bhi.n	800285c <HAL_I2C_Init+0xd4>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	3301      	adds	r3, #1
 800285a:	e009      	b.n	8002870 <HAL_I2C_Init+0xe8>
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002862:	fb02 f303 	mul.w	r3, r2, r3
 8002866:	4a69      	ldr	r2, [pc, #420]	; (8002a0c <HAL_I2C_Init+0x284>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	099b      	lsrs	r3, r3, #6
 800286e:	3301      	adds	r3, #1
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	430b      	orrs	r3, r1
 8002876:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002882:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	495c      	ldr	r1, [pc, #368]	; (80029fc <HAL_I2C_Init+0x274>)
 800288c:	428b      	cmp	r3, r1
 800288e:	d819      	bhi.n	80028c4 <HAL_I2C_Init+0x13c>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1e59      	subs	r1, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fbb1 f3f3 	udiv	r3, r1, r3
 800289e:	1c59      	adds	r1, r3, #1
 80028a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028a4:	400b      	ands	r3, r1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_I2C_Init+0x138>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1e59      	subs	r1, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028b8:	3301      	adds	r3, #1
 80028ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028be:	e051      	b.n	8002964 <HAL_I2C_Init+0x1dc>
 80028c0:	2304      	movs	r3, #4
 80028c2:	e04f      	b.n	8002964 <HAL_I2C_Init+0x1dc>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d111      	bne.n	80028f0 <HAL_I2C_Init+0x168>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1e58      	subs	r0, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	440b      	add	r3, r1
 80028da:	fbb0 f3f3 	udiv	r3, r0, r3
 80028de:	3301      	adds	r3, #1
 80028e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	e012      	b.n	8002916 <HAL_I2C_Init+0x18e>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	1e58      	subs	r0, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	0099      	lsls	r1, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	fbb0 f3f3 	udiv	r3, r0, r3
 8002906:	3301      	adds	r3, #1
 8002908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Init+0x196>
 800291a:	2301      	movs	r3, #1
 800291c:	e022      	b.n	8002964 <HAL_I2C_Init+0x1dc>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10e      	bne.n	8002944 <HAL_I2C_Init+0x1bc>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1e58      	subs	r0, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	460b      	mov	r3, r1
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	440b      	add	r3, r1
 8002934:	fbb0 f3f3 	udiv	r3, r0, r3
 8002938:	3301      	adds	r3, #1
 800293a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002942:	e00f      	b.n	8002964 <HAL_I2C_Init+0x1dc>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1e58      	subs	r0, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	0099      	lsls	r1, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	fbb0 f3f3 	udiv	r3, r0, r3
 800295a:	3301      	adds	r3, #1
 800295c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002960:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	6809      	ldr	r1, [r1, #0]
 8002968:	4313      	orrs	r3, r2
 800296a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69da      	ldr	r2, [r3, #28]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002992:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6911      	ldr	r1, [r2, #16]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68d2      	ldr	r2, [r2, #12]
 800299e:	4311      	orrs	r1, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	430b      	orrs	r3, r1
 80029a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	000186a0 	.word	0x000186a0
 8002a00:	001e847f 	.word	0x001e847f
 8002a04:	003d08ff 	.word	0x003d08ff
 8002a08:	431bde83 	.word	0x431bde83
 8002a0c:	10624dd3 	.word	0x10624dd3

08002a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e272      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8087 	beq.w	8002b3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a30:	4b92      	ldr	r3, [pc, #584]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d00c      	beq.n	8002a56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a3c:	4b8f      	ldr	r3, [pc, #572]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d112      	bne.n	8002a6e <HAL_RCC_OscConfig+0x5e>
 8002a48:	4b8c      	ldr	r3, [pc, #560]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a54:	d10b      	bne.n	8002a6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a56:	4b89      	ldr	r3, [pc, #548]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d06c      	beq.n	8002b3c <HAL_RCC_OscConfig+0x12c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d168      	bne.n	8002b3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e24c      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x76>
 8002a78:	4b80      	ldr	r3, [pc, #512]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a7f      	ldr	r2, [pc, #508]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	e02e      	b.n	8002ae4 <HAL_RCC_OscConfig+0xd4>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x98>
 8002a8e:	4b7b      	ldr	r3, [pc, #492]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a7a      	ldr	r2, [pc, #488]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	4b78      	ldr	r3, [pc, #480]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a77      	ldr	r2, [pc, #476]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e01d      	b.n	8002ae4 <HAL_RCC_OscConfig+0xd4>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0xbc>
 8002ab2:	4b72      	ldr	r3, [pc, #456]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a71      	ldr	r2, [pc, #452]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b6f      	ldr	r3, [pc, #444]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a6e      	ldr	r2, [pc, #440]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0xd4>
 8002acc:	4b6b      	ldr	r3, [pc, #428]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a6a      	ldr	r2, [pc, #424]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b68      	ldr	r3, [pc, #416]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a67      	ldr	r2, [pc, #412]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d013      	beq.n	8002b14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7ff f910 	bl	8001d10 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af4:	f7ff f90c 	bl	8001d10 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e200      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b5d      	ldr	r3, [pc, #372]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0xe4>
 8002b12:	e014      	b.n	8002b3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7ff f8fc 	bl	8001d10 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7ff f8f8 	bl	8001d10 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e1ec      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x10c>
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d063      	beq.n	8002c12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b4a:	4b4c      	ldr	r3, [pc, #304]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b56:	4b49      	ldr	r3, [pc, #292]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d11c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x18c>
 8002b62:	4b46      	ldr	r3, [pc, #280]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d116      	bne.n	8002b9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6e:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_RCC_OscConfig+0x176>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d001      	beq.n	8002b86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1c0      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b86:	4b3d      	ldr	r3, [pc, #244]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4939      	ldr	r1, [pc, #228]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	e03a      	b.n	8002c12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba4:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7ff f8b1 	bl	8001d10 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb2:	f7ff f8ad 	bl	8001d10 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e1a1      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	4b2d      	ldr	r3, [pc, #180]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd0:	4b2a      	ldr	r3, [pc, #168]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4927      	ldr	r1, [pc, #156]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]
 8002be4:	e015      	b.n	8002c12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be6:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7ff f890 	bl	8001d10 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf4:	f7ff f88c 	bl	8001d10 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e180      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d03a      	beq.n	8002c94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d019      	beq.n	8002c5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c26:	4b17      	ldr	r3, [pc, #92]	; (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2c:	f7ff f870 	bl	8001d10 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c34:	f7ff f86c 	bl	8001d10 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e160      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c52:	2001      	movs	r0, #1
 8002c54:	f000 fac4 	bl	80031e0 <RCC_Delay>
 8002c58:	e01c      	b.n	8002c94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7ff f856 	bl	8001d10 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c66:	e00f      	b.n	8002c88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c68:	f7ff f852 	bl	8001d10 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d908      	bls.n	8002c88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e146      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	42420000 	.word	0x42420000
 8002c84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	4b92      	ldr	r3, [pc, #584]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1e9      	bne.n	8002c68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80a6 	beq.w	8002dee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca6:	4b8b      	ldr	r3, [pc, #556]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10d      	bne.n	8002cce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	4b88      	ldr	r3, [pc, #544]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	4a87      	ldr	r2, [pc, #540]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	61d3      	str	r3, [r2, #28]
 8002cbe:	4b85      	ldr	r3, [pc, #532]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cce:	4b82      	ldr	r3, [pc, #520]	; (8002ed8 <HAL_RCC_OscConfig+0x4c8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d118      	bne.n	8002d0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cda:	4b7f      	ldr	r3, [pc, #508]	; (8002ed8 <HAL_RCC_OscConfig+0x4c8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a7e      	ldr	r2, [pc, #504]	; (8002ed8 <HAL_RCC_OscConfig+0x4c8>)
 8002ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce6:	f7ff f813 	bl	8001d10 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cee:	f7ff f80f 	bl	8001d10 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b64      	cmp	r3, #100	; 0x64
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e103      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	4b75      	ldr	r3, [pc, #468]	; (8002ed8 <HAL_RCC_OscConfig+0x4c8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d106      	bne.n	8002d22 <HAL_RCC_OscConfig+0x312>
 8002d14:	4b6f      	ldr	r3, [pc, #444]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	4a6e      	ldr	r2, [pc, #440]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6213      	str	r3, [r2, #32]
 8002d20:	e02d      	b.n	8002d7e <HAL_RCC_OscConfig+0x36e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x334>
 8002d2a:	4b6a      	ldr	r3, [pc, #424]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4a69      	ldr	r2, [pc, #420]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	6213      	str	r3, [r2, #32]
 8002d36:	4b67      	ldr	r3, [pc, #412]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	4a66      	ldr	r2, [pc, #408]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	f023 0304 	bic.w	r3, r3, #4
 8002d40:	6213      	str	r3, [r2, #32]
 8002d42:	e01c      	b.n	8002d7e <HAL_RCC_OscConfig+0x36e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b05      	cmp	r3, #5
 8002d4a:	d10c      	bne.n	8002d66 <HAL_RCC_OscConfig+0x356>
 8002d4c:	4b61      	ldr	r3, [pc, #388]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4a60      	ldr	r2, [pc, #384]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	6213      	str	r3, [r2, #32]
 8002d58:	4b5e      	ldr	r3, [pc, #376]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	4a5d      	ldr	r2, [pc, #372]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6213      	str	r3, [r2, #32]
 8002d64:	e00b      	b.n	8002d7e <HAL_RCC_OscConfig+0x36e>
 8002d66:	4b5b      	ldr	r3, [pc, #364]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	4a5a      	ldr	r2, [pc, #360]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	6213      	str	r3, [r2, #32]
 8002d72:	4b58      	ldr	r3, [pc, #352]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4a57      	ldr	r2, [pc, #348]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	f023 0304 	bic.w	r3, r3, #4
 8002d7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d015      	beq.n	8002db2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d86:	f7fe ffc3 	bl	8001d10 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe ffbf 	bl	8001d10 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0b1      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da4:	4b4b      	ldr	r3, [pc, #300]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ee      	beq.n	8002d8e <HAL_RCC_OscConfig+0x37e>
 8002db0:	e014      	b.n	8002ddc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db2:	f7fe ffad 	bl	8001d10 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe ffa9 	bl	8001d10 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e09b      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd0:	4b40      	ldr	r3, [pc, #256]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1ee      	bne.n	8002dba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d105      	bne.n	8002dee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de2:	4b3c      	ldr	r3, [pc, #240]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	4a3b      	ldr	r2, [pc, #236]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 8087 	beq.w	8002f06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df8:	4b36      	ldr	r3, [pc, #216]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 030c 	and.w	r3, r3, #12
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d061      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d146      	bne.n	8002e9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0c:	4b33      	ldr	r3, [pc, #204]	; (8002edc <HAL_RCC_OscConfig+0x4cc>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fe ff7d 	bl	8001d10 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe ff79 	bl	8001d10 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e06d      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2c:	4b29      	ldr	r3, [pc, #164]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f0      	bne.n	8002e1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e40:	d108      	bne.n	8002e54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e42:	4b24      	ldr	r3, [pc, #144]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	4921      	ldr	r1, [pc, #132]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e54:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a19      	ldr	r1, [r3, #32]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	430b      	orrs	r3, r1
 8002e66:	491b      	ldr	r1, [pc, #108]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <HAL_RCC_OscConfig+0x4cc>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e72:	f7fe ff4d 	bl	8001d10 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7fe ff49 	bl	8001d10 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e03d      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x46a>
 8002e98:	e035      	b.n	8002f06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <HAL_RCC_OscConfig+0x4cc>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe ff36 	bl	8001d10 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7fe ff32 	bl	8001d10 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e026      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x498>
 8002ec6:	e01e      	b.n	8002f06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d107      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e019      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40007000 	.word	0x40007000
 8002edc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_OscConfig+0x500>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d106      	bne.n	8002f02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d001      	beq.n	8002f06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000

08002f14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0d0      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d910      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b67      	ldr	r3, [pc, #412]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 0207 	bic.w	r2, r3, #7
 8002f3e:	4965      	ldr	r1, [pc, #404]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b63      	ldr	r3, [pc, #396]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0b8      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f70:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a58      	ldr	r2, [pc, #352]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f88:	4b53      	ldr	r3, [pc, #332]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a52      	ldr	r2, [pc, #328]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b50      	ldr	r3, [pc, #320]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	494d      	ldr	r1, [pc, #308]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d040      	beq.n	8003034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d115      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd2:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e073      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe2:	4b3d      	ldr	r3, [pc, #244]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06b      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff2:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f023 0203 	bic.w	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4936      	ldr	r1, [pc, #216]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003004:	f7fe fe84 	bl	8001d10 <HAL_GetTick>
 8003008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	e00a      	b.n	8003022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300c:	f7fe fe80 	bl	8001d10 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e053      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 020c 	and.w	r2, r3, #12
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	429a      	cmp	r2, r3
 8003032:	d1eb      	bne.n	800300c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003034:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d210      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 0207 	bic.w	r2, r3, #7
 800304a:	4922      	ldr	r1, [pc, #136]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e032      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4916      	ldr	r1, [pc, #88]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 800307e:	4313      	orrs	r3, r2
 8003080:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	490e      	ldr	r1, [pc, #56]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030a2:	f000 f821 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80030a6:	4602      	mov	r2, r0
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	490a      	ldr	r1, [pc, #40]	; (80030dc <HAL_RCC_ClockConfig+0x1c8>)
 80030b4:	5ccb      	ldrb	r3, [r1, r3]
 80030b6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ba:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1cc>)
 80030bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_ClockConfig+0x1d0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fde2 	bl	8001c8c <HAL_InitTick>

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40022000 	.word	0x40022000
 80030d8:	40021000 	.word	0x40021000
 80030dc:	08005500 	.word	0x08005500
 80030e0:	20000000 	.word	0x20000000
 80030e4:	20000004 	.word	0x20000004

080030e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e8:	b490      	push	{r4, r7}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030ee:	4b29      	ldr	r3, [pc, #164]	; (8003194 <HAL_RCC_GetSysClockFreq+0xac>)
 80030f0:	1d3c      	adds	r4, r7, #4
 80030f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030f8:	f240 2301 	movw	r3, #513	; 0x201
 80030fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	2300      	movs	r3, #0
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003112:	4b21      	ldr	r3, [pc, #132]	; (8003198 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b04      	cmp	r3, #4
 8003120:	d002      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x40>
 8003122:	2b08      	cmp	r3, #8
 8003124:	d003      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0x46>
 8003126:	e02b      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003128:	4b1c      	ldr	r3, [pc, #112]	; (800319c <HAL_RCC_GetSysClockFreq+0xb4>)
 800312a:	623b      	str	r3, [r7, #32]
      break;
 800312c:	e02b      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	0c9b      	lsrs	r3, r3, #18
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	3328      	adds	r3, #40	; 0x28
 8003138:	443b      	add	r3, r7
 800313a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800313e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d012      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800314a:	4b13      	ldr	r3, [pc, #76]	; (8003198 <HAL_RCC_GetSysClockFreq+0xb0>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	0c5b      	lsrs	r3, r3, #17
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	3328      	adds	r3, #40	; 0x28
 8003156:	443b      	add	r3, r7
 8003158:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800315c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	4a0e      	ldr	r2, [pc, #56]	; (800319c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003162:	fb03 f202 	mul.w	r2, r3, r2
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
 800316e:	e004      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	4a0b      	ldr	r2, [pc, #44]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003174:	fb02 f303 	mul.w	r3, r2, r3
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	623b      	str	r3, [r7, #32]
      break;
 800317e:	e002      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003182:	623b      	str	r3, [r7, #32]
      break;
 8003184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003186:	6a3b      	ldr	r3, [r7, #32]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3728      	adds	r7, #40	; 0x28
 800318c:	46bd      	mov	sp, r7
 800318e:	bc90      	pop	{r4, r7}
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	080054f0 	.word	0x080054f0
 8003198:	40021000 	.word	0x40021000
 800319c:	007a1200 	.word	0x007a1200
 80031a0:	003d0900 	.word	0x003d0900

080031a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a8:	4b02      	ldr	r3, [pc, #8]	; (80031b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	20000000 	.word	0x20000000

080031b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031bc:	f7ff fff2 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4903      	ldr	r1, [pc, #12]	; (80031dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000
 80031dc:	08005510 	.word	0x08005510

080031e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <RCC_Delay+0x34>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <RCC_Delay+0x38>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	0a5b      	lsrs	r3, r3, #9
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031fc:	bf00      	nop
  }
  while (Delay --);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1e5a      	subs	r2, r3, #1
 8003202:	60fa      	str	r2, [r7, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f9      	bne.n	80031fc <RCC_Delay+0x1c>
}
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	20000000 	.word	0x20000000
 8003218:	10624dd3 	.word	0x10624dd3

0800321c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e041      	b.n	80032b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fe fc1c 	bl	8001a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3304      	adds	r3, #4
 8003258:	4619      	mov	r1, r3
 800325a:	4610      	mov	r0, r2
 800325c:	f000 fd8e 	bl	8003d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d001      	beq.n	80032d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e032      	b.n	800333a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a18      	ldr	r2, [pc, #96]	; (8003344 <HAL_TIM_Base_Start+0x88>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00e      	beq.n	8003304 <HAL_TIM_Base_Start+0x48>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ee:	d009      	beq.n	8003304 <HAL_TIM_Base_Start+0x48>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a14      	ldr	r2, [pc, #80]	; (8003348 <HAL_TIM_Base_Start+0x8c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d004      	beq.n	8003304 <HAL_TIM_Base_Start+0x48>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a13      	ldr	r2, [pc, #76]	; (800334c <HAL_TIM_Base_Start+0x90>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d111      	bne.n	8003328 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b06      	cmp	r3, #6
 8003314:	d010      	beq.n	8003338 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0201 	orr.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003326:	e007      	b.n	8003338 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800

08003350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e041      	b.n	80033e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f839 	bl	80033ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f000 fcf4 	bl	8003d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr

08003400 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <HAL_TIM_PWM_Start_DMA+0x28>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	e022      	b.n	800346e <HAL_TIM_PWM_Start_DMA+0x6e>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b04      	cmp	r3, #4
 800342c:	d109      	bne.n	8003442 <HAL_TIM_PWM_Start_DMA+0x42>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	bf0c      	ite	eq
 800343a:	2301      	moveq	r3, #1
 800343c:	2300      	movne	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	e015      	b.n	800346e <HAL_TIM_PWM_Start_DMA+0x6e>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b08      	cmp	r3, #8
 8003446:	d109      	bne.n	800345c <HAL_TIM_PWM_Start_DMA+0x5c>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	e008      	b.n	800346e <HAL_TIM_PWM_Start_DMA+0x6e>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8003472:	2302      	movs	r3, #2
 8003474:	e14e      	b.n	8003714 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d109      	bne.n	8003490 <HAL_TIM_PWM_Start_DMA+0x90>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e022      	b.n	80034d6 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b04      	cmp	r3, #4
 8003494:	d109      	bne.n	80034aa <HAL_TIM_PWM_Start_DMA+0xaa>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	bf0c      	ite	eq
 80034a2:	2301      	moveq	r3, #1
 80034a4:	2300      	movne	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	e015      	b.n	80034d6 <HAL_TIM_PWM_Start_DMA+0xd6>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d109      	bne.n	80034c4 <HAL_TIM_PWM_Start_DMA+0xc4>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e008      	b.n	80034d6 <HAL_TIM_PWM_Start_DMA+0xd6>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d024      	beq.n	8003524 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <HAL_TIM_PWM_Start_DMA+0xea>
 80034e0:	887b      	ldrh	r3, [r7, #2]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e114      	b.n	8003714 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_PWM_Start_DMA+0xfa>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034f8:	e016      	b.n	8003528 <HAL_TIM_PWM_Start_DMA+0x128>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d104      	bne.n	800350a <HAL_TIM_PWM_Start_DMA+0x10a>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003508:	e00e      	b.n	8003528 <HAL_TIM_PWM_Start_DMA+0x128>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b08      	cmp	r3, #8
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start_DMA+0x11a>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003518:	e006      	b.n	8003528 <HAL_TIM_PWM_Start_DMA+0x128>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2202      	movs	r2, #2
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003522:	e001      	b.n	8003528 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0f5      	b.n	8003714 <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b0c      	cmp	r3, #12
 800352c:	f200 80ae 	bhi.w	800368c <HAL_TIM_PWM_Start_DMA+0x28c>
 8003530:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <HAL_TIM_PWM_Start_DMA+0x138>)
 8003532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003536:	bf00      	nop
 8003538:	0800356d 	.word	0x0800356d
 800353c:	0800368d 	.word	0x0800368d
 8003540:	0800368d 	.word	0x0800368d
 8003544:	0800368d 	.word	0x0800368d
 8003548:	080035b5 	.word	0x080035b5
 800354c:	0800368d 	.word	0x0800368d
 8003550:	0800368d 	.word	0x0800368d
 8003554:	0800368d 	.word	0x0800368d
 8003558:	080035fd 	.word	0x080035fd
 800355c:	0800368d 	.word	0x0800368d
 8003560:	0800368d 	.word	0x0800368d
 8003564:	0800368d 	.word	0x0800368d
 8003568:	08003645 	.word	0x08003645
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	4a6a      	ldr	r2, [pc, #424]	; (800371c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003572:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	4a69      	ldr	r2, [pc, #420]	; (8003720 <HAL_TIM_PWM_Start_DMA+0x320>)
 800357a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	4a68      	ldr	r2, [pc, #416]	; (8003724 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003582:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3334      	adds	r3, #52	; 0x34
 8003590:	461a      	mov	r2, r3
 8003592:	887b      	ldrh	r3, [r7, #2]
 8003594:	f7fe fd52 	bl	800203c <HAL_DMA_Start_IT>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e0b8      	b.n	8003714 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b0:	60da      	str	r2, [r3, #12]
      break;
 80035b2:	e06c      	b.n	800368e <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	4a58      	ldr	r2, [pc, #352]	; (800371c <HAL_TIM_PWM_Start_DMA+0x31c>)
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	4a57      	ldr	r2, [pc, #348]	; (8003720 <HAL_TIM_PWM_Start_DMA+0x320>)
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	4a56      	ldr	r2, [pc, #344]	; (8003724 <HAL_TIM_PWM_Start_DMA+0x324>)
 80035ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3338      	adds	r3, #56	; 0x38
 80035d8:	461a      	mov	r2, r3
 80035da:	887b      	ldrh	r3, [r7, #2]
 80035dc:	f7fe fd2e 	bl	800203c <HAL_DMA_Start_IT>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e094      	b.n	8003714 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035f8:	60da      	str	r2, [r3, #12]
      break;
 80035fa:	e048      	b.n	800368e <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	4a46      	ldr	r2, [pc, #280]	; (800371c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003602:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	4a45      	ldr	r2, [pc, #276]	; (8003720 <HAL_TIM_PWM_Start_DMA+0x320>)
 800360a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	4a44      	ldr	r2, [pc, #272]	; (8003724 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003612:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	333c      	adds	r3, #60	; 0x3c
 8003620:	461a      	mov	r2, r3
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	f7fe fd0a 	bl	800203c <HAL_DMA_Start_IT>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e070      	b.n	8003714 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003640:	60da      	str	r2, [r3, #12]
      break;
 8003642:	e024      	b.n	800368e <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	4a34      	ldr	r2, [pc, #208]	; (800371c <HAL_TIM_PWM_Start_DMA+0x31c>)
 800364a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	4a33      	ldr	r2, [pc, #204]	; (8003720 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003652:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	4a32      	ldr	r2, [pc, #200]	; (8003724 <HAL_TIM_PWM_Start_DMA+0x324>)
 800365a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3340      	adds	r3, #64	; 0x40
 8003668:	461a      	mov	r2, r3
 800366a:	887b      	ldrh	r3, [r7, #2]
 800366c:	f7fe fce6 	bl	800203c <HAL_DMA_Start_IT>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e04c      	b.n	8003714 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003688:	60da      	str	r2, [r3, #12]
      break;
 800368a:	e000      	b.n	800368e <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 800368c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2201      	movs	r2, #1
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fdf0 	bl	800427c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a21      	ldr	r2, [pc, #132]	; (8003728 <HAL_TIM_PWM_Start_DMA+0x328>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d107      	bne.n	80036b6 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <HAL_TIM_PWM_Start_DMA+0x328>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00e      	beq.n	80036de <HAL_TIM_PWM_Start_DMA+0x2de>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c8:	d009      	beq.n	80036de <HAL_TIM_PWM_Start_DMA+0x2de>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a17      	ldr	r2, [pc, #92]	; (800372c <HAL_TIM_PWM_Start_DMA+0x32c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d004      	beq.n	80036de <HAL_TIM_PWM_Start_DMA+0x2de>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a15      	ldr	r2, [pc, #84]	; (8003730 <HAL_TIM_PWM_Start_DMA+0x330>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d111      	bne.n	8003702 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b06      	cmp	r3, #6
 80036ee:	d010      	beq.n	8003712 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003700:	e007      	b.n	8003712 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0201 	orr.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	08003c6b 	.word	0x08003c6b
 8003720:	08003d13 	.word	0x08003d13
 8003724:	08003bd9 	.word	0x08003bd9
 8003728:	40012c00 	.word	0x40012c00
 800372c:	40000400 	.word	0x40000400
 8003730:	40000800 	.word	0x40000800

08003734 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b0c      	cmp	r3, #12
 8003742:	d855      	bhi.n	80037f0 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	08003781 	.word	0x08003781
 8003750:	080037f1 	.word	0x080037f1
 8003754:	080037f1 	.word	0x080037f1
 8003758:	080037f1 	.word	0x080037f1
 800375c:	0800379d 	.word	0x0800379d
 8003760:	080037f1 	.word	0x080037f1
 8003764:	080037f1 	.word	0x080037f1
 8003768:	080037f1 	.word	0x080037f1
 800376c:	080037b9 	.word	0x080037b9
 8003770:	080037f1 	.word	0x080037f1
 8003774:	080037f1 	.word	0x080037f1
 8003778:	080037f1 	.word	0x080037f1
 800377c:	080037d5 	.word	0x080037d5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800378e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	4618      	mov	r0, r3
 8003796:	f7fe fcb1 	bl	80020fc <HAL_DMA_Abort_IT>
      break;
 800379a:	e02a      	b.n	80037f2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe fca3 	bl	80020fc <HAL_DMA_Abort_IT>
      break;
 80037b6:	e01c      	b.n	80037f2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe fc95 	bl	80020fc <HAL_DMA_Abort_IT>
      break;
 80037d2:	e00e      	b.n	80037f2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fe fc87 	bl	80020fc <HAL_DMA_Abort_IT>
      break;
 80037ee:	e000      	b.n	80037f2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80037f0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2200      	movs	r2, #0
 80037f8:	6839      	ldr	r1, [r7, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fd3e 	bl	800427c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a29      	ldr	r2, [pc, #164]	; (80038ac <HAL_TIM_PWM_Stop_DMA+0x178>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d117      	bne.n	800383a <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a1a      	ldr	r2, [r3, #32]
 8003810:	f241 1311 	movw	r3, #4369	; 0x1111
 8003814:	4013      	ands	r3, r2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10f      	bne.n	800383a <HAL_TIM_PWM_Stop_DMA+0x106>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6a1a      	ldr	r2, [r3, #32]
 8003820:	f240 4344 	movw	r3, #1092	; 0x444
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d107      	bne.n	800383a <HAL_TIM_PWM_Stop_DMA+0x106>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003838:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	f241 1311 	movw	r3, #4369	; 0x1111
 8003844:	4013      	ands	r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <HAL_TIM_PWM_Stop_DMA+0x136>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a1a      	ldr	r2, [r3, #32]
 8003850:	f240 4344 	movw	r3, #1092	; 0x444
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d107      	bne.n	800386a <HAL_TIM_PWM_Stop_DMA+0x136>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d104      	bne.n	800387a <HAL_TIM_PWM_Stop_DMA+0x146>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003878:	e013      	b.n	80038a2 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b04      	cmp	r3, #4
 800387e:	d104      	bne.n	800388a <HAL_TIM_PWM_Stop_DMA+0x156>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003888:	e00b      	b.n	80038a2 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d104      	bne.n	800389a <HAL_TIM_PWM_Stop_DMA+0x166>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003898:	e003      	b.n	80038a2 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40012c00 	.word	0x40012c00

080038b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e0ac      	b.n	8003a24 <HAL_TIM_PWM_ConfigChannel+0x174>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b0c      	cmp	r3, #12
 80038d6:	f200 809f 	bhi.w	8003a18 <HAL_TIM_PWM_ConfigChannel+0x168>
 80038da:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e0:	08003915 	.word	0x08003915
 80038e4:	08003a19 	.word	0x08003a19
 80038e8:	08003a19 	.word	0x08003a19
 80038ec:	08003a19 	.word	0x08003a19
 80038f0:	08003955 	.word	0x08003955
 80038f4:	08003a19 	.word	0x08003a19
 80038f8:	08003a19 	.word	0x08003a19
 80038fc:	08003a19 	.word	0x08003a19
 8003900:	08003997 	.word	0x08003997
 8003904:	08003a19 	.word	0x08003a19
 8003908:	08003a19 	.word	0x08003a19
 800390c:	08003a19 	.word	0x08003a19
 8003910:	080039d7 	.word	0x080039d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fa90 	bl	8003e40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0208 	orr.w	r2, r2, #8
 800392e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0204 	bic.w	r2, r2, #4
 800393e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6999      	ldr	r1, [r3, #24]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	619a      	str	r2, [r3, #24]
      break;
 8003952:	e062      	b.n	8003a1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fad6 	bl	8003f0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800396e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6999      	ldr	r1, [r3, #24]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	021a      	lsls	r2, r3, #8
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	619a      	str	r2, [r3, #24]
      break;
 8003994:	e041      	b.n	8003a1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fb1f 	bl	8003fe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69da      	ldr	r2, [r3, #28]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0208 	orr.w	r2, r2, #8
 80039b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69da      	ldr	r2, [r3, #28]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0204 	bic.w	r2, r2, #4
 80039c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69d9      	ldr	r1, [r3, #28]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	61da      	str	r2, [r3, #28]
      break;
 80039d4:	e021      	b.n	8003a1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fb69 	bl	80040b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69d9      	ldr	r1, [r3, #28]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	021a      	lsls	r2, r3, #8
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	61da      	str	r2, [r3, #28]
      break;
 8003a16:	e000      	b.n	8003a1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003a18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_TIM_ConfigClockSource+0x18>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e0b3      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x180>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a7c:	d03e      	beq.n	8003afc <HAL_TIM_ConfigClockSource+0xd0>
 8003a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a82:	f200 8087 	bhi.w	8003b94 <HAL_TIM_ConfigClockSource+0x168>
 8003a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8a:	f000 8085 	beq.w	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a92:	d87f      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x168>
 8003a94:	2b70      	cmp	r3, #112	; 0x70
 8003a96:	d01a      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0xa2>
 8003a98:	2b70      	cmp	r3, #112	; 0x70
 8003a9a:	d87b      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x168>
 8003a9c:	2b60      	cmp	r3, #96	; 0x60
 8003a9e:	d050      	beq.n	8003b42 <HAL_TIM_ConfigClockSource+0x116>
 8003aa0:	2b60      	cmp	r3, #96	; 0x60
 8003aa2:	d877      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x168>
 8003aa4:	2b50      	cmp	r3, #80	; 0x50
 8003aa6:	d03c      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0xf6>
 8003aa8:	2b50      	cmp	r3, #80	; 0x50
 8003aaa:	d873      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x168>
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	d058      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0x136>
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d86f      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x168>
 8003ab4:	2b30      	cmp	r3, #48	; 0x30
 8003ab6:	d064      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x156>
 8003ab8:	2b30      	cmp	r3, #48	; 0x30
 8003aba:	d86b      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x168>
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d060      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x156>
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d867      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x168>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d05c      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x156>
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d05a      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003acc:	e062      	b.n	8003b94 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6899      	ldr	r1, [r3, #8]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f000 fbae 	bl	800423e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003af0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	609a      	str	r2, [r3, #8]
      break;
 8003afa:	e04e      	b.n	8003b9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	6899      	ldr	r1, [r3, #8]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f000 fb97 	bl	800423e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b1e:	609a      	str	r2, [r3, #8]
      break;
 8003b20:	e03b      	b.n	8003b9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	6859      	ldr	r1, [r3, #4]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f000 fb0e 	bl	8004150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2150      	movs	r1, #80	; 0x50
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fb65 	bl	800420a <TIM_ITRx_SetConfig>
      break;
 8003b40:	e02b      	b.n	8003b9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6859      	ldr	r1, [r3, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f000 fb2c 	bl	80041ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2160      	movs	r1, #96	; 0x60
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fb55 	bl	800420a <TIM_ITRx_SetConfig>
      break;
 8003b60:	e01b      	b.n	8003b9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6859      	ldr	r1, [r3, #4]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f000 faee 	bl	8004150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2140      	movs	r1, #64	; 0x40
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fb45 	bl	800420a <TIM_ITRx_SetConfig>
      break;
 8003b80:	e00b      	b.n	8003b9a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	f000 fb3c 	bl	800420a <TIM_ITRx_SetConfig>
        break;
 8003b92:	e002      	b.n	8003b9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b94:	bf00      	nop
 8003b96:	e000      	b.n	8003b9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d107      	bne.n	8003c00 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bfe:	e02a      	b.n	8003c56 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d107      	bne.n	8003c1a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c18:	e01d      	b.n	8003c56 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d107      	bne.n	8003c34 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2204      	movs	r2, #4
 8003c28:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c32:	e010      	b.n	8003c56 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d107      	bne.n	8003c4e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2208      	movs	r2, #8
 8003c42:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c4c:	e003      	b.n	8003c56 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f7ff ffb5 	bl	8003bc6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	771a      	strb	r2, [r3, #28]
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d10b      	bne.n	8003c9a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d136      	bne.n	8003cfe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c98:	e031      	b.n	8003cfe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d10b      	bne.n	8003cbc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d125      	bne.n	8003cfe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cba:	e020      	b.n	8003cfe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d10b      	bne.n	8003cde <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2204      	movs	r2, #4
 8003cca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d114      	bne.n	8003cfe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cdc:	e00f      	b.n	8003cfe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d10a      	bne.n	8003cfe <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2208      	movs	r2, #8
 8003cec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d103      	bne.n	8003cfe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f7fd fc28 	bl	8001554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	771a      	strb	r2, [r3, #28]
}
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d103      	bne.n	8003d32 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	771a      	strb	r2, [r3, #28]
 8003d30:	e019      	b.n	8003d66 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d103      	bne.n	8003d44 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	771a      	strb	r2, [r3, #28]
 8003d42:	e010      	b.n	8003d66 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d103      	bne.n	8003d56 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2204      	movs	r2, #4
 8003d52:	771a      	strb	r2, [r3, #28]
 8003d54:	e007      	b.n	8003d66 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d102      	bne.n	8003d66 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2208      	movs	r2, #8
 8003d64:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f7ff ff24 	bl	8003bb4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	771a      	strb	r2, [r3, #28]
}
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a29      	ldr	r2, [pc, #164]	; (8003e34 <TIM_Base_SetConfig+0xb8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00b      	beq.n	8003dac <TIM_Base_SetConfig+0x30>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9a:	d007      	beq.n	8003dac <TIM_Base_SetConfig+0x30>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a26      	ldr	r2, [pc, #152]	; (8003e38 <TIM_Base_SetConfig+0xbc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <TIM_Base_SetConfig+0x30>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a25      	ldr	r2, [pc, #148]	; (8003e3c <TIM_Base_SetConfig+0xc0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d108      	bne.n	8003dbe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a1c      	ldr	r2, [pc, #112]	; (8003e34 <TIM_Base_SetConfig+0xb8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00b      	beq.n	8003dde <TIM_Base_SetConfig+0x62>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dcc:	d007      	beq.n	8003dde <TIM_Base_SetConfig+0x62>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <TIM_Base_SetConfig+0xbc>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d003      	beq.n	8003dde <TIM_Base_SetConfig+0x62>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a18      	ldr	r2, [pc, #96]	; (8003e3c <TIM_Base_SetConfig+0xc0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d108      	bne.n	8003df0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a07      	ldr	r2, [pc, #28]	; (8003e34 <TIM_Base_SetConfig+0xb8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d103      	bne.n	8003e24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	615a      	str	r2, [r3, #20]
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr
 8003e34:	40012c00 	.word	0x40012c00
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40000800 	.word	0x40000800

08003e40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f023 0201 	bic.w	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0303 	bic.w	r3, r3, #3
 8003e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f023 0302 	bic.w	r3, r3, #2
 8003e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <TIM_OC1_SetConfig+0xc8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d10c      	bne.n	8003eb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 0308 	bic.w	r3, r3, #8
 8003ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f023 0304 	bic.w	r3, r3, #4
 8003eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a13      	ldr	r2, [pc, #76]	; (8003f08 <TIM_OC1_SetConfig+0xc8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d111      	bne.n	8003ee2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	621a      	str	r2, [r3, #32]
}
 8003efc:	bf00      	nop
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40012c00 	.word	0x40012c00

08003f0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f023 0210 	bic.w	r2, r3, #16
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	021b      	lsls	r3, r3, #8
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0320 	bic.w	r3, r3, #32
 8003f56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a1d      	ldr	r2, [pc, #116]	; (8003fdc <TIM_OC2_SetConfig+0xd0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d10d      	bne.n	8003f88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a14      	ldr	r2, [pc, #80]	; (8003fdc <TIM_OC2_SetConfig+0xd0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d113      	bne.n	8003fb8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	621a      	str	r2, [r3, #32]
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	40012c00 	.word	0x40012c00

08003fe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0303 	bic.w	r3, r3, #3
 8004016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	021b      	lsls	r3, r3, #8
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a1d      	ldr	r2, [pc, #116]	; (80040b0 <TIM_OC3_SetConfig+0xd0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d10d      	bne.n	800405a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a14      	ldr	r2, [pc, #80]	; (80040b0 <TIM_OC3_SetConfig+0xd0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d113      	bne.n	800408a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	621a      	str	r2, [r3, #32]
}
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40012c00 	.word	0x40012c00

080040b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	021b      	lsls	r3, r3, #8
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	031b      	lsls	r3, r3, #12
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a0f      	ldr	r2, [pc, #60]	; (800414c <TIM_OC4_SetConfig+0x98>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d109      	bne.n	8004128 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800411a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	019b      	lsls	r3, r3, #6
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	40012c00 	.word	0x40012c00

08004150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f023 0201 	bic.w	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800417a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f023 030a 	bic.w	r3, r3, #10
 800418c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr

080041ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f023 0210 	bic.w	r2, r3, #16
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	031b      	lsls	r3, r3, #12
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	621a      	str	r2, [r3, #32]
}
 8004200:	bf00      	nop
 8004202:	371c      	adds	r7, #28
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr

0800420a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800420a:	b480      	push	{r7}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004220:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	f043 0307 	orr.w	r3, r3, #7
 800422c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr

0800423e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800423e:	b480      	push	{r7}
 8004240:	b087      	sub	sp, #28
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004258:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	021a      	lsls	r2, r3, #8
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	431a      	orrs	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4313      	orrs	r3, r2
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	609a      	str	r2, [r3, #8]
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr

0800427c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	2201      	movs	r2, #1
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1a      	ldr	r2, [r3, #32]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	43db      	mvns	r3, r3
 800429e:	401a      	ands	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1a      	ldr	r2, [r3, #32]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	fa01 f303 	lsl.w	r3, r1, r3
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d8:	2302      	movs	r3, #2
 80042da:	e046      	b.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a16      	ldr	r2, [pc, #88]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00e      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004328:	d009      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a12      	ldr	r2, [pc, #72]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a10      	ldr	r2, [pc, #64]	; (800437c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d10c      	bne.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	4313      	orrs	r3, r2
 800434e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr
 8004374:	40012c00 	.word	0x40012c00
 8004378:	40000400 	.word	0x40000400
 800437c:	40000800 	.word	0x40000800

08004380 <__libc_init_array>:
 8004380:	b570      	push	{r4, r5, r6, lr}
 8004382:	2600      	movs	r6, #0
 8004384:	4d0c      	ldr	r5, [pc, #48]	; (80043b8 <__libc_init_array+0x38>)
 8004386:	4c0d      	ldr	r4, [pc, #52]	; (80043bc <__libc_init_array+0x3c>)
 8004388:	1b64      	subs	r4, r4, r5
 800438a:	10a4      	asrs	r4, r4, #2
 800438c:	42a6      	cmp	r6, r4
 800438e:	d109      	bne.n	80043a4 <__libc_init_array+0x24>
 8004390:	f001 f888 	bl	80054a4 <_init>
 8004394:	2600      	movs	r6, #0
 8004396:	4d0a      	ldr	r5, [pc, #40]	; (80043c0 <__libc_init_array+0x40>)
 8004398:	4c0a      	ldr	r4, [pc, #40]	; (80043c4 <__libc_init_array+0x44>)
 800439a:	1b64      	subs	r4, r4, r5
 800439c:	10a4      	asrs	r4, r4, #2
 800439e:	42a6      	cmp	r6, r4
 80043a0:	d105      	bne.n	80043ae <__libc_init_array+0x2e>
 80043a2:	bd70      	pop	{r4, r5, r6, pc}
 80043a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a8:	4798      	blx	r3
 80043aa:	3601      	adds	r6, #1
 80043ac:	e7ee      	b.n	800438c <__libc_init_array+0xc>
 80043ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b2:	4798      	blx	r3
 80043b4:	3601      	adds	r6, #1
 80043b6:	e7f2      	b.n	800439e <__libc_init_array+0x1e>
 80043b8:	080056f0 	.word	0x080056f0
 80043bc:	080056f0 	.word	0x080056f0
 80043c0:	080056f0 	.word	0x080056f0
 80043c4:	080056f4 	.word	0x080056f4

080043c8 <memset>:
 80043c8:	4603      	mov	r3, r0
 80043ca:	4402      	add	r2, r0
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d100      	bne.n	80043d2 <memset+0xa>
 80043d0:	4770      	bx	lr
 80043d2:	f803 1b01 	strb.w	r1, [r3], #1
 80043d6:	e7f9      	b.n	80043cc <memset+0x4>

080043d8 <tan>:
 80043d8:	b530      	push	{r4, r5, lr}
 80043da:	4a12      	ldr	r2, [pc, #72]	; (8004424 <tan+0x4c>)
 80043dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80043e0:	4293      	cmp	r3, r2
 80043e2:	b087      	sub	sp, #28
 80043e4:	dc06      	bgt.n	80043f4 <tan+0x1c>
 80043e6:	2301      	movs	r3, #1
 80043e8:	2200      	movs	r2, #0
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	2300      	movs	r3, #0
 80043ee:	f000 fd5b 	bl	8004ea8 <__kernel_tan>
 80043f2:	e006      	b.n	8004402 <tan+0x2a>
 80043f4:	4a0c      	ldr	r2, [pc, #48]	; (8004428 <tan+0x50>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	dd05      	ble.n	8004406 <tan+0x2e>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	f7fb feab 	bl	8000158 <__aeabi_dsub>
 8004402:	b007      	add	sp, #28
 8004404:	bd30      	pop	{r4, r5, pc}
 8004406:	aa02      	add	r2, sp, #8
 8004408:	f000 f812 	bl	8004430 <__ieee754_rem_pio2>
 800440c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004410:	0040      	lsls	r0, r0, #1
 8004412:	f000 0002 	and.w	r0, r0, #2
 8004416:	f1c0 0001 	rsb	r0, r0, #1
 800441a:	9000      	str	r0, [sp, #0]
 800441c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004420:	e7e5      	b.n	80043ee <tan+0x16>
 8004422:	bf00      	nop
 8004424:	3fe921fb 	.word	0x3fe921fb
 8004428:	7fefffff 	.word	0x7fefffff
 800442c:	00000000 	.word	0x00000000

08004430 <__ieee754_rem_pio2>:
 8004430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004434:	4614      	mov	r4, r2
 8004436:	4ac4      	ldr	r2, [pc, #784]	; (8004748 <__ieee754_rem_pio2+0x318>)
 8004438:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800443c:	b08d      	sub	sp, #52	; 0x34
 800443e:	4592      	cmp	sl, r2
 8004440:	9104      	str	r1, [sp, #16]
 8004442:	dc07      	bgt.n	8004454 <__ieee754_rem_pio2+0x24>
 8004444:	2200      	movs	r2, #0
 8004446:	2300      	movs	r3, #0
 8004448:	e9c4 0100 	strd	r0, r1, [r4]
 800444c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004450:	2500      	movs	r5, #0
 8004452:	e024      	b.n	800449e <__ieee754_rem_pio2+0x6e>
 8004454:	4abd      	ldr	r2, [pc, #756]	; (800474c <__ieee754_rem_pio2+0x31c>)
 8004456:	4592      	cmp	sl, r2
 8004458:	dc72      	bgt.n	8004540 <__ieee754_rem_pio2+0x110>
 800445a:	9b04      	ldr	r3, [sp, #16]
 800445c:	4dbc      	ldr	r5, [pc, #752]	; (8004750 <__ieee754_rem_pio2+0x320>)
 800445e:	2b00      	cmp	r3, #0
 8004460:	a3ab      	add	r3, pc, #684	; (adr r3, 8004710 <__ieee754_rem_pio2+0x2e0>)
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	dd36      	ble.n	80044d6 <__ieee754_rem_pio2+0xa6>
 8004468:	f7fb fe76 	bl	8000158 <__aeabi_dsub>
 800446c:	45aa      	cmp	sl, r5
 800446e:	4606      	mov	r6, r0
 8004470:	460f      	mov	r7, r1
 8004472:	d018      	beq.n	80044a6 <__ieee754_rem_pio2+0x76>
 8004474:	a3a8      	add	r3, pc, #672	; (adr r3, 8004718 <__ieee754_rem_pio2+0x2e8>)
 8004476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447a:	f7fb fe6d 	bl	8000158 <__aeabi_dsub>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4630      	mov	r0, r6
 8004484:	e9c4 2300 	strd	r2, r3, [r4]
 8004488:	4639      	mov	r1, r7
 800448a:	f7fb fe65 	bl	8000158 <__aeabi_dsub>
 800448e:	a3a2      	add	r3, pc, #648	; (adr r3, 8004718 <__ieee754_rem_pio2+0x2e8>)
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f7fb fe60 	bl	8000158 <__aeabi_dsub>
 8004498:	2501      	movs	r5, #1
 800449a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800449e:	4628      	mov	r0, r5
 80044a0:	b00d      	add	sp, #52	; 0x34
 80044a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044a6:	a39e      	add	r3, pc, #632	; (adr r3, 8004720 <__ieee754_rem_pio2+0x2f0>)
 80044a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ac:	f7fb fe54 	bl	8000158 <__aeabi_dsub>
 80044b0:	a39d      	add	r3, pc, #628	; (adr r3, 8004728 <__ieee754_rem_pio2+0x2f8>)
 80044b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b6:	4606      	mov	r6, r0
 80044b8:	460f      	mov	r7, r1
 80044ba:	f7fb fe4d 	bl	8000158 <__aeabi_dsub>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4630      	mov	r0, r6
 80044c4:	e9c4 2300 	strd	r2, r3, [r4]
 80044c8:	4639      	mov	r1, r7
 80044ca:	f7fb fe45 	bl	8000158 <__aeabi_dsub>
 80044ce:	a396      	add	r3, pc, #600	; (adr r3, 8004728 <__ieee754_rem_pio2+0x2f8>)
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	e7de      	b.n	8004494 <__ieee754_rem_pio2+0x64>
 80044d6:	f7fb fe41 	bl	800015c <__adddf3>
 80044da:	45aa      	cmp	sl, r5
 80044dc:	4606      	mov	r6, r0
 80044de:	460f      	mov	r7, r1
 80044e0:	d016      	beq.n	8004510 <__ieee754_rem_pio2+0xe0>
 80044e2:	a38d      	add	r3, pc, #564	; (adr r3, 8004718 <__ieee754_rem_pio2+0x2e8>)
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f7fb fe38 	bl	800015c <__adddf3>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4630      	mov	r0, r6
 80044f2:	e9c4 2300 	strd	r2, r3, [r4]
 80044f6:	4639      	mov	r1, r7
 80044f8:	f7fb fe2e 	bl	8000158 <__aeabi_dsub>
 80044fc:	a386      	add	r3, pc, #536	; (adr r3, 8004718 <__ieee754_rem_pio2+0x2e8>)
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	f7fb fe2b 	bl	800015c <__adddf3>
 8004506:	f04f 35ff 	mov.w	r5, #4294967295
 800450a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800450e:	e7c6      	b.n	800449e <__ieee754_rem_pio2+0x6e>
 8004510:	a383      	add	r3, pc, #524	; (adr r3, 8004720 <__ieee754_rem_pio2+0x2f0>)
 8004512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004516:	f7fb fe21 	bl	800015c <__adddf3>
 800451a:	a383      	add	r3, pc, #524	; (adr r3, 8004728 <__ieee754_rem_pio2+0x2f8>)
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	4606      	mov	r6, r0
 8004522:	460f      	mov	r7, r1
 8004524:	f7fb fe1a 	bl	800015c <__adddf3>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4630      	mov	r0, r6
 800452e:	e9c4 2300 	strd	r2, r3, [r4]
 8004532:	4639      	mov	r1, r7
 8004534:	f7fb fe10 	bl	8000158 <__aeabi_dsub>
 8004538:	a37b      	add	r3, pc, #492	; (adr r3, 8004728 <__ieee754_rem_pio2+0x2f8>)
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	e7e0      	b.n	8004502 <__ieee754_rem_pio2+0xd2>
 8004540:	4a84      	ldr	r2, [pc, #528]	; (8004754 <__ieee754_rem_pio2+0x324>)
 8004542:	4592      	cmp	sl, r2
 8004544:	f300 80d5 	bgt.w	80046f2 <__ieee754_rem_pio2+0x2c2>
 8004548:	f000 feaa 	bl	80052a0 <fabs>
 800454c:	a378      	add	r3, pc, #480	; (adr r3, 8004730 <__ieee754_rem_pio2+0x300>)
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	4606      	mov	r6, r0
 8004554:	460f      	mov	r7, r1
 8004556:	f7fb ffb7 	bl	80004c8 <__aeabi_dmul>
 800455a:	2200      	movs	r2, #0
 800455c:	4b7e      	ldr	r3, [pc, #504]	; (8004758 <__ieee754_rem_pio2+0x328>)
 800455e:	f7fb fdfd 	bl	800015c <__adddf3>
 8004562:	f7fc fa4b 	bl	80009fc <__aeabi_d2iz>
 8004566:	4605      	mov	r5, r0
 8004568:	f7fb ff44 	bl	80003f4 <__aeabi_i2d>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004574:	a366      	add	r3, pc, #408	; (adr r3, 8004710 <__ieee754_rem_pio2+0x2e0>)
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f7fb ffa5 	bl	80004c8 <__aeabi_dmul>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4630      	mov	r0, r6
 8004584:	4639      	mov	r1, r7
 8004586:	f7fb fde7 	bl	8000158 <__aeabi_dsub>
 800458a:	a363      	add	r3, pc, #396	; (adr r3, 8004718 <__ieee754_rem_pio2+0x2e8>)
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	4680      	mov	r8, r0
 8004592:	4689      	mov	r9, r1
 8004594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004598:	f7fb ff96 	bl	80004c8 <__aeabi_dmul>
 800459c:	2d1f      	cmp	r5, #31
 800459e:	4606      	mov	r6, r0
 80045a0:	460f      	mov	r7, r1
 80045a2:	dc0e      	bgt.n	80045c2 <__ieee754_rem_pio2+0x192>
 80045a4:	4b6d      	ldr	r3, [pc, #436]	; (800475c <__ieee754_rem_pio2+0x32c>)
 80045a6:	1e6a      	subs	r2, r5, #1
 80045a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ac:	4553      	cmp	r3, sl
 80045ae:	d008      	beq.n	80045c2 <__ieee754_rem_pio2+0x192>
 80045b0:	4632      	mov	r2, r6
 80045b2:	463b      	mov	r3, r7
 80045b4:	4640      	mov	r0, r8
 80045b6:	4649      	mov	r1, r9
 80045b8:	f7fb fdce 	bl	8000158 <__aeabi_dsub>
 80045bc:	e9c4 0100 	strd	r0, r1, [r4]
 80045c0:	e013      	b.n	80045ea <__ieee754_rem_pio2+0x1ba>
 80045c2:	463b      	mov	r3, r7
 80045c4:	4632      	mov	r2, r6
 80045c6:	4640      	mov	r0, r8
 80045c8:	4649      	mov	r1, r9
 80045ca:	f7fb fdc5 	bl	8000158 <__aeabi_dsub>
 80045ce:	ea4f 532a 	mov.w	r3, sl, asr #20
 80045d2:	9305      	str	r3, [sp, #20]
 80045d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80045d8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80045dc:	f1ba 0f10 	cmp.w	sl, #16
 80045e0:	dc1f      	bgt.n	8004622 <__ieee754_rem_pio2+0x1f2>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	e9c4 2300 	strd	r2, r3, [r4]
 80045ea:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80045ee:	4640      	mov	r0, r8
 80045f0:	4653      	mov	r3, sl
 80045f2:	4649      	mov	r1, r9
 80045f4:	f7fb fdb0 	bl	8000158 <__aeabi_dsub>
 80045f8:	4632      	mov	r2, r6
 80045fa:	463b      	mov	r3, r7
 80045fc:	f7fb fdac 	bl	8000158 <__aeabi_dsub>
 8004600:	460b      	mov	r3, r1
 8004602:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004606:	9904      	ldr	r1, [sp, #16]
 8004608:	4602      	mov	r2, r0
 800460a:	2900      	cmp	r1, #0
 800460c:	f6bf af47 	bge.w	800449e <__ieee754_rem_pio2+0x6e>
 8004610:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8004614:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8004618:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800461c:	60e3      	str	r3, [r4, #12]
 800461e:	426d      	negs	r5, r5
 8004620:	e73d      	b.n	800449e <__ieee754_rem_pio2+0x6e>
 8004622:	a33f      	add	r3, pc, #252	; (adr r3, 8004720 <__ieee754_rem_pio2+0x2f0>)
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800462c:	f7fb ff4c 	bl	80004c8 <__aeabi_dmul>
 8004630:	4606      	mov	r6, r0
 8004632:	460f      	mov	r7, r1
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4640      	mov	r0, r8
 800463a:	4649      	mov	r1, r9
 800463c:	f7fb fd8c 	bl	8000158 <__aeabi_dsub>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4682      	mov	sl, r0
 8004646:	468b      	mov	fp, r1
 8004648:	4640      	mov	r0, r8
 800464a:	4649      	mov	r1, r9
 800464c:	f7fb fd84 	bl	8000158 <__aeabi_dsub>
 8004650:	4632      	mov	r2, r6
 8004652:	463b      	mov	r3, r7
 8004654:	f7fb fd80 	bl	8000158 <__aeabi_dsub>
 8004658:	a333      	add	r3, pc, #204	; (adr r3, 8004728 <__ieee754_rem_pio2+0x2f8>)
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	4606      	mov	r6, r0
 8004660:	460f      	mov	r7, r1
 8004662:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004666:	f7fb ff2f 	bl	80004c8 <__aeabi_dmul>
 800466a:	4632      	mov	r2, r6
 800466c:	463b      	mov	r3, r7
 800466e:	f7fb fd73 	bl	8000158 <__aeabi_dsub>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4606      	mov	r6, r0
 8004678:	460f      	mov	r7, r1
 800467a:	4650      	mov	r0, sl
 800467c:	4659      	mov	r1, fp
 800467e:	f7fb fd6b 	bl	8000158 <__aeabi_dsub>
 8004682:	9a05      	ldr	r2, [sp, #20]
 8004684:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b31      	cmp	r3, #49	; 0x31
 800468c:	dc06      	bgt.n	800469c <__ieee754_rem_pio2+0x26c>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	46d0      	mov	r8, sl
 8004694:	46d9      	mov	r9, fp
 8004696:	e9c4 2300 	strd	r2, r3, [r4]
 800469a:	e7a6      	b.n	80045ea <__ieee754_rem_pio2+0x1ba>
 800469c:	a326      	add	r3, pc, #152	; (adr r3, 8004738 <__ieee754_rem_pio2+0x308>)
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046a6:	f7fb ff0f 	bl	80004c8 <__aeabi_dmul>
 80046aa:	4606      	mov	r6, r0
 80046ac:	460f      	mov	r7, r1
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4650      	mov	r0, sl
 80046b4:	4659      	mov	r1, fp
 80046b6:	f7fb fd4f 	bl	8000158 <__aeabi_dsub>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4680      	mov	r8, r0
 80046c0:	4689      	mov	r9, r1
 80046c2:	4650      	mov	r0, sl
 80046c4:	4659      	mov	r1, fp
 80046c6:	f7fb fd47 	bl	8000158 <__aeabi_dsub>
 80046ca:	4632      	mov	r2, r6
 80046cc:	463b      	mov	r3, r7
 80046ce:	f7fb fd43 	bl	8000158 <__aeabi_dsub>
 80046d2:	a31b      	add	r3, pc, #108	; (adr r3, 8004740 <__ieee754_rem_pio2+0x310>)
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	4606      	mov	r6, r0
 80046da:	460f      	mov	r7, r1
 80046dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046e0:	f7fb fef2 	bl	80004c8 <__aeabi_dmul>
 80046e4:	4632      	mov	r2, r6
 80046e6:	463b      	mov	r3, r7
 80046e8:	f7fb fd36 	bl	8000158 <__aeabi_dsub>
 80046ec:	4606      	mov	r6, r0
 80046ee:	460f      	mov	r7, r1
 80046f0:	e75e      	b.n	80045b0 <__ieee754_rem_pio2+0x180>
 80046f2:	4a1b      	ldr	r2, [pc, #108]	; (8004760 <__ieee754_rem_pio2+0x330>)
 80046f4:	4592      	cmp	sl, r2
 80046f6:	dd35      	ble.n	8004764 <__ieee754_rem_pio2+0x334>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	f7fb fd2c 	bl	8000158 <__aeabi_dsub>
 8004700:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004704:	e9c4 0100 	strd	r0, r1, [r4]
 8004708:	e6a2      	b.n	8004450 <__ieee754_rem_pio2+0x20>
 800470a:	bf00      	nop
 800470c:	f3af 8000 	nop.w
 8004710:	54400000 	.word	0x54400000
 8004714:	3ff921fb 	.word	0x3ff921fb
 8004718:	1a626331 	.word	0x1a626331
 800471c:	3dd0b461 	.word	0x3dd0b461
 8004720:	1a600000 	.word	0x1a600000
 8004724:	3dd0b461 	.word	0x3dd0b461
 8004728:	2e037073 	.word	0x2e037073
 800472c:	3ba3198a 	.word	0x3ba3198a
 8004730:	6dc9c883 	.word	0x6dc9c883
 8004734:	3fe45f30 	.word	0x3fe45f30
 8004738:	2e000000 	.word	0x2e000000
 800473c:	3ba3198a 	.word	0x3ba3198a
 8004740:	252049c1 	.word	0x252049c1
 8004744:	397b839a 	.word	0x397b839a
 8004748:	3fe921fb 	.word	0x3fe921fb
 800474c:	4002d97b 	.word	0x4002d97b
 8004750:	3ff921fb 	.word	0x3ff921fb
 8004754:	413921fb 	.word	0x413921fb
 8004758:	3fe00000 	.word	0x3fe00000
 800475c:	08005518 	.word	0x08005518
 8004760:	7fefffff 	.word	0x7fefffff
 8004764:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004768:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800476c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004770:	460f      	mov	r7, r1
 8004772:	4606      	mov	r6, r0
 8004774:	f7fc f942 	bl	80009fc <__aeabi_d2iz>
 8004778:	f7fb fe3c 	bl	80003f4 <__aeabi_i2d>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4630      	mov	r0, r6
 8004782:	4639      	mov	r1, r7
 8004784:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004788:	f7fb fce6 	bl	8000158 <__aeabi_dsub>
 800478c:	2200      	movs	r2, #0
 800478e:	4b22      	ldr	r3, [pc, #136]	; (8004818 <__ieee754_rem_pio2+0x3e8>)
 8004790:	f7fb fe9a 	bl	80004c8 <__aeabi_dmul>
 8004794:	460f      	mov	r7, r1
 8004796:	4606      	mov	r6, r0
 8004798:	f7fc f930 	bl	80009fc <__aeabi_d2iz>
 800479c:	f7fb fe2a 	bl	80003f4 <__aeabi_i2d>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4630      	mov	r0, r6
 80047a6:	4639      	mov	r1, r7
 80047a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80047ac:	f7fb fcd4 	bl	8000158 <__aeabi_dsub>
 80047b0:	2200      	movs	r2, #0
 80047b2:	4b19      	ldr	r3, [pc, #100]	; (8004818 <__ieee754_rem_pio2+0x3e8>)
 80047b4:	f7fb fe88 	bl	80004c8 <__aeabi_dmul>
 80047b8:	f04f 0803 	mov.w	r8, #3
 80047bc:	2600      	movs	r6, #0
 80047be:	2700      	movs	r7, #0
 80047c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80047c4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80047c8:	4632      	mov	r2, r6
 80047ca:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80047ce:	463b      	mov	r3, r7
 80047d0:	46c2      	mov	sl, r8
 80047d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80047d6:	f7fc f8df 	bl	8000998 <__aeabi_dcmpeq>
 80047da:	2800      	cmp	r0, #0
 80047dc:	d1f4      	bne.n	80047c8 <__ieee754_rem_pio2+0x398>
 80047de:	4b0f      	ldr	r3, [pc, #60]	; (800481c <__ieee754_rem_pio2+0x3ec>)
 80047e0:	462a      	mov	r2, r5
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	2302      	movs	r3, #2
 80047e6:	4621      	mov	r1, r4
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	a806      	add	r0, sp, #24
 80047ec:	4653      	mov	r3, sl
 80047ee:	f000 f817 	bl	8004820 <__kernel_rem_pio2>
 80047f2:	9b04      	ldr	r3, [sp, #16]
 80047f4:	4605      	mov	r5, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f6bf ae51 	bge.w	800449e <__ieee754_rem_pio2+0x6e>
 80047fc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004800:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004804:	e9c4 2300 	strd	r2, r3, [r4]
 8004808:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800480c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004810:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004814:	e703      	b.n	800461e <__ieee754_rem_pio2+0x1ee>
 8004816:	bf00      	nop
 8004818:	41700000 	.word	0x41700000
 800481c:	08005598 	.word	0x08005598

08004820 <__kernel_rem_pio2>:
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004824:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004828:	9308      	str	r3, [sp, #32]
 800482a:	9106      	str	r1, [sp, #24]
 800482c:	4bb6      	ldr	r3, [pc, #728]	; (8004b08 <__kernel_rem_pio2+0x2e8>)
 800482e:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8004830:	f112 0f14 	cmn.w	r2, #20
 8004834:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004838:	bfa8      	it	ge
 800483a:	1ed4      	subge	r4, r2, #3
 800483c:	9302      	str	r3, [sp, #8]
 800483e:	9b08      	ldr	r3, [sp, #32]
 8004840:	bfb8      	it	lt
 8004842:	2400      	movlt	r4, #0
 8004844:	f103 33ff 	add.w	r3, r3, #4294967295
 8004848:	9307      	str	r3, [sp, #28]
 800484a:	bfa4      	itt	ge
 800484c:	2318      	movge	r3, #24
 800484e:	fb94 f4f3 	sdivge	r4, r4, r3
 8004852:	f06f 0317 	mvn.w	r3, #23
 8004856:	fb04 3303 	mla	r3, r4, r3, r3
 800485a:	eb03 0b02 	add.w	fp, r3, r2
 800485e:	9a07      	ldr	r2, [sp, #28]
 8004860:	9b02      	ldr	r3, [sp, #8]
 8004862:	1aa7      	subs	r7, r4, r2
 8004864:	eb03 0802 	add.w	r8, r3, r2
 8004868:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800486a:	2500      	movs	r5, #0
 800486c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004870:	2200      	movs	r2, #0
 8004872:	2300      	movs	r3, #0
 8004874:	9009      	str	r0, [sp, #36]	; 0x24
 8004876:	ae20      	add	r6, sp, #128	; 0x80
 8004878:	4545      	cmp	r5, r8
 800487a:	dd14      	ble.n	80048a6 <__kernel_rem_pio2+0x86>
 800487c:	f04f 0800 	mov.w	r8, #0
 8004880:	9a08      	ldr	r2, [sp, #32]
 8004882:	ab20      	add	r3, sp, #128	; 0x80
 8004884:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8004888:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800488c:	9b02      	ldr	r3, [sp, #8]
 800488e:	4598      	cmp	r8, r3
 8004890:	dc35      	bgt.n	80048fe <__kernel_rem_pio2+0xde>
 8004892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004894:	2200      	movs	r2, #0
 8004896:	f1a3 0908 	sub.w	r9, r3, #8
 800489a:	2300      	movs	r3, #0
 800489c:	462f      	mov	r7, r5
 800489e:	2600      	movs	r6, #0
 80048a0:	e9cd 2300 	strd	r2, r3, [sp]
 80048a4:	e01f      	b.n	80048e6 <__kernel_rem_pio2+0xc6>
 80048a6:	42ef      	cmn	r7, r5
 80048a8:	d40b      	bmi.n	80048c2 <__kernel_rem_pio2+0xa2>
 80048aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80048ae:	e9cd 2300 	strd	r2, r3, [sp]
 80048b2:	f7fb fd9f 	bl	80003f4 <__aeabi_i2d>
 80048b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80048be:	3501      	adds	r5, #1
 80048c0:	e7da      	b.n	8004878 <__kernel_rem_pio2+0x58>
 80048c2:	4610      	mov	r0, r2
 80048c4:	4619      	mov	r1, r3
 80048c6:	e7f8      	b.n	80048ba <__kernel_rem_pio2+0x9a>
 80048c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048cc:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80048d0:	f7fb fdfa 	bl	80004c8 <__aeabi_dmul>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048dc:	f7fb fc3e 	bl	800015c <__adddf3>
 80048e0:	e9cd 0100 	strd	r0, r1, [sp]
 80048e4:	3601      	adds	r6, #1
 80048e6:	9b07      	ldr	r3, [sp, #28]
 80048e8:	3f08      	subs	r7, #8
 80048ea:	429e      	cmp	r6, r3
 80048ec:	ddec      	ble.n	80048c8 <__kernel_rem_pio2+0xa8>
 80048ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048f2:	f108 0801 	add.w	r8, r8, #1
 80048f6:	e8ea 2302 	strd	r2, r3, [sl], #8
 80048fa:	3508      	adds	r5, #8
 80048fc:	e7c6      	b.n	800488c <__kernel_rem_pio2+0x6c>
 80048fe:	9b02      	ldr	r3, [sp, #8]
 8004900:	aa0c      	add	r2, sp, #48	; 0x30
 8004902:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004906:	930b      	str	r3, [sp, #44]	; 0x2c
 8004908:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800490a:	9e02      	ldr	r6, [sp, #8]
 800490c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004910:	930a      	str	r3, [sp, #40]	; 0x28
 8004912:	ab98      	add	r3, sp, #608	; 0x260
 8004914:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004918:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800491c:	ab70      	add	r3, sp, #448	; 0x1c0
 800491e:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8004922:	46d0      	mov	r8, sl
 8004924:	46b1      	mov	r9, r6
 8004926:	af0c      	add	r7, sp, #48	; 0x30
 8004928:	9700      	str	r7, [sp, #0]
 800492a:	f1b9 0f00 	cmp.w	r9, #0
 800492e:	f1a8 0808 	sub.w	r8, r8, #8
 8004932:	dc71      	bgt.n	8004a18 <__kernel_rem_pio2+0x1f8>
 8004934:	465a      	mov	r2, fp
 8004936:	4620      	mov	r0, r4
 8004938:	4629      	mov	r1, r5
 800493a:	f000 fd35 	bl	80053a8 <scalbn>
 800493e:	2200      	movs	r2, #0
 8004940:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004944:	4604      	mov	r4, r0
 8004946:	460d      	mov	r5, r1
 8004948:	f7fb fdbe 	bl	80004c8 <__aeabi_dmul>
 800494c:	f000 fcac 	bl	80052a8 <floor>
 8004950:	2200      	movs	r2, #0
 8004952:	4b6e      	ldr	r3, [pc, #440]	; (8004b0c <__kernel_rem_pio2+0x2ec>)
 8004954:	f7fb fdb8 	bl	80004c8 <__aeabi_dmul>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4620      	mov	r0, r4
 800495e:	4629      	mov	r1, r5
 8004960:	f7fb fbfa 	bl	8000158 <__aeabi_dsub>
 8004964:	460d      	mov	r5, r1
 8004966:	4604      	mov	r4, r0
 8004968:	f7fc f848 	bl	80009fc <__aeabi_d2iz>
 800496c:	9004      	str	r0, [sp, #16]
 800496e:	f7fb fd41 	bl	80003f4 <__aeabi_i2d>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4620      	mov	r0, r4
 8004978:	4629      	mov	r1, r5
 800497a:	f7fb fbed 	bl	8000158 <__aeabi_dsub>
 800497e:	f1bb 0f00 	cmp.w	fp, #0
 8004982:	4680      	mov	r8, r0
 8004984:	4689      	mov	r9, r1
 8004986:	dd70      	ble.n	8004a6a <__kernel_rem_pio2+0x24a>
 8004988:	1e72      	subs	r2, r6, #1
 800498a:	ab0c      	add	r3, sp, #48	; 0x30
 800498c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004990:	9c04      	ldr	r4, [sp, #16]
 8004992:	f1cb 0118 	rsb	r1, fp, #24
 8004996:	fa40 f301 	asr.w	r3, r0, r1
 800499a:	441c      	add	r4, r3
 800499c:	408b      	lsls	r3, r1
 800499e:	1ac0      	subs	r0, r0, r3
 80049a0:	ab0c      	add	r3, sp, #48	; 0x30
 80049a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80049a6:	f1cb 0317 	rsb	r3, fp, #23
 80049aa:	9404      	str	r4, [sp, #16]
 80049ac:	fa40 f303 	asr.w	r3, r0, r3
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	9b00      	ldr	r3, [sp, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	dd66      	ble.n	8004a86 <__kernel_rem_pio2+0x266>
 80049b8:	2200      	movs	r2, #0
 80049ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80049be:	4614      	mov	r4, r2
 80049c0:	9b04      	ldr	r3, [sp, #16]
 80049c2:	3301      	adds	r3, #1
 80049c4:	9304      	str	r3, [sp, #16]
 80049c6:	4296      	cmp	r6, r2
 80049c8:	f300 80ac 	bgt.w	8004b24 <__kernel_rem_pio2+0x304>
 80049cc:	f1bb 0f00 	cmp.w	fp, #0
 80049d0:	dd07      	ble.n	80049e2 <__kernel_rem_pio2+0x1c2>
 80049d2:	f1bb 0f01 	cmp.w	fp, #1
 80049d6:	f000 80b4 	beq.w	8004b42 <__kernel_rem_pio2+0x322>
 80049da:	f1bb 0f02 	cmp.w	fp, #2
 80049de:	f000 80ba 	beq.w	8004b56 <__kernel_rem_pio2+0x336>
 80049e2:	9b00      	ldr	r3, [sp, #0]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d14e      	bne.n	8004a86 <__kernel_rem_pio2+0x266>
 80049e8:	4642      	mov	r2, r8
 80049ea:	464b      	mov	r3, r9
 80049ec:	2000      	movs	r0, #0
 80049ee:	4948      	ldr	r1, [pc, #288]	; (8004b10 <__kernel_rem_pio2+0x2f0>)
 80049f0:	f7fb fbb2 	bl	8000158 <__aeabi_dsub>
 80049f4:	4680      	mov	r8, r0
 80049f6:	4689      	mov	r9, r1
 80049f8:	2c00      	cmp	r4, #0
 80049fa:	d044      	beq.n	8004a86 <__kernel_rem_pio2+0x266>
 80049fc:	465a      	mov	r2, fp
 80049fe:	2000      	movs	r0, #0
 8004a00:	4943      	ldr	r1, [pc, #268]	; (8004b10 <__kernel_rem_pio2+0x2f0>)
 8004a02:	f000 fcd1 	bl	80053a8 <scalbn>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4640      	mov	r0, r8
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	f7fb fba3 	bl	8000158 <__aeabi_dsub>
 8004a12:	4680      	mov	r8, r0
 8004a14:	4689      	mov	r9, r1
 8004a16:	e036      	b.n	8004a86 <__kernel_rem_pio2+0x266>
 8004a18:	2200      	movs	r2, #0
 8004a1a:	4b3e      	ldr	r3, [pc, #248]	; (8004b14 <__kernel_rem_pio2+0x2f4>)
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	4629      	mov	r1, r5
 8004a20:	f7fb fd52 	bl	80004c8 <__aeabi_dmul>
 8004a24:	f7fb ffea 	bl	80009fc <__aeabi_d2iz>
 8004a28:	f7fb fce4 	bl	80003f4 <__aeabi_i2d>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a34:	2200      	movs	r2, #0
 8004a36:	4b38      	ldr	r3, [pc, #224]	; (8004b18 <__kernel_rem_pio2+0x2f8>)
 8004a38:	f7fb fd46 	bl	80004c8 <__aeabi_dmul>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4620      	mov	r0, r4
 8004a42:	4629      	mov	r1, r5
 8004a44:	f7fb fb88 	bl	8000158 <__aeabi_dsub>
 8004a48:	f7fb ffd8 	bl	80009fc <__aeabi_d2iz>
 8004a4c:	9b00      	ldr	r3, [sp, #0]
 8004a4e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004a52:	f843 0b04 	str.w	r0, [r3], #4
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a5c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004a60:	f7fb fb7c 	bl	800015c <__adddf3>
 8004a64:	4604      	mov	r4, r0
 8004a66:	460d      	mov	r5, r1
 8004a68:	e75f      	b.n	800492a <__kernel_rem_pio2+0x10a>
 8004a6a:	d105      	bne.n	8004a78 <__kernel_rem_pio2+0x258>
 8004a6c:	1e73      	subs	r3, r6, #1
 8004a6e:	aa0c      	add	r2, sp, #48	; 0x30
 8004a70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a74:	15c3      	asrs	r3, r0, #23
 8004a76:	e79b      	b.n	80049b0 <__kernel_rem_pio2+0x190>
 8004a78:	2200      	movs	r2, #0
 8004a7a:	4b28      	ldr	r3, [pc, #160]	; (8004b1c <__kernel_rem_pio2+0x2fc>)
 8004a7c:	f7fb ffaa 	bl	80009d4 <__aeabi_dcmpge>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d13e      	bne.n	8004b02 <__kernel_rem_pio2+0x2e2>
 8004a84:	9000      	str	r0, [sp, #0]
 8004a86:	2200      	movs	r2, #0
 8004a88:	2300      	movs	r3, #0
 8004a8a:	4640      	mov	r0, r8
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	f7fb ff83 	bl	8000998 <__aeabi_dcmpeq>
 8004a92:	2800      	cmp	r0, #0
 8004a94:	f000 80b1 	beq.w	8004bfa <__kernel_rem_pio2+0x3da>
 8004a98:	1e74      	subs	r4, r6, #1
 8004a9a:	4623      	mov	r3, r4
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	9902      	ldr	r1, [sp, #8]
 8004aa0:	428b      	cmp	r3, r1
 8004aa2:	da5f      	bge.n	8004b64 <__kernel_rem_pio2+0x344>
 8004aa4:	2a00      	cmp	r2, #0
 8004aa6:	d074      	beq.n	8004b92 <__kernel_rem_pio2+0x372>
 8004aa8:	ab0c      	add	r3, sp, #48	; 0x30
 8004aaa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004aae:	f1ab 0b18 	sub.w	fp, fp, #24
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 809f 	beq.w	8004bf6 <__kernel_rem_pio2+0x3d6>
 8004ab8:	465a      	mov	r2, fp
 8004aba:	2000      	movs	r0, #0
 8004abc:	4914      	ldr	r1, [pc, #80]	; (8004b10 <__kernel_rem_pio2+0x2f0>)
 8004abe:	f000 fc73 	bl	80053a8 <scalbn>
 8004ac2:	46a2      	mov	sl, r4
 8004ac4:	4606      	mov	r6, r0
 8004ac6:	460f      	mov	r7, r1
 8004ac8:	f04f 0800 	mov.w	r8, #0
 8004acc:	ab70      	add	r3, sp, #448	; 0x1c0
 8004ace:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004b14 <__kernel_rem_pio2+0x2f4>
 8004ad2:	00e5      	lsls	r5, r4, #3
 8004ad4:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8004ad8:	f1ba 0f00 	cmp.w	sl, #0
 8004adc:	f280 80c3 	bge.w	8004c66 <__kernel_rem_pio2+0x446>
 8004ae0:	4626      	mov	r6, r4
 8004ae2:	2e00      	cmp	r6, #0
 8004ae4:	f2c0 80f5 	blt.w	8004cd2 <__kernel_rem_pio2+0x4b2>
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <__kernel_rem_pio2+0x300>)
 8004aea:	f04f 0a00 	mov.w	sl, #0
 8004aee:	9307      	str	r3, [sp, #28]
 8004af0:	ab70      	add	r3, sp, #448	; 0x1c0
 8004af2:	f04f 0b00 	mov.w	fp, #0
 8004af6:	f04f 0800 	mov.w	r8, #0
 8004afa:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004afe:	1ba7      	subs	r7, r4, r6
 8004b00:	e0db      	b.n	8004cba <__kernel_rem_pio2+0x49a>
 8004b02:	2302      	movs	r3, #2
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	e757      	b.n	80049b8 <__kernel_rem_pio2+0x198>
 8004b08:	080056e0 	.word	0x080056e0
 8004b0c:	40200000 	.word	0x40200000
 8004b10:	3ff00000 	.word	0x3ff00000
 8004b14:	3e700000 	.word	0x3e700000
 8004b18:	41700000 	.word	0x41700000
 8004b1c:	3fe00000 	.word	0x3fe00000
 8004b20:	080056a0 	.word	0x080056a0
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	b944      	cbnz	r4, 8004b3a <__kernel_rem_pio2+0x31a>
 8004b28:	b11b      	cbz	r3, 8004b32 <__kernel_rem_pio2+0x312>
 8004b2a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	2301      	movs	r3, #1
 8004b32:	461c      	mov	r4, r3
 8004b34:	3201      	adds	r2, #1
 8004b36:	3704      	adds	r7, #4
 8004b38:	e745      	b.n	80049c6 <__kernel_rem_pio2+0x1a6>
 8004b3a:	1acb      	subs	r3, r1, r3
 8004b3c:	603b      	str	r3, [r7, #0]
 8004b3e:	4623      	mov	r3, r4
 8004b40:	e7f7      	b.n	8004b32 <__kernel_rem_pio2+0x312>
 8004b42:	1e72      	subs	r2, r6, #1
 8004b44:	ab0c      	add	r3, sp, #48	; 0x30
 8004b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b4a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004b4e:	a90c      	add	r1, sp, #48	; 0x30
 8004b50:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004b54:	e745      	b.n	80049e2 <__kernel_rem_pio2+0x1c2>
 8004b56:	1e72      	subs	r2, r6, #1
 8004b58:	ab0c      	add	r3, sp, #48	; 0x30
 8004b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b5e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004b62:	e7f4      	b.n	8004b4e <__kernel_rem_pio2+0x32e>
 8004b64:	a90c      	add	r1, sp, #48	; 0x30
 8004b66:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	e796      	b.n	8004a9e <__kernel_rem_pio2+0x27e>
 8004b70:	3401      	adds	r4, #1
 8004b72:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004b76:	2a00      	cmp	r2, #0
 8004b78:	d0fa      	beq.n	8004b70 <__kernel_rem_pio2+0x350>
 8004b7a:	9b08      	ldr	r3, [sp, #32]
 8004b7c:	f106 0801 	add.w	r8, r6, #1
 8004b80:	18f5      	adds	r5, r6, r3
 8004b82:	ab20      	add	r3, sp, #128	; 0x80
 8004b84:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004b88:	4434      	add	r4, r6
 8004b8a:	4544      	cmp	r4, r8
 8004b8c:	da04      	bge.n	8004b98 <__kernel_rem_pio2+0x378>
 8004b8e:	4626      	mov	r6, r4
 8004b90:	e6bf      	b.n	8004912 <__kernel_rem_pio2+0xf2>
 8004b92:	2401      	movs	r4, #1
 8004b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b96:	e7ec      	b.n	8004b72 <__kernel_rem_pio2+0x352>
 8004b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b9a:	f04f 0900 	mov.w	r9, #0
 8004b9e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004ba2:	f7fb fc27 	bl	80003f4 <__aeabi_i2d>
 8004ba6:	2600      	movs	r6, #0
 8004ba8:	2700      	movs	r7, #0
 8004baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bac:	e9c5 0100 	strd	r0, r1, [r5]
 8004bb0:	3b08      	subs	r3, #8
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	9504      	str	r5, [sp, #16]
 8004bb6:	9b07      	ldr	r3, [sp, #28]
 8004bb8:	4599      	cmp	r9, r3
 8004bba:	dd05      	ble.n	8004bc8 <__kernel_rem_pio2+0x3a8>
 8004bbc:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8004bc0:	f108 0801 	add.w	r8, r8, #1
 8004bc4:	3508      	adds	r5, #8
 8004bc6:	e7e0      	b.n	8004b8a <__kernel_rem_pio2+0x36a>
 8004bc8:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004bcc:	9900      	ldr	r1, [sp, #0]
 8004bce:	f109 0901 	add.w	r9, r9, #1
 8004bd2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8004bd6:	9100      	str	r1, [sp, #0]
 8004bd8:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8004bdc:	f8cd c010 	str.w	ip, [sp, #16]
 8004be0:	f7fb fc72 	bl	80004c8 <__aeabi_dmul>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4630      	mov	r0, r6
 8004bea:	4639      	mov	r1, r7
 8004bec:	f7fb fab6 	bl	800015c <__adddf3>
 8004bf0:	4606      	mov	r6, r0
 8004bf2:	460f      	mov	r7, r1
 8004bf4:	e7df      	b.n	8004bb6 <__kernel_rem_pio2+0x396>
 8004bf6:	3c01      	subs	r4, #1
 8004bf8:	e756      	b.n	8004aa8 <__kernel_rem_pio2+0x288>
 8004bfa:	f1cb 0200 	rsb	r2, fp, #0
 8004bfe:	4640      	mov	r0, r8
 8004c00:	4649      	mov	r1, r9
 8004c02:	f000 fbd1 	bl	80053a8 <scalbn>
 8004c06:	2200      	movs	r2, #0
 8004c08:	4ba4      	ldr	r3, [pc, #656]	; (8004e9c <__kernel_rem_pio2+0x67c>)
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	460d      	mov	r5, r1
 8004c0e:	f7fb fee1 	bl	80009d4 <__aeabi_dcmpge>
 8004c12:	b1f8      	cbz	r0, 8004c54 <__kernel_rem_pio2+0x434>
 8004c14:	2200      	movs	r2, #0
 8004c16:	4ba2      	ldr	r3, [pc, #648]	; (8004ea0 <__kernel_rem_pio2+0x680>)
 8004c18:	4620      	mov	r0, r4
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	f7fb fc54 	bl	80004c8 <__aeabi_dmul>
 8004c20:	f7fb feec 	bl	80009fc <__aeabi_d2iz>
 8004c24:	4607      	mov	r7, r0
 8004c26:	f7fb fbe5 	bl	80003f4 <__aeabi_i2d>
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	4b9b      	ldr	r3, [pc, #620]	; (8004e9c <__kernel_rem_pio2+0x67c>)
 8004c2e:	f7fb fc4b 	bl	80004c8 <__aeabi_dmul>
 8004c32:	460b      	mov	r3, r1
 8004c34:	4602      	mov	r2, r0
 8004c36:	4629      	mov	r1, r5
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f7fb fa8d 	bl	8000158 <__aeabi_dsub>
 8004c3e:	f7fb fedd 	bl	80009fc <__aeabi_d2iz>
 8004c42:	1c74      	adds	r4, r6, #1
 8004c44:	ab0c      	add	r3, sp, #48	; 0x30
 8004c46:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8004c4a:	f10b 0b18 	add.w	fp, fp, #24
 8004c4e:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8004c52:	e731      	b.n	8004ab8 <__kernel_rem_pio2+0x298>
 8004c54:	4620      	mov	r0, r4
 8004c56:	4629      	mov	r1, r5
 8004c58:	f7fb fed0 	bl	80009fc <__aeabi_d2iz>
 8004c5c:	ab0c      	add	r3, sp, #48	; 0x30
 8004c5e:	4634      	mov	r4, r6
 8004c60:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8004c64:	e728      	b.n	8004ab8 <__kernel_rem_pio2+0x298>
 8004c66:	ab0c      	add	r3, sp, #48	; 0x30
 8004c68:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004c6c:	f7fb fbc2 	bl	80003f4 <__aeabi_i2d>
 8004c70:	4632      	mov	r2, r6
 8004c72:	463b      	mov	r3, r7
 8004c74:	f7fb fc28 	bl	80004c8 <__aeabi_dmul>
 8004c78:	4642      	mov	r2, r8
 8004c7a:	e86b 0102 	strd	r0, r1, [fp], #-8
 8004c7e:	464b      	mov	r3, r9
 8004c80:	4630      	mov	r0, r6
 8004c82:	4639      	mov	r1, r7
 8004c84:	f7fb fc20 	bl	80004c8 <__aeabi_dmul>
 8004c88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c8c:	4606      	mov	r6, r0
 8004c8e:	460f      	mov	r7, r1
 8004c90:	e722      	b.n	8004ad8 <__kernel_rem_pio2+0x2b8>
 8004c92:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004c96:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004c9a:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8004c9e:	f8cd c01c 	str.w	ip, [sp, #28]
 8004ca2:	f7fb fc11 	bl	80004c8 <__aeabi_dmul>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4650      	mov	r0, sl
 8004cac:	4659      	mov	r1, fp
 8004cae:	f7fb fa55 	bl	800015c <__adddf3>
 8004cb2:	4682      	mov	sl, r0
 8004cb4:	468b      	mov	fp, r1
 8004cb6:	f108 0801 	add.w	r8, r8, #1
 8004cba:	9b02      	ldr	r3, [sp, #8]
 8004cbc:	4598      	cmp	r8, r3
 8004cbe:	dc01      	bgt.n	8004cc4 <__kernel_rem_pio2+0x4a4>
 8004cc0:	45b8      	cmp	r8, r7
 8004cc2:	dde6      	ble.n	8004c92 <__kernel_rem_pio2+0x472>
 8004cc4:	ab48      	add	r3, sp, #288	; 0x120
 8004cc6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004cca:	e9c7 ab00 	strd	sl, fp, [r7]
 8004cce:	3e01      	subs	r6, #1
 8004cd0:	e707      	b.n	8004ae2 <__kernel_rem_pio2+0x2c2>
 8004cd2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	dc09      	bgt.n	8004cec <__kernel_rem_pio2+0x4cc>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	dc32      	bgt.n	8004d42 <__kernel_rem_pio2+0x522>
 8004cdc:	d05a      	beq.n	8004d94 <__kernel_rem_pio2+0x574>
 8004cde:	9b04      	ldr	r3, [sp, #16]
 8004ce0:	f003 0007 	and.w	r0, r3, #7
 8004ce4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cec:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d1f5      	bne.n	8004cde <__kernel_rem_pio2+0x4be>
 8004cf2:	ab48      	add	r3, sp, #288	; 0x120
 8004cf4:	441d      	add	r5, r3
 8004cf6:	46aa      	mov	sl, r5
 8004cf8:	46a3      	mov	fp, r4
 8004cfa:	f1bb 0f00 	cmp.w	fp, #0
 8004cfe:	dc76      	bgt.n	8004dee <__kernel_rem_pio2+0x5ce>
 8004d00:	46aa      	mov	sl, r5
 8004d02:	46a3      	mov	fp, r4
 8004d04:	f1bb 0f01 	cmp.w	fp, #1
 8004d08:	f300 8090 	bgt.w	8004e2c <__kernel_rem_pio2+0x60c>
 8004d0c:	2700      	movs	r7, #0
 8004d0e:	463e      	mov	r6, r7
 8004d10:	2c01      	cmp	r4, #1
 8004d12:	f300 80aa 	bgt.w	8004e6a <__kernel_rem_pio2+0x64a>
 8004d16:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8004d1a:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8004d1e:	9b00      	ldr	r3, [sp, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f040 80ac 	bne.w	8004e7e <__kernel_rem_pio2+0x65e>
 8004d26:	4603      	mov	r3, r0
 8004d28:	462a      	mov	r2, r5
 8004d2a:	9806      	ldr	r0, [sp, #24]
 8004d2c:	e9c0 2300 	strd	r2, r3, [r0]
 8004d30:	4622      	mov	r2, r4
 8004d32:	460b      	mov	r3, r1
 8004d34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004d38:	463a      	mov	r2, r7
 8004d3a:	4633      	mov	r3, r6
 8004d3c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004d40:	e7cd      	b.n	8004cde <__kernel_rem_pio2+0x4be>
 8004d42:	2000      	movs	r0, #0
 8004d44:	46a0      	mov	r8, r4
 8004d46:	4601      	mov	r1, r0
 8004d48:	ab48      	add	r3, sp, #288	; 0x120
 8004d4a:	441d      	add	r5, r3
 8004d4c:	f1b8 0f00 	cmp.w	r8, #0
 8004d50:	da3a      	bge.n	8004dc8 <__kernel_rem_pio2+0x5a8>
 8004d52:	9b00      	ldr	r3, [sp, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d03e      	beq.n	8004dd6 <__kernel_rem_pio2+0x5b6>
 8004d58:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	462b      	mov	r3, r5
 8004d60:	9d06      	ldr	r5, [sp, #24]
 8004d62:	2601      	movs	r6, #1
 8004d64:	e9c5 2300 	strd	r2, r3, [r5]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004d6e:	f7fb f9f3 	bl	8000158 <__aeabi_dsub>
 8004d72:	4684      	mov	ip, r0
 8004d74:	460f      	mov	r7, r1
 8004d76:	ad48      	add	r5, sp, #288	; 0x120
 8004d78:	42b4      	cmp	r4, r6
 8004d7a:	f105 0508 	add.w	r5, r5, #8
 8004d7e:	da2c      	bge.n	8004dda <__kernel_rem_pio2+0x5ba>
 8004d80:	9b00      	ldr	r3, [sp, #0]
 8004d82:	b10b      	cbz	r3, 8004d88 <__kernel_rem_pio2+0x568>
 8004d84:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004d88:	4662      	mov	r2, ip
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	9906      	ldr	r1, [sp, #24]
 8004d8e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004d92:	e7a4      	b.n	8004cde <__kernel_rem_pio2+0x4be>
 8004d94:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8004d96:	ab48      	add	r3, sp, #288	; 0x120
 8004d98:	4637      	mov	r7, r6
 8004d9a:	441d      	add	r5, r3
 8004d9c:	2c00      	cmp	r4, #0
 8004d9e:	da09      	bge.n	8004db4 <__kernel_rem_pio2+0x594>
 8004da0:	9b00      	ldr	r3, [sp, #0]
 8004da2:	b10b      	cbz	r3, 8004da8 <__kernel_rem_pio2+0x588>
 8004da4:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004da8:	4632      	mov	r2, r6
 8004daa:	463b      	mov	r3, r7
 8004dac:	9906      	ldr	r1, [sp, #24]
 8004dae:	e9c1 2300 	strd	r2, r3, [r1]
 8004db2:	e794      	b.n	8004cde <__kernel_rem_pio2+0x4be>
 8004db4:	4630      	mov	r0, r6
 8004db6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004dba:	4639      	mov	r1, r7
 8004dbc:	f7fb f9ce 	bl	800015c <__adddf3>
 8004dc0:	3c01      	subs	r4, #1
 8004dc2:	4606      	mov	r6, r0
 8004dc4:	460f      	mov	r7, r1
 8004dc6:	e7e9      	b.n	8004d9c <__kernel_rem_pio2+0x57c>
 8004dc8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004dcc:	f7fb f9c6 	bl	800015c <__adddf3>
 8004dd0:	f108 38ff 	add.w	r8, r8, #4294967295
 8004dd4:	e7ba      	b.n	8004d4c <__kernel_rem_pio2+0x52c>
 8004dd6:	460d      	mov	r5, r1
 8004dd8:	e7c0      	b.n	8004d5c <__kernel_rem_pio2+0x53c>
 8004dda:	4660      	mov	r0, ip
 8004ddc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004de0:	4639      	mov	r1, r7
 8004de2:	f7fb f9bb 	bl	800015c <__adddf3>
 8004de6:	3601      	adds	r6, #1
 8004de8:	4684      	mov	ip, r0
 8004dea:	460f      	mov	r7, r1
 8004dec:	e7c4      	b.n	8004d78 <__kernel_rem_pio2+0x558>
 8004dee:	e9da 6700 	ldrd	r6, r7, [sl]
 8004df2:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8004df6:	4632      	mov	r2, r6
 8004df8:	463b      	mov	r3, r7
 8004dfa:	4640      	mov	r0, r8
 8004dfc:	4649      	mov	r1, r9
 8004dfe:	f7fb f9ad 	bl	800015c <__adddf3>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	4649      	mov	r1, r9
 8004e0e:	f7fb f9a3 	bl	8000158 <__aeabi_dsub>
 8004e12:	4632      	mov	r2, r6
 8004e14:	463b      	mov	r3, r7
 8004e16:	f7fb f9a1 	bl	800015c <__adddf3>
 8004e1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e1e:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004e22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e26:	e9ca 2300 	strd	r2, r3, [sl]
 8004e2a:	e766      	b.n	8004cfa <__kernel_rem_pio2+0x4da>
 8004e2c:	e9da 8900 	ldrd	r8, r9, [sl]
 8004e30:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8004e34:	4642      	mov	r2, r8
 8004e36:	464b      	mov	r3, r9
 8004e38:	4630      	mov	r0, r6
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	f7fb f98e 	bl	800015c <__adddf3>
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e48:	4630      	mov	r0, r6
 8004e4a:	4639      	mov	r1, r7
 8004e4c:	f7fb f984 	bl	8000158 <__aeabi_dsub>
 8004e50:	4642      	mov	r2, r8
 8004e52:	464b      	mov	r3, r9
 8004e54:	f7fb f982 	bl	800015c <__adddf3>
 8004e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e5c:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004e60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e64:	e9ca 2300 	strd	r2, r3, [sl]
 8004e68:	e74c      	b.n	8004d04 <__kernel_rem_pio2+0x4e4>
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004e70:	4631      	mov	r1, r6
 8004e72:	f7fb f973 	bl	800015c <__adddf3>
 8004e76:	3c01      	subs	r4, #1
 8004e78:	4607      	mov	r7, r0
 8004e7a:	460e      	mov	r6, r1
 8004e7c:	e748      	b.n	8004d10 <__kernel_rem_pio2+0x4f0>
 8004e7e:	9b06      	ldr	r3, [sp, #24]
 8004e80:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004e84:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004e88:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004e8c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8004e90:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8004e94:	601d      	str	r5, [r3, #0]
 8004e96:	615e      	str	r6, [r3, #20]
 8004e98:	e721      	b.n	8004cde <__kernel_rem_pio2+0x4be>
 8004e9a:	bf00      	nop
 8004e9c:	41700000 	.word	0x41700000
 8004ea0:	3e700000 	.word	0x3e700000
 8004ea4:	00000000 	.word	0x00000000

08004ea8 <__kernel_tan>:
 8004ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eac:	b08b      	sub	sp, #44	; 0x2c
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	4bd9      	ldr	r3, [pc, #868]	; (8005218 <__kernel_tan+0x370>)
 8004eb2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004eb6:	429e      	cmp	r6, r3
 8004eb8:	4604      	mov	r4, r0
 8004eba:	460d      	mov	r5, r1
 8004ebc:	4682      	mov	sl, r0
 8004ebe:	468b      	mov	fp, r1
 8004ec0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004ec2:	9202      	str	r2, [sp, #8]
 8004ec4:	9107      	str	r1, [sp, #28]
 8004ec6:	dc58      	bgt.n	8004f7a <__kernel_tan+0xd2>
 8004ec8:	f7fb fd98 	bl	80009fc <__aeabi_d2iz>
 8004ecc:	4605      	mov	r5, r0
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	d178      	bne.n	8004fc4 <__kernel_tan+0x11c>
 8004ed2:	1c7b      	adds	r3, r7, #1
 8004ed4:	4323      	orrs	r3, r4
 8004ed6:	4333      	orrs	r3, r6
 8004ed8:	d110      	bne.n	8004efc <__kernel_tan+0x54>
 8004eda:	4620      	mov	r0, r4
 8004edc:	4659      	mov	r1, fp
 8004ede:	f000 f9df 	bl	80052a0 <fabs>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	49cc      	ldr	r1, [pc, #816]	; (800521c <__kernel_tan+0x374>)
 8004eea:	f7fb fc17 	bl	800071c <__aeabi_ddiv>
 8004eee:	4682      	mov	sl, r0
 8004ef0:	468b      	mov	fp, r1
 8004ef2:	4650      	mov	r0, sl
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	b00b      	add	sp, #44	; 0x2c
 8004ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004efc:	2f01      	cmp	r7, #1
 8004efe:	d0f8      	beq.n	8004ef2 <__kernel_tan+0x4a>
 8004f00:	4620      	mov	r0, r4
 8004f02:	4659      	mov	r1, fp
 8004f04:	9a02      	ldr	r2, [sp, #8]
 8004f06:	9b00      	ldr	r3, [sp, #0]
 8004f08:	f7fb f928 	bl	800015c <__adddf3>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	460f      	mov	r7, r1
 8004f12:	2000      	movs	r0, #0
 8004f14:	49c2      	ldr	r1, [pc, #776]	; (8005220 <__kernel_tan+0x378>)
 8004f16:	f7fb fc01 	bl	800071c <__aeabi_ddiv>
 8004f1a:	462e      	mov	r6, r5
 8004f1c:	4689      	mov	r9, r1
 8004f1e:	4652      	mov	r2, sl
 8004f20:	465b      	mov	r3, fp
 8004f22:	4680      	mov	r8, r0
 8004f24:	462c      	mov	r4, r5
 8004f26:	4630      	mov	r0, r6
 8004f28:	460d      	mov	r5, r1
 8004f2a:	4639      	mov	r1, r7
 8004f2c:	f7fb f914 	bl	8000158 <__aeabi_dsub>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	9802      	ldr	r0, [sp, #8]
 8004f36:	9900      	ldr	r1, [sp, #0]
 8004f38:	f7fb f90e 	bl	8000158 <__aeabi_dsub>
 8004f3c:	4632      	mov	r2, r6
 8004f3e:	464b      	mov	r3, r9
 8004f40:	f7fb fac2 	bl	80004c8 <__aeabi_dmul>
 8004f44:	4632      	mov	r2, r6
 8004f46:	4682      	mov	sl, r0
 8004f48:	468b      	mov	fp, r1
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	4639      	mov	r1, r7
 8004f50:	f7fb faba 	bl	80004c8 <__aeabi_dmul>
 8004f54:	2200      	movs	r2, #0
 8004f56:	4bb1      	ldr	r3, [pc, #708]	; (800521c <__kernel_tan+0x374>)
 8004f58:	f7fb f900 	bl	800015c <__adddf3>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4650      	mov	r0, sl
 8004f62:	4659      	mov	r1, fp
 8004f64:	f7fb f8fa 	bl	800015c <__adddf3>
 8004f68:	4642      	mov	r2, r8
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	f7fb faac 	bl	80004c8 <__aeabi_dmul>
 8004f70:	4622      	mov	r2, r4
 8004f72:	462b      	mov	r3, r5
 8004f74:	f7fb f8f2 	bl	800015c <__adddf3>
 8004f78:	e7b9      	b.n	8004eee <__kernel_tan+0x46>
 8004f7a:	4baa      	ldr	r3, [pc, #680]	; (8005224 <__kernel_tan+0x37c>)
 8004f7c:	429e      	cmp	r6, r3
 8004f7e:	dd21      	ble.n	8004fc4 <__kernel_tan+0x11c>
 8004f80:	2900      	cmp	r1, #0
 8004f82:	da06      	bge.n	8004f92 <__kernel_tan+0xea>
 8004f84:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004f88:	469b      	mov	fp, r3
 8004f8a:	9b00      	ldr	r3, [sp, #0]
 8004f8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	4652      	mov	r2, sl
 8004f94:	a182      	add	r1, pc, #520	; (adr r1, 80051a0 <__kernel_tan+0x2f8>)
 8004f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f9a:	465b      	mov	r3, fp
 8004f9c:	f7fb f8dc 	bl	8000158 <__aeabi_dsub>
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	460d      	mov	r5, r1
 8004fa4:	a180      	add	r1, pc, #512	; (adr r1, 80051a8 <__kernel_tan+0x300>)
 8004fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004faa:	9a02      	ldr	r2, [sp, #8]
 8004fac:	9b00      	ldr	r3, [sp, #0]
 8004fae:	f7fb f8d3 	bl	8000158 <__aeabi_dsub>
 8004fb2:	462b      	mov	r3, r5
 8004fb4:	4622      	mov	r2, r4
 8004fb6:	f7fb f8d1 	bl	800015c <__adddf3>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	4682      	mov	sl, r0
 8004fbe:	468b      	mov	fp, r1
 8004fc0:	9302      	str	r3, [sp, #8]
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	4652      	mov	r2, sl
 8004fc6:	465b      	mov	r3, fp
 8004fc8:	4650      	mov	r0, sl
 8004fca:	4659      	mov	r1, fp
 8004fcc:	f7fb fa7c 	bl	80004c8 <__aeabi_dmul>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4680      	mov	r8, r0
 8004fd6:	4689      	mov	r9, r1
 8004fd8:	f7fb fa76 	bl	80004c8 <__aeabi_dmul>
 8004fdc:	4642      	mov	r2, r8
 8004fde:	4604      	mov	r4, r0
 8004fe0:	460d      	mov	r5, r1
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	4650      	mov	r0, sl
 8004fe6:	4659      	mov	r1, fp
 8004fe8:	f7fb fa6e 	bl	80004c8 <__aeabi_dmul>
 8004fec:	a370      	add	r3, pc, #448	; (adr r3, 80051b0 <__kernel_tan+0x308>)
 8004fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	f7fb fa65 	bl	80004c8 <__aeabi_dmul>
 8004ffe:	a36e      	add	r3, pc, #440	; (adr r3, 80051b8 <__kernel_tan+0x310>)
 8005000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005004:	f7fb f8aa 	bl	800015c <__adddf3>
 8005008:	4622      	mov	r2, r4
 800500a:	462b      	mov	r3, r5
 800500c:	f7fb fa5c 	bl	80004c8 <__aeabi_dmul>
 8005010:	a36b      	add	r3, pc, #428	; (adr r3, 80051c0 <__kernel_tan+0x318>)
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	f7fb f8a1 	bl	800015c <__adddf3>
 800501a:	4622      	mov	r2, r4
 800501c:	462b      	mov	r3, r5
 800501e:	f7fb fa53 	bl	80004c8 <__aeabi_dmul>
 8005022:	a369      	add	r3, pc, #420	; (adr r3, 80051c8 <__kernel_tan+0x320>)
 8005024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005028:	f7fb f898 	bl	800015c <__adddf3>
 800502c:	4622      	mov	r2, r4
 800502e:	462b      	mov	r3, r5
 8005030:	f7fb fa4a 	bl	80004c8 <__aeabi_dmul>
 8005034:	a366      	add	r3, pc, #408	; (adr r3, 80051d0 <__kernel_tan+0x328>)
 8005036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503a:	f7fb f88f 	bl	800015c <__adddf3>
 800503e:	4622      	mov	r2, r4
 8005040:	462b      	mov	r3, r5
 8005042:	f7fb fa41 	bl	80004c8 <__aeabi_dmul>
 8005046:	a364      	add	r3, pc, #400	; (adr r3, 80051d8 <__kernel_tan+0x330>)
 8005048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504c:	f7fb f886 	bl	800015c <__adddf3>
 8005050:	4642      	mov	r2, r8
 8005052:	464b      	mov	r3, r9
 8005054:	f7fb fa38 	bl	80004c8 <__aeabi_dmul>
 8005058:	a361      	add	r3, pc, #388	; (adr r3, 80051e0 <__kernel_tan+0x338>)
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005062:	4620      	mov	r0, r4
 8005064:	4629      	mov	r1, r5
 8005066:	f7fb fa2f 	bl	80004c8 <__aeabi_dmul>
 800506a:	a35f      	add	r3, pc, #380	; (adr r3, 80051e8 <__kernel_tan+0x340>)
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f7fb f874 	bl	800015c <__adddf3>
 8005074:	4622      	mov	r2, r4
 8005076:	462b      	mov	r3, r5
 8005078:	f7fb fa26 	bl	80004c8 <__aeabi_dmul>
 800507c:	a35c      	add	r3, pc, #368	; (adr r3, 80051f0 <__kernel_tan+0x348>)
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	f7fb f86b 	bl	800015c <__adddf3>
 8005086:	4622      	mov	r2, r4
 8005088:	462b      	mov	r3, r5
 800508a:	f7fb fa1d 	bl	80004c8 <__aeabi_dmul>
 800508e:	a35a      	add	r3, pc, #360	; (adr r3, 80051f8 <__kernel_tan+0x350>)
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	f7fb f862 	bl	800015c <__adddf3>
 8005098:	4622      	mov	r2, r4
 800509a:	462b      	mov	r3, r5
 800509c:	f7fb fa14 	bl	80004c8 <__aeabi_dmul>
 80050a0:	a357      	add	r3, pc, #348	; (adr r3, 8005200 <__kernel_tan+0x358>)
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f7fb f859 	bl	800015c <__adddf3>
 80050aa:	4622      	mov	r2, r4
 80050ac:	462b      	mov	r3, r5
 80050ae:	f7fb fa0b 	bl	80004c8 <__aeabi_dmul>
 80050b2:	a355      	add	r3, pc, #340	; (adr r3, 8005208 <__kernel_tan+0x360>)
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	f7fb f850 	bl	800015c <__adddf3>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80050c4:	f7fb f84a 	bl	800015c <__adddf3>
 80050c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050cc:	f7fb f9fc 	bl	80004c8 <__aeabi_dmul>
 80050d0:	9a02      	ldr	r2, [sp, #8]
 80050d2:	9b00      	ldr	r3, [sp, #0]
 80050d4:	f7fb f842 	bl	800015c <__adddf3>
 80050d8:	4642      	mov	r2, r8
 80050da:	464b      	mov	r3, r9
 80050dc:	f7fb f9f4 	bl	80004c8 <__aeabi_dmul>
 80050e0:	9a02      	ldr	r2, [sp, #8]
 80050e2:	9b00      	ldr	r3, [sp, #0]
 80050e4:	f7fb f83a 	bl	800015c <__adddf3>
 80050e8:	a349      	add	r3, pc, #292	; (adr r3, 8005210 <__kernel_tan+0x368>)
 80050ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ee:	4604      	mov	r4, r0
 80050f0:	460d      	mov	r5, r1
 80050f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050f6:	f7fb f9e7 	bl	80004c8 <__aeabi_dmul>
 80050fa:	4622      	mov	r2, r4
 80050fc:	462b      	mov	r3, r5
 80050fe:	f7fb f82d 	bl	800015c <__adddf3>
 8005102:	460b      	mov	r3, r1
 8005104:	e9cd 0100 	strd	r0, r1, [sp]
 8005108:	4602      	mov	r2, r0
 800510a:	4659      	mov	r1, fp
 800510c:	4650      	mov	r0, sl
 800510e:	f7fb f825 	bl	800015c <__adddf3>
 8005112:	4b44      	ldr	r3, [pc, #272]	; (8005224 <__kernel_tan+0x37c>)
 8005114:	4604      	mov	r4, r0
 8005116:	429e      	cmp	r6, r3
 8005118:	460d      	mov	r5, r1
 800511a:	f340 8085 	ble.w	8005228 <__kernel_tan+0x380>
 800511e:	4638      	mov	r0, r7
 8005120:	f7fb f968 	bl	80003f4 <__aeabi_i2d>
 8005124:	4622      	mov	r2, r4
 8005126:	4680      	mov	r8, r0
 8005128:	4689      	mov	r9, r1
 800512a:	462b      	mov	r3, r5
 800512c:	4620      	mov	r0, r4
 800512e:	4629      	mov	r1, r5
 8005130:	f7fb f9ca 	bl	80004c8 <__aeabi_dmul>
 8005134:	4642      	mov	r2, r8
 8005136:	4606      	mov	r6, r0
 8005138:	460f      	mov	r7, r1
 800513a:	464b      	mov	r3, r9
 800513c:	4620      	mov	r0, r4
 800513e:	4629      	mov	r1, r5
 8005140:	f7fb f80c 	bl	800015c <__adddf3>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4630      	mov	r0, r6
 800514a:	4639      	mov	r1, r7
 800514c:	f7fb fae6 	bl	800071c <__aeabi_ddiv>
 8005150:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005154:	f7fb f800 	bl	8000158 <__aeabi_dsub>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4650      	mov	r0, sl
 800515e:	4659      	mov	r1, fp
 8005160:	f7fa fffa 	bl	8000158 <__aeabi_dsub>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	f7fa fff8 	bl	800015c <__adddf3>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4640      	mov	r0, r8
 8005172:	4649      	mov	r1, r9
 8005174:	f7fa fff0 	bl	8000158 <__aeabi_dsub>
 8005178:	9b07      	ldr	r3, [sp, #28]
 800517a:	4604      	mov	r4, r0
 800517c:	179b      	asrs	r3, r3, #30
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	f1c3 0001 	rsb	r0, r3, #1
 8005186:	460d      	mov	r5, r1
 8005188:	f7fb f934 	bl	80003f4 <__aeabi_i2d>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4620      	mov	r0, r4
 8005192:	4629      	mov	r1, r5
 8005194:	f7fb f998 	bl	80004c8 <__aeabi_dmul>
 8005198:	e6a9      	b.n	8004eee <__kernel_tan+0x46>
 800519a:	bf00      	nop
 800519c:	f3af 8000 	nop.w
 80051a0:	54442d18 	.word	0x54442d18
 80051a4:	3fe921fb 	.word	0x3fe921fb
 80051a8:	33145c07 	.word	0x33145c07
 80051ac:	3c81a626 	.word	0x3c81a626
 80051b0:	74bf7ad4 	.word	0x74bf7ad4
 80051b4:	3efb2a70 	.word	0x3efb2a70
 80051b8:	32f0a7e9 	.word	0x32f0a7e9
 80051bc:	3f12b80f 	.word	0x3f12b80f
 80051c0:	1a8d1068 	.word	0x1a8d1068
 80051c4:	3f3026f7 	.word	0x3f3026f7
 80051c8:	fee08315 	.word	0xfee08315
 80051cc:	3f57dbc8 	.word	0x3f57dbc8
 80051d0:	e96e8493 	.word	0xe96e8493
 80051d4:	3f8226e3 	.word	0x3f8226e3
 80051d8:	1bb341fe 	.word	0x1bb341fe
 80051dc:	3faba1ba 	.word	0x3faba1ba
 80051e0:	db605373 	.word	0xdb605373
 80051e4:	bef375cb 	.word	0xbef375cb
 80051e8:	a03792a6 	.word	0xa03792a6
 80051ec:	3f147e88 	.word	0x3f147e88
 80051f0:	f2f26501 	.word	0xf2f26501
 80051f4:	3f4344d8 	.word	0x3f4344d8
 80051f8:	c9560328 	.word	0xc9560328
 80051fc:	3f6d6d22 	.word	0x3f6d6d22
 8005200:	8406d637 	.word	0x8406d637
 8005204:	3f9664f4 	.word	0x3f9664f4
 8005208:	1110fe7a 	.word	0x1110fe7a
 800520c:	3fc11111 	.word	0x3fc11111
 8005210:	55555563 	.word	0x55555563
 8005214:	3fd55555 	.word	0x3fd55555
 8005218:	3e2fffff 	.word	0x3e2fffff
 800521c:	3ff00000 	.word	0x3ff00000
 8005220:	bff00000 	.word	0xbff00000
 8005224:	3fe59427 	.word	0x3fe59427
 8005228:	2f01      	cmp	r7, #1
 800522a:	d031      	beq.n	8005290 <__kernel_tan+0x3e8>
 800522c:	460f      	mov	r7, r1
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	2000      	movs	r0, #0
 8005234:	4918      	ldr	r1, [pc, #96]	; (8005298 <__kernel_tan+0x3f0>)
 8005236:	f7fb fa71 	bl	800071c <__aeabi_ddiv>
 800523a:	2600      	movs	r6, #0
 800523c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005240:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005244:	4652      	mov	r2, sl
 8005246:	465b      	mov	r3, fp
 8005248:	4630      	mov	r0, r6
 800524a:	4639      	mov	r1, r7
 800524c:	f7fa ff84 	bl	8000158 <__aeabi_dsub>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005258:	f7fa ff7e 	bl	8000158 <__aeabi_dsub>
 800525c:	4632      	mov	r2, r6
 800525e:	462b      	mov	r3, r5
 8005260:	f7fb f932 	bl	80004c8 <__aeabi_dmul>
 8005264:	4632      	mov	r2, r6
 8005266:	4682      	mov	sl, r0
 8005268:	468b      	mov	fp, r1
 800526a:	462b      	mov	r3, r5
 800526c:	4630      	mov	r0, r6
 800526e:	4639      	mov	r1, r7
 8005270:	f7fb f92a 	bl	80004c8 <__aeabi_dmul>
 8005274:	2200      	movs	r2, #0
 8005276:	4b09      	ldr	r3, [pc, #36]	; (800529c <__kernel_tan+0x3f4>)
 8005278:	f7fa ff70 	bl	800015c <__adddf3>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4650      	mov	r0, sl
 8005282:	4659      	mov	r1, fp
 8005284:	f7fa ff6a 	bl	800015c <__adddf3>
 8005288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800528c:	4634      	mov	r4, r6
 800528e:	e66d      	b.n	8004f6c <__kernel_tan+0xc4>
 8005290:	4682      	mov	sl, r0
 8005292:	468b      	mov	fp, r1
 8005294:	e62d      	b.n	8004ef2 <__kernel_tan+0x4a>
 8005296:	bf00      	nop
 8005298:	bff00000 	.word	0xbff00000
 800529c:	3ff00000 	.word	0x3ff00000

080052a0 <fabs>:
 80052a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80052a4:	4770      	bx	lr
	...

080052a8 <floor>:
 80052a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052ac:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80052b0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80052b4:	2e13      	cmp	r6, #19
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4607      	mov	r7, r0
 80052bc:	460c      	mov	r4, r1
 80052be:	4605      	mov	r5, r0
 80052c0:	dc33      	bgt.n	800532a <floor+0x82>
 80052c2:	2e00      	cmp	r6, #0
 80052c4:	da14      	bge.n	80052f0 <floor+0x48>
 80052c6:	a334      	add	r3, pc, #208	; (adr r3, 8005398 <floor+0xf0>)
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f7fa ff46 	bl	800015c <__adddf3>
 80052d0:	2200      	movs	r2, #0
 80052d2:	2300      	movs	r3, #0
 80052d4:	f7fb fb88 	bl	80009e8 <__aeabi_dcmpgt>
 80052d8:	b138      	cbz	r0, 80052ea <floor+0x42>
 80052da:	2c00      	cmp	r4, #0
 80052dc:	da58      	bge.n	8005390 <floor+0xe8>
 80052de:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80052e2:	431d      	orrs	r5, r3
 80052e4:	d001      	beq.n	80052ea <floor+0x42>
 80052e6:	2500      	movs	r5, #0
 80052e8:	4c2d      	ldr	r4, [pc, #180]	; (80053a0 <floor+0xf8>)
 80052ea:	4623      	mov	r3, r4
 80052ec:	462f      	mov	r7, r5
 80052ee:	e025      	b.n	800533c <floor+0x94>
 80052f0:	4a2c      	ldr	r2, [pc, #176]	; (80053a4 <floor+0xfc>)
 80052f2:	fa42 f806 	asr.w	r8, r2, r6
 80052f6:	ea01 0208 	and.w	r2, r1, r8
 80052fa:	4302      	orrs	r2, r0
 80052fc:	d01e      	beq.n	800533c <floor+0x94>
 80052fe:	a326      	add	r3, pc, #152	; (adr r3, 8005398 <floor+0xf0>)
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	f7fa ff2a 	bl	800015c <__adddf3>
 8005308:	2200      	movs	r2, #0
 800530a:	2300      	movs	r3, #0
 800530c:	f7fb fb6c 	bl	80009e8 <__aeabi_dcmpgt>
 8005310:	2800      	cmp	r0, #0
 8005312:	d0ea      	beq.n	80052ea <floor+0x42>
 8005314:	2c00      	cmp	r4, #0
 8005316:	bfbe      	ittt	lt
 8005318:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800531c:	fa43 f606 	asrlt.w	r6, r3, r6
 8005320:	19a4      	addlt	r4, r4, r6
 8005322:	2500      	movs	r5, #0
 8005324:	ea24 0408 	bic.w	r4, r4, r8
 8005328:	e7df      	b.n	80052ea <floor+0x42>
 800532a:	2e33      	cmp	r6, #51	; 0x33
 800532c:	dd0a      	ble.n	8005344 <floor+0x9c>
 800532e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005332:	d103      	bne.n	800533c <floor+0x94>
 8005334:	f7fa ff12 	bl	800015c <__adddf3>
 8005338:	4607      	mov	r7, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4638      	mov	r0, r7
 800533e:	4619      	mov	r1, r3
 8005340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005344:	f04f 32ff 	mov.w	r2, #4294967295
 8005348:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800534c:	fa22 f808 	lsr.w	r8, r2, r8
 8005350:	ea18 0f00 	tst.w	r8, r0
 8005354:	d0f2      	beq.n	800533c <floor+0x94>
 8005356:	a310      	add	r3, pc, #64	; (adr r3, 8005398 <floor+0xf0>)
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	f7fa fefe 	bl	800015c <__adddf3>
 8005360:	2200      	movs	r2, #0
 8005362:	2300      	movs	r3, #0
 8005364:	f7fb fb40 	bl	80009e8 <__aeabi_dcmpgt>
 8005368:	2800      	cmp	r0, #0
 800536a:	d0be      	beq.n	80052ea <floor+0x42>
 800536c:	2c00      	cmp	r4, #0
 800536e:	da02      	bge.n	8005376 <floor+0xce>
 8005370:	2e14      	cmp	r6, #20
 8005372:	d103      	bne.n	800537c <floor+0xd4>
 8005374:	3401      	adds	r4, #1
 8005376:	ea25 0508 	bic.w	r5, r5, r8
 800537a:	e7b6      	b.n	80052ea <floor+0x42>
 800537c:	2301      	movs	r3, #1
 800537e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005382:	fa03 f606 	lsl.w	r6, r3, r6
 8005386:	4435      	add	r5, r6
 8005388:	42bd      	cmp	r5, r7
 800538a:	bf38      	it	cc
 800538c:	18e4      	addcc	r4, r4, r3
 800538e:	e7f2      	b.n	8005376 <floor+0xce>
 8005390:	2500      	movs	r5, #0
 8005392:	462c      	mov	r4, r5
 8005394:	e7a9      	b.n	80052ea <floor+0x42>
 8005396:	bf00      	nop
 8005398:	8800759c 	.word	0x8800759c
 800539c:	7e37e43c 	.word	0x7e37e43c
 80053a0:	bff00000 	.word	0xbff00000
 80053a4:	000fffff 	.word	0x000fffff

080053a8 <scalbn>:
 80053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053aa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80053ae:	4604      	mov	r4, r0
 80053b0:	460d      	mov	r5, r1
 80053b2:	4617      	mov	r7, r2
 80053b4:	460b      	mov	r3, r1
 80053b6:	b996      	cbnz	r6, 80053de <scalbn+0x36>
 80053b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80053bc:	4303      	orrs	r3, r0
 80053be:	d039      	beq.n	8005434 <scalbn+0x8c>
 80053c0:	4b33      	ldr	r3, [pc, #204]	; (8005490 <scalbn+0xe8>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	f7fb f880 	bl	80004c8 <__aeabi_dmul>
 80053c8:	4b32      	ldr	r3, [pc, #200]	; (8005494 <scalbn+0xec>)
 80053ca:	4604      	mov	r4, r0
 80053cc:	429f      	cmp	r7, r3
 80053ce:	460d      	mov	r5, r1
 80053d0:	da0f      	bge.n	80053f2 <scalbn+0x4a>
 80053d2:	a32b      	add	r3, pc, #172	; (adr r3, 8005480 <scalbn+0xd8>)
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f7fb f876 	bl	80004c8 <__aeabi_dmul>
 80053dc:	e006      	b.n	80053ec <scalbn+0x44>
 80053de:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80053e2:	4296      	cmp	r6, r2
 80053e4:	d10a      	bne.n	80053fc <scalbn+0x54>
 80053e6:	4602      	mov	r2, r0
 80053e8:	f7fa feb8 	bl	800015c <__adddf3>
 80053ec:	4604      	mov	r4, r0
 80053ee:	460d      	mov	r5, r1
 80053f0:	e020      	b.n	8005434 <scalbn+0x8c>
 80053f2:	460b      	mov	r3, r1
 80053f4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80053f8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80053fc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005400:	19b9      	adds	r1, r7, r6
 8005402:	4291      	cmp	r1, r2
 8005404:	dd0e      	ble.n	8005424 <scalbn+0x7c>
 8005406:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800540a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800540e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005412:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005416:	4820      	ldr	r0, [pc, #128]	; (8005498 <scalbn+0xf0>)
 8005418:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800541c:	a31a      	add	r3, pc, #104	; (adr r3, 8005488 <scalbn+0xe0>)
 800541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005422:	e7d9      	b.n	80053d8 <scalbn+0x30>
 8005424:	2900      	cmp	r1, #0
 8005426:	dd08      	ble.n	800543a <scalbn+0x92>
 8005428:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800542c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005430:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005434:	4620      	mov	r0, r4
 8005436:	4629      	mov	r1, r5
 8005438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800543a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800543e:	da12      	bge.n	8005466 <scalbn+0xbe>
 8005440:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005444:	429f      	cmp	r7, r3
 8005446:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800544a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800544e:	dcdc      	bgt.n	800540a <scalbn+0x62>
 8005450:	a30b      	add	r3, pc, #44	; (adr r3, 8005480 <scalbn+0xd8>)
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800545a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800545e:	480f      	ldr	r0, [pc, #60]	; (800549c <scalbn+0xf4>)
 8005460:	f041 011f 	orr.w	r1, r1, #31
 8005464:	e7b8      	b.n	80053d8 <scalbn+0x30>
 8005466:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800546a:	3136      	adds	r1, #54	; 0x36
 800546c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005470:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005474:	4620      	mov	r0, r4
 8005476:	4629      	mov	r1, r5
 8005478:	2200      	movs	r2, #0
 800547a:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <scalbn+0xf8>)
 800547c:	e7ac      	b.n	80053d8 <scalbn+0x30>
 800547e:	bf00      	nop
 8005480:	c2f8f359 	.word	0xc2f8f359
 8005484:	01a56e1f 	.word	0x01a56e1f
 8005488:	8800759c 	.word	0x8800759c
 800548c:	7e37e43c 	.word	0x7e37e43c
 8005490:	43500000 	.word	0x43500000
 8005494:	ffff3cb0 	.word	0xffff3cb0
 8005498:	8800759c 	.word	0x8800759c
 800549c:	c2f8f359 	.word	0xc2f8f359
 80054a0:	3c900000 	.word	0x3c900000

080054a4 <_init>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	bf00      	nop
 80054a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054aa:	bc08      	pop	{r3}
 80054ac:	469e      	mov	lr, r3
 80054ae:	4770      	bx	lr

080054b0 <_fini>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	bf00      	nop
 80054b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b6:	bc08      	pop	{r3}
 80054b8:	469e      	mov	lr, r3
 80054ba:	4770      	bx	lr
